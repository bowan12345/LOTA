@using LOTA.Model.DTO.Admin
@model IEnumerable<AssessmentReturnDTO>
@{
    ViewData["Title"] = "Manage Assessments";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    var token = Html.AntiForgeryToken();
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold text-dark mb-0">Manage Assessments</h2>
        <div class="d-flex gap-2">
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addAssessmentModal" id="addAssessmentBtn">
                <i class="fas fa-plus me-2"></i>
                Add Assessment
            </button>
        </div>
    </div>

    <div class="card border-0 shadow-sm">
        <div class="card-header bg-white border-0 py-3">
            <div class="row align-items-center">
                <div class="col-lg-6 col-md-12 mb-3 mb-lg-0">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-clipboard-check text-primary me-2"></i>
                        Assessment List
                        @if (Model != null && Model.Any())
                        {
                            <span class="badge bg-primary ms-2">@Model.Count()</span>
                        }
                        @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
                        {
                            <span class="badge bg-info ms-2">
                                <i class="fas fa-filter me-1"></i>
                                Filtered
                            </span>
                        }
                    </h5>
                </div>
                <div class="col-lg-6 col-md-12"></div>
            </div>
        </div>
        <div class="card-body p-0">
            @if (Model != null && Model.Any())
            {
                var courseGroups = Model.GroupBy(a => new { 
                    CourseId = a.TrimesterCourse?.Course?.Id, 
                    CourseName = a.TrimesterCourse?.Course?.CourseName, 
                    CourseCode = a.TrimesterCourse?.Course?.CourseCode,
                    Trimester = a.Trimester
                }).OrderBy(g => g.Key.CourseName);

                foreach (var courseGroup in courseGroups)
                {
                    var courseId = $"course_{courseGroup.Key.CourseId?.Replace("-", "_")}";
                    <div class="course-assessment-section">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="course-header-left" onclick="toggleCourseAssessments('@courseId')" style="cursor: pointer;">
                                    <div class="course-icon">
                                        <i class="fas fa-chevron-down me-2" id="icon_@courseId"></i>
                                        <i class="fas fa-book"></i>
                                    </div>
                                    <div class="course-main-info">
                                        <h5 class="course-name">@courseGroup.Key.CourseName</h5>
                                        <div class="course-code">@courseGroup.Key.CourseCode</div>
                                    </div>
                                    <div class="course-details">
                                        <div class="trimester-info">
                                            <i class="fas fa-calendar-alt me-1"></i>
                                            <span class="badge bg-info">@courseGroup.Key.Trimester?.AcademicYear - T @courseGroup.Key.Trimester?.TrimesterNumber</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-8">
                                <div class="assessments-container" id="@courseId">
                                    <div class="table-responsive">
                                        <table class="table table-hover mb-0 assessment-table">
                                            <thead class="table-light">
                                                <tr>
                                                    <th class="border-0 text-nowrap px-3">Assessment Name</th>
                                                    <th class="border-0 text-nowrap px-3">Type</th>
                                                    <th class="border-0 text-nowrap px-3">Weight</th>
                                                    <th class="border-0 text-nowrap px-3">Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var assessment in courseGroup.OrderBy(a => a.AssessmentName))
                                                {
                                                    <tr class="assessment-row">
                                                        <td class="border-0 px-3">
                                                            <div class="d-flex align-items-center">
                                                                <div class="flex-grow-1">
                                                                    <h6 class="mb-1 fw-semibold text-dark">@assessment.AssessmentName</h6>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td class="border-0 px-3">
                                                            <span class="badge bg-info">@assessment.AssessmentType?.AssessmentTypeName</span>
                                                        </td>
                                                        <td class="border-0 px-3">
                                                            <span class="badge bg-success">@assessment.Weight%</span>
                                                        </td>
                                                        <td class="border-0 px-3">
                                                            <div class="btn-group" role="group">
                                                                <button class="btn btn-success btn-sm" onclick="editAssessment('@assessment.Id', '@assessment.AssessmentName')" title="Edit Assessment">
                                                                    <i class="fas fa-edit"></i>
                                                                </button>
                                                                <button class="btn btn-danger btn-sm" onclick="deleteAssessment('@assessment.Id', '@assessment.AssessmentName')" title="Delete Assessment">
                                                                    <i class="fas fa-trash"></i>
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-4">
                    <div class="text-muted">
                        <i class="fas fa-clipboard-check fa-2x mb-3"></i>
                        <p class="mb-0">No assessments found</p>
                        <small>No assessments are available for management</small>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

 
<!-- Add Assessment Modal -->
<div class="modal fade" id="addAssessmentModal" tabindex="-1" aria-labelledby="addAssessmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="addAssessmentModalLabel">
                    <i class="fas fa-plus me-2"></i>
                    Add Assessment
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addAssessmentForm">
                    <div class="row g-3">
                        <div class="col-12">
                            <label for="courseId" class="form-label">Course Offering</label>
                            <div class="position-relative">
                                <input type="text" id="courseSearchInput" class="form-control" placeholder="Type to search course code or name..." onkeyup="filterCourseOptions()" onfocus="showDropdown()" onblur="hideDropdown()">
                                <div id="courseDropdown" class="dropdown-menu w-100" style="display: none; max-height: 300px; overflow-y: auto;"></div>
                            </div>
                            <input type="hidden" id="courseId" name="courseId">
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="assessmentName" class="form-label">Assessment Name</label>
                            <input type="text" class="form-control" id="assessmentName" name="assessmentName" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="assessmentType" class="form-label">Assessment Type</label>
                            <select class="form-select" id="assessmentType" name="assessmentType" required>
                                <option value="">Select Type</option>
                            </select>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="Weight" class="form-label">Weight (%)</label>
                            <input type="number" class="form-control" id="Weight" name="Weight" min="0" max="100" step="0.01" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="Score" class="form-label">Score</label>
                            <input type="number" class="form-control" id="Score" name="Score" min="0" step="0.01" required>
                        </div>
                        <div class="col-12">
                            <label class="form-label">Learning Outcomes</label>
                            <div id="learningOutcomesContainer"></div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="saveAssessment()">
                    <i class="fas fa-save me-2"></i>
                    Add
                </button>
            </div>
        </div>
    </div>
    </div>

<!-- Edit Assessment Modal -->
<div class="modal fade" id="editAssessmentModal" tabindex="-1" aria-labelledby="editAssessmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="editAssessmentModalLabel">
                    <i class="fas fa-edit me-2"></i>
                    Edit Assessment
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editAssessmentForm">
                    <input type="hidden" id="editAssessmentId" name="assessmentId">
                    <input type="hidden" id="editCourseId" name="courseOfferingId">
                    <input type="hidden" id="editTrimesterId" name="trimesterId">
                    <div class="row g-3">
                        <div class="col-12 col-md-6">
                            <label for="editAssessmentName" class="form-label">Assessment Name</label>
                            <input type="text" class="form-control" id="editAssessmentName" name="assessmentName" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editAssessmentType" class="form-label">Assessment Type</label>
                            <select class="form-select" id="editAssessmentType" name="assessmentType" required>
                                <option value="">Select Type</option>
                            </select>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editWeight" class="form-label">Weight (%)</label>
                            <input type="number" class="form-control" id="editWeight" name="Weight" min="0" max="100" step="0.01" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editScore" class="form-label">Score</label>
                            <input type="number" class="form-control" id="editScore" name="Score" min="0" step="0.01" required>
                        </div>
                        <div class="col-12">
                            <label class="form-label">Learning Outcomes</label>
                            <div id="editLearningOutcomesContainer"></div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="updateAssessment()">
                    <i class="fas fa-save me-2"></i>
                    Update
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Cache for latest trimester course offerings (tutor only)
        let latestTrimesterCourseOfferings = [];

        // Toggle assessments list under a course card
        function toggleCourseAssessments(courseId) {
            const assessmentsContainer = document.getElementById(courseId);
            const icon = document.getElementById(`icon_${courseId}`);
            if (!assessmentsContainer || !icon) return;
            if (assessmentsContainer.classList.contains('collapsed')) {
                assessmentsContainer.classList.remove('collapsed');
                icon.classList.remove('rotated');
            } else {
                assessmentsContainer.classList.add('collapsed');
                icon.classList.add('rotated');
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            loadLatestTrimesterCourseOfferings();
            loadAssessmentTypes();

            const addAssessmentModal = document.getElementById('addAssessmentModal');
            if (addAssessmentModal) {
                addAssessmentModal.addEventListener('show.bs.modal', function() {
                    populateCourseSelectAndDropdown();
                    resetCourseSearchList();
                });
                addAssessmentModal.addEventListener('hidden.bs.modal', function() {
                    const form = document.getElementById('addAssessmentForm');
                    if (form) form.reset();
                    const lc = document.getElementById('learningOutcomesContainer');
                    if (lc) lc.innerHTML = '';
                    const cid = document.getElementById('courseId');
                    if (cid) cid.disabled = false;
                });
            }
        });

        // Ensure SweetAlert is available (supports v1 'swal' and v2 'Swal')
        // Use global SweetAlert helpers (loaded in layout via wwwroot/js/sweetalert-utils.js)

        // Build dropdown items for course offering selection
        function populateCourseSelectAndDropdown() {
            const dropdown = document.getElementById('courseDropdown');
            const input = document.getElementById('courseSearchInput');
            if (!dropdown) return;
            const items = (latestTrimesterCourseOfferings || []).map(co => {
                const tri = co?.trimester ? `Tri ${co.trimester.trimesterNumber} ${co.trimester.academicYear}` : '';
                const courseCode = co?.course?.courseCode || '';
                const courseName = co?.course?.courseName || '';
                const display = `${courseCode} - ${courseName} - ${tri}`;
                const safeDisplay = display.replace(/'/g, "\\'");
                return `<div class="dropdown-item" data-value="${co.id}" data-course-code="${courseCode}" data-course-name="${courseName}" onclick="selectCourse('${co.id}', '${safeDisplay}')">${display}</div>`;
            }).join('');
            dropdown.innerHTML = `<div class="dropdown-item" data-value="" onclick="selectCourse('', '-- Select a Course Offering --')">-- Select a Course Offering --</div>` + items;
            if (input) input.value = '';
        }

        function showDropdown() { const d = document.getElementById('courseDropdown'); if (d) d.style.display = 'block'; }
        function hideDropdown() { setTimeout(() => { const d = document.getElementById('courseDropdown'); if (d) d.style.display = 'none'; }, 150); }
        function filterCourseOptions() {
            const input = document.getElementById('courseSearchInput');
            const dropdown = document.getElementById('courseDropdown');
            if (!input || !dropdown) return;
            const term = (input.value || '').trim().toLowerCase();
            const items = dropdown.querySelectorAll('.dropdown-item');
            items.forEach((item, idx) => {
                if (idx === 0) return;
                const code = (item.getAttribute('data-course-code') || '').toLowerCase();
                const name = (item.getAttribute('data-course-name') || '').toLowerCase();
                item.style.display = (!term || code.includes(term) || name.includes(term)) ? '' : 'none';
            });
            showDropdown();
        }
        function resetCourseSearchList() {
            const input = document.getElementById('courseSearchInput');
            const dropdown = document.getElementById('courseDropdown');
            const hiddenCourseId = document.getElementById('courseId');
            if (input) input.value = '';
            if (hiddenCourseId) hiddenCourseId.value = '';
            if (dropdown) dropdown.querySelectorAll('.dropdown-item').forEach(i => i.style.display = '');
        }
        function selectCourse(id, displayText) {
            const hiddenCourseId = document.getElementById('courseId');
            const input = document.getElementById('courseSearchInput');
            if (hiddenCourseId) hiddenCourseId.value = id || '';
            if (input) input.value = displayText || '';
            if (id) { loadLearningOutcomes(id); } else { const c = document.getElementById('learningOutcomesContainer'); if (c) c.innerHTML = ''; }
            hideDropdown();
        }

        // Tutor endpoints
        function loadLatestTrimesterCourseOfferings() {
            fetch('/Tutor/Assessment/GetLatestTrimesterCourseOfferings')
                .then(r => r.json())
                .then(data => {
                    if (data.success && data.data) {
                        latestTrimesterCourseOfferings = data.data;
                        populateCourseSelectAndDropdown();
                    }
                })
                .catch(() => {});
        }

        function loadAssessmentTypes() {
            const select = document.getElementById('assessmentType');
            if (!select) return;
            select.innerHTML = '<option value="">Loading assessment types...</option>';
            fetch('/Tutor/Assessment/GetAssessmentTypes')
                .then(r => r.json())
                .then(data => {
                    if (data.success && data.data) {
                        select.innerHTML = '<option value="">Select Type</option>' + data.data.map(at => `<option value="${at.id}">${at.assessmentTypeName}</option>`).join('');
                    } else {
                        select.innerHTML = '<option value="">No assessment types available</option>';
                    }
                })
                .catch(() => { select.innerHTML = '<option value="">Error loading assessment types</option>'; });
        }

        function loadAssessmentTypesForEdit() {
            const select = document.getElementById('editAssessmentType');
            if (!select) return Promise.resolve();
            select.innerHTML = '<option value="">Loading assessment types...</option>';
            return fetch('/Tutor/Assessment/GetAssessmentTypes')
                .then(r => r.json())
                .then(data => {
                    if (data.success && data.data) {
                        select.innerHTML = '<option value="">Select Type</option>' + data.data.map(at => `<option value="${at.id}">${at.assessmentTypeName}</option>`).join('');
                    } else {
                        select.innerHTML = '<option value="">No assessment types available</option>';
                    }
                })
                .catch(() => { select.innerHTML = '<option value="">Error loading assessment types</option>'; });
        }

        function loadLearningOutcomes(courseOfferingId) {
            const container = document.getElementById('learningOutcomesContainer');
            if (!container) return;
            container.innerHTML = '<div class="alert alert-info"><i class="fas fa-spinner fa-spin me-2"></i>Loading learning outcomes...</div>';
            fetch(`/Tutor/Assessment/GetLearningOutcomes?courseOfferingId=${courseOfferingId}`)
                .then(r => r.json())
                .then(data => {
                    if (data.success && data.data && data.data.length) {
                        const sorted = data.data.sort((a,b) => (a.loName || a.LOName || '').localeCompare((b.loName || b.LOName || '')));
                        container.innerHTML = sorted.map(lo => `
                            <div class="form-check d-flex align-items-start mb-3">
                                <div class="flex-shrink-0 me-3 mt-1">
                                    <input class="form-check-input" type="checkbox" name="learningOutcomes" value="${lo.id}" id="lo_${lo.id}" onchange="toggleLOScoreInput('${lo.id}')">
                                </div>
                                <div class="flex-grow-1 me-3">
                                    <label class="form-check-label" for="lo_${lo.id}"><strong>${lo.loName || lo.LOName || ''}</strong> - ${lo.description || lo.Description || ''}</label>
                                </div>
                                <div class="flex-shrink-0" style="width: 120px;">
                                    <input type="number" class="form-control form-control-sm lo-score-input" id="lo_score_${lo.id}" name="lo_score_${lo.id}" placeholder="Score" min="0" max="100" step="0.01" style="display: none;" disabled>
                                </div>
                            </div>`).join('');
                    } else {
                        container.innerHTML = '<div class="alert alert-warning"><i class="fas fa-exclamation-triangle me-2"></i>No learning outcomes found</div>';
                    }
                })
                .catch(() => { container.innerHTML = '<div class="alert alert-danger">Error loading learning outcomes</div>'; });
        }

        function toggleLOScoreInput(loId) {
            const checkbox = document.getElementById(`lo_${loId}`);
            const scoreInput = document.getElementById(`lo_score_${loId}`);
            if (!checkbox || !scoreInput) return;
            if (checkbox.checked) { scoreInput.style.display = 'block'; scoreInput.disabled = false; } else { scoreInput.style.display = 'none'; scoreInput.disabled = true; scoreInput.value = ''; }
        }

        function saveAssessment() {
            const form = document.getElementById('addAssessmentForm');
            const fd = new FormData(form);
            const courseId = fd.get('courseId');
            const assessmentName = fd.get('assessmentName');
            const assessmentType = fd.get('assessmentType');
            const weight = fd.get('Weight');
            const score = fd.get('Score');
            if (!courseId || !assessmentName || !assessmentType || !weight || !score) { showError('Please fill in all required fields'); return; }
            if (parseFloat(weight) <= 0 || parseFloat(weight) > 100) { showError('Weight must be between 0 and 100'); return; }
            const selectedLOs = [];
            document.querySelectorAll('input[name="learningOutcomes"]:checked').forEach(cb => {
                const lid = cb.value; const si = document.getElementById(`lo_score_${lid}`);
                if (!si || si.value.trim()==='') { selectedLOs.length = 0; }
                else { const sc = parseFloat(si.value); if (sc < 0 || sc > 100) { selectedLOs.length = 0; } else { selectedLOs.push({ LOId: lid, Score: sc }); } }
            });
            if (selectedLOs.length === 0) { showError('Please select learning outcomes and enter scores'); return; }
            // derive trimesterId and actual courseId from cached offerings
            const offering = (latestTrimesterCourseOfferings || []).find(co => co.id === courseId);
            if (!offering) { showError('Course offering not found'); return; }
            const payload = {
                courseId: offering?.course?.id,
                courseOfferingId: courseId,
                trimesterId: offering?.trimester?.id,
                assessmentName: assessmentName,
                assessmentTypeId: assessmentType,
                Weight: parseFloat(weight),
                Score: parseFloat(score),
                learningOutcomes: selectedLOs
            };
            fetch('/Tutor/Assessment/CreateAssessment', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) })
                .then(r => r.json())
                .then(data => { if (data.success) { showSuccess('Assessment created successfully'); setTimeout(()=>location.reload(), 600); } else { showError('Error: ' + (data.message || 'failed')); } })
                .catch(() => showError('Network error'));
        }

        function editAssessment(assessmentId, assessmentName) {
            const modal = new bootstrap.Modal(document.getElementById('editAssessmentModal'));
            modal.show();
            document.getElementById('editAssessmentId').value = assessmentId;
            fetch(`/Tutor/Assessment/GetAssessmentById?id=${assessmentId}`)
                .then(r => r.json())
                .then(res => {
                    if (!(res.success && res.data)) { showError('Failed to load assessment'); modal.hide(); return; }
                    const a = res.data;
                    document.getElementById('editAssessmentName').value = a.assessmentName || '';
                    document.getElementById('editWeight').value = a.weight || '';
                    document.getElementById('editScore').value = a.score || '';
                    let courseOfferingId = a.courseOfferingId || (a.assessmentLearningOutcomes && a.assessmentLearningOutcomes[0]?.assessment?.courseOfferingId) || '';
                    document.getElementById('editCourseId').value = courseOfferingId;
                    document.getElementById('editTrimesterId').value = a.trimesterId || '';
                    loadAssessmentTypesForEdit().then(() => {
                        if (a.assessmentType && a.assessmentType.id) { document.getElementById('editAssessmentType').value = a.assessmentType.id; }
                    });
                    // render LO list for edit
                    const container = document.getElementById('editLearningOutcomesContainer');
                    const selectedLOScores = new Map();
                    const selectedIds = new Set();
                    (a.assessmentLearningOutcomes || []).forEach(lo => { const id = lo.learningOutcome?.id; if (id) { selectedIds.add(id); if (lo.score !== undefined) selectedLOScores.set(id, lo.score); } });
                    // load all LOs for the course offering
                    fetch(`/Tutor/Assessment/GetLearningOutcomes?courseOfferingId=${courseOfferingId}`)
                        .then(r => r.json())
                        .then(data => {
                            if (!(data.success && data.data)) { container.innerHTML = '<div class="alert alert-warning">No learning outcomes</div>'; return; }
                            const sorted = data.data.sort((x,y)=> (x.loName||'').localeCompare(y.loName||''));
                            container.innerHTML = sorted.map(lo => {
                                const checked = selectedIds.has(lo.id) ? 'checked' : '';
                                const score = selectedLOScores.get(lo.id) || '';
                                const visible = checked ? '' : 'style="display:none;"';
                                const disabled = checked ? '' : 'disabled';
                                return `<div class="form-check d-flex align-items-start mb-3">
                                    <div class="flex-shrink-0 me-3 mt-1">
                                        <input class="form-check-input" type="checkbox" name="editLearningOutcomes" value="${lo.id}" id="editLo_${lo.id}" ${checked} onchange="toggleEditLOScoreInput('${lo.id}')">
                                    </div>
                                    <div class="flex-grow-1 me-3">
                                        <label class="form-check-label" for="editLo_${lo.id}"><strong>${lo.loName || ''}</strong> - ${lo.description || ''}</label>
                                    </div>
                                    <div class="flex-shrink-0" style="width: 120px;">
                                        <input type="number" class="form-control form-control-sm edit-lo-score-input" id="edit_lo_score_${lo.id}" name="edit_lo_score_${lo.id}" placeholder="Score" min="0" max="100" step="0.01" value="${score}" ${visible} ${disabled}>
                                    </div>
                                </div>`;
                            }).join('');
                        });
                });
        }

        function toggleEditLOScoreInput(loId) {
            const cb = document.getElementById(`editLo_${loId}`);
            const si = document.getElementById(`edit_lo_score_${loId}`);
            if (!cb || !si) return;
            if (cb.checked) { si.style.display = 'block'; si.disabled = false; } else { si.style.display = 'none'; si.disabled = true; si.value = ''; }
        }

        function updateAssessment() {
            const form = document.getElementById('editAssessmentForm');
            const fd = new FormData(form);
            const assessmentName = fd.get('assessmentName');
            const assessmentType = fd.get('assessmentType');
            const weight = fd.get('Weight');
            const score = fd.get('Score');
            if (!assessmentName || !assessmentType || !weight || !score) { showError('Please fill in all required fields'); return; }
            if (parseFloat(weight) <= 0 || parseFloat(weight) > 100) { showError('Weight must be between 0 and 100'); return; }
            const selectedLOs = [];
            document.querySelectorAll('input[name="editLearningOutcomes"]:checked').forEach(cb => {
                const lid = cb.value; const si = document.getElementById(`edit_lo_score_${lid}`);
                if (!si || si.value.trim()==='') { selectedLOs.length = 0; }
                else { const sc = parseFloat(si.value); if (sc < 0 || sc > 100) { selectedLOs.length = 0; } else { selectedLOs.push({ LOId: lid, Score: sc }); } }
            });
            if (selectedLOs.length === 0) { showError('Please select learning outcomes and enter scores'); return; }
            const payload = {
                id: fd.get('assessmentId'),
                courseOfferingId: fd.get('courseOfferingId'),
                assessmentName: assessmentName,
                assessmentTypeId: assessmentType,
                trimesterId: fd.get('trimesterId') || '',
                Weight: parseFloat(weight),
                Score: parseFloat(score),
                LearningOutcomes: selectedLOs
            };
            fetch('/Tutor/Assessment/UpdateAssessment', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) })
                .then(r => r.json())
                .then(data => { if (data.success) { showSuccess('Assessment updated successfully'); setTimeout(()=>location.reload(), 600); } else { showError('Error: ' + (data.message || 'failed')); } })
                .catch(() => showError('Network error'));
        }

        function deleteAssessment(assessmentId, assessmentName) {
            showConfirm(`Are you sure you want to delete "${assessmentName}"?`, () => {
                fetch(`/Tutor/Assessment/DeleteAssessment?id=${assessmentId}`, { method: 'DELETE' })
                    .then(r => r.json())
                    .then(data => { if (data.success) { showSuccess('Assessment deleted successfully'); setTimeout(()=>location.reload(), 600); } else { showError('Error: ' + (data.message || 'failed')); } })
                    .catch(() => showError('Network error'));
            });
        }
    </script>
}

<style>
    .table th { font-weight: 600; color: #495057; border-bottom: 2px solid #dee2e6; }
    .table td { vertical-align: middle; border-bottom: 1px solid #f8f9fa; }
    .table tbody tr:hover { background-color: #f8f9fa; }
    .assessment-table { border-radius: 8px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,.05); }
    .assessment-table thead th { background-color: #f8f9fa !important; border-bottom: 2px solid #dee2e6; font-weight: 600; color: #495057; padding: 12px 16px; }
    .assessment-row { transition: all .2s ease; border-bottom: 1px solid #f1f3f4; }
    .assessment-row:hover { background-color: #f8f9fa; transform: translateX(2px); box-shadow: 0 2px 8px rgba(0,0,0,.1); }
    .assessment-row:last-child { border-bottom: none; }
    .assessment-row td { padding: 16px; vertical-align: middle; }
    .badge { font-size: .8rem; padding: 6px 10px; border-radius: 15px; font-weight: 500; }
    .course-assessment-section { border: 1px solid #e9ecef; border-radius: 8px; margin-bottom: 20px; overflow: hidden; }
    .assessments-container { padding: 25px; background-color: #f8f9fa; border-radius: 12px; min-height: 140px; border: 1px solid #e9ecef; }
    .course-header-left { background: linear-gradient(135deg, #ffffff 0%, #ffffff 70%, #f0f8f0 100%); color:#2e7d32; padding:25px 20px; font-weight:600; font-size:1.1rem; border-radius:12px; height:140px; width:100%; display:flex; flex-direction:column; justify-content:space-between; align-items:center; text-align:center; transition: all .3s ease; user-select:none; border: 2px solid #e8f5e8; }
    .course-header-left:hover { background: linear-gradient(135deg, #ffffff 0%, #ffffff 60%, #e8f5e8 100%); transform: translateY(-2px); box-shadow: 0 6px 20px rgba(46,125,50,.15); border-color:#c8e6c9; }
    .course-icon { font-size:1.5rem; color:#4caf50; margin-bottom:8px; }
    .course-name { font-size:1.1rem; font-weight:700; margin-bottom:4px; color:#2e7d32; line-height:1.2; }
    .course-code { font-size:.9rem; color:#4caf50; font-weight:500; font-family: monospace; }
    .course-header-left .course-details { display:flex; flex-direction:column; gap:6px; align-items:center; }
    .course-header-left .trimester-info { display:flex; align-items:center; gap:4px; }
    .course-header-left .trimester-info i { font-size:0.8rem; color:#4caf50; }
    .course-header-left .trimester-info .badge { font-size:0.75rem; padding:3px 8px; border-radius:12px; }
    .badge.bg-info { background-color: #17a2b8 !important; }
    .assessments-container.collapsed { max-height:0; padding:0 25px; opacity:0; overflow:hidden; transition: all .3s ease; }
    .course-header-left .course-icon .fa-chevron-down { transition: transform .3s ease; }
    .course-header-left .course-icon .fa-chevron-down.rotated { transform: rotate(-90deg); }
    @@media (max-width: 768px) { .course-assessment-section .row{flex-direction:column;} .course-header-left{height:auto; min-height:120px; padding:20px 15px;} .assessments-container{padding:20px 15px;} .assessment-table thead th, .assessment-row td{padding:12px 8px;} }
</style>
