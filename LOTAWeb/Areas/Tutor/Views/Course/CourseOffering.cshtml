@{
    ViewData["Title"] = "Course Configuration";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center">
            <h2 class="fw-bold text-dark mb-0">
                <i class="fas fa-cog text-warning me-2"></i>
                Course Configuration
            </h2>
        </div>
        <div class="d-flex gap-2">
            <a asp-area="Tutor" asp-controller="Course" asp-action="Index" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-2"></i>
                Back to Courses
            </a>
        </div>
    </div>

    <!-- Course Configuration Layout -->
    <div class="row">
        <!-- Left Sidebar - Course Information -->
        <div class="col-lg-4">
            <!-- Current Trimester Info -->
            <div class="card border-0 shadow-sm mb-3">
                <div class="card-header bg-white border-0 py-2">
                    <h6 class="card-title mb-0 fw-bold">
                        <i class="fas fa-calendar text-primary me-2"></i>
                        Current Trimester
                    </h6>
                </div>
                <div class="card-body py-2">
                    <div class="row">
                        <div class="col-6">
                            <h6 class="text-muted mb-1 small">Academic Year</h6>
                            <p class="mb-0 fw-bold" id="currentAcademicYear">-</p>
                        </div>
                        <div class="col-6">
                            <h6 class="text-muted mb-1 small">Trimester</h6>
                            <p class="mb-0 fw-bold" id="currentTrimesterNumber">-</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Course Information -->
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-info-circle text-primary me-2"></i>
                        Course Information
                    </h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <h6 class="text-muted mb-1">Course Name</h6>
                        <p class="mb-0 fw-bold" id="courseName">-</p>
                    </div>
                    <div class="mb-3">
                        <h6 class="text-muted mb-1">Course Code</h6>
                        <p class="mb-0" id="courseCode">-</p>
                    </div>
                    <div class="mb-3">
                        <h6 class="text-muted mb-1">Level</h6>
                        <p class="mb-0" id="courseLevel">-</p>
                    </div>
                    <div class="mb-3">
                        <h6 class="text-muted mb-1">Qualification</h6>
                        <p class="mb-0" id="qualificationName">-</p>
                    </div>
                    <div class="mb-3">
                        <h6 class="text-muted mb-1">Description</h6>
                        <p class="mb-0" id="courseDescription">-</p>
                    </div>
                    <div class="mb-3">
                        <h6 class="text-muted mb-2">Learning Outcomes</h6>
                        <div class="learning-outcomes-container" id="learningOutcomesContainer" style="max-height: 200px; overflow-y: auto;">
                            <div class="text-center py-3 text-muted">
                                <i class="fas fa-graduation-cap fa-lg mb-2"></i>
                                <p class="mb-0">Loading learning outcomes...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Side - Enrolled Students -->
        <div class="col-lg-8">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-0 py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0 fw-bold">
                            <i class="fas fa-users text-primary me-2"></i>
                            Enrolled Students
                            <span class="badge bg-primary ms-2" id="enrolledStudentsCount">0</span>
                        </h5>
                        <div class="d-flex gap-2">
                            <button class="btn btn-success btn-sm" id="addStudentsBtn" onclick="showAddStudentsModal()">
                                <i class="fas fa-user-plus me-1"></i>Add Students
                            </button>
                            <button class="btn btn-info btn-sm" id="uploadExcelBtn" onclick="showUploadExcelModal()">
                                <i class="fas fa-file-excel me-1"></i>Upload Excel
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div id="enrolledStudentsList">
                        <div class="text-center py-4">
                            <div class="text-muted">
                                <i class="fas fa-spinner fa-spin fa-2x mb-3"></i>
                                <p class="mb-0">Loading enrolled students...</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Pagination for Enrolled Students -->
                    <div id="enrolledStudentsPagination" class="d-flex justify-content-between align-items-center p-3 border-top" style="display: none;">
                        <div class="text-muted small" id="enrolledStudentsPaginationInfo">
                            <!-- Pagination info will be generated here -->
                        </div>
                        <nav aria-label="Enrolled students pagination">
                            <ul class="pagination pagination-sm mb-0" id="enrolledStudentsPaginationControls">
                                <!-- Pagination controls will be generated here -->
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Students to Course Modal -->
<div class="modal fade" id="addStudentToCourseModal" tabindex="-1" aria-labelledby="addStudentToCourseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addStudentToCourseModalLabel">
                    <i class="fas fa-user-plus text-success me-2"></i>
                    Add Students to Course
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addStudentsToCourseForm">
                <div class="modal-body">
                    <input type="hidden" id="modalCourseOfferingId" name="courseOfferingId">
                    <input type="hidden" id="modalCourseId" name="courseId">
                    <input type="hidden" id="modalTrimesterId" name="trimesterId">
                    
                     <!-- Trimester Info Display -->
                     <div class="row mb-3">
                         <div class="col-md-12">
                             <div class="alert alert-info">
                                 <i class="fas fa-info-circle me-2"></i>
                                 <strong>Selected Trimester:</strong> 
                                 <span id="modalTrimesterDisplay">Please select a trimester from the filter above first</span>
                             </div>
                         </div>
                     </div>
                    
                    <div class="mb-3">
                        <label for="studentSearch" class="form-label">Search Students</label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="studentSearch" placeholder="Search by name, email, or student ID..." oninput="searchStudents()">
                            <button type="button" class="btn btn-outline-secondary" onclick="searchStudents()">
                                <i class="fas fa-search"></i>
                            </button>
                            <button type="button" class="btn btn-outline-info" onclick="clearStudentSearch()">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Available Students</label>
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="text-muted small" id="selectedStudentsCount">0 student(s) selected</span>
                        </div>
                        <div id="availableStudentsList" class="border rounded p-3 student-search-results">
                            <div class="text-center py-4">
                                <i class="fas fa-search fa-2x text-muted mb-3"></i>
                                <p class="text-muted mb-0">Search for students to add to this course</p>
                                <small class="text-muted">Search by name, email, or student ID</small>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save me-2"></i>
                        Add Selected Students
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Upload Excel Modal -->
<div class="modal fade" id="uploadExcelModal" tabindex="-1" aria-labelledby="uploadExcelModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadExcelModalLabel">
                    <i class="fas fa-file-excel text-info me-2"></i>
                    Upload Students Excel
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="uploadExcelForm" enctype="multipart/form-data">
                <div class="modal-body">
                    <input type="hidden" id="excelCourseOfferingId" name="courseOfferingId">
                    <input type="hidden" id="excelCourseId" name="courseId">
                    <input type="hidden" id="excelTrimesterId" name="trimesterId">
                    
                     <!-- Trimester Info Display -->
                     <div class="row mb-3">
                         <div class="col-md-12">
                             <div class="alert alert-info">
                                 <i class="fas fa-info-circle me-2"></i>
                                 <strong>Selected Trimester:</strong> 
                                 <span id="excelTrimesterDisplay">Please select a trimester from the filter above first</span>
                             </div>
                         </div>
                     </div>
                    
                    <div class="mb-3">
                        <label for="excelFile" class="form-label">Excel File</label>
                        <input type="file" class="form-control" id="excelFile" accept=".xlsx,.xls,.csv" required>
                        <div class="form-text">
                            <strong>Required format:</strong> Excel file with columns: Student ID (A) and Email (B)
                        </div>
                    </div>
                    
                    <div class="alert alert-info">
                        <h6><i class="fas fa-info-circle me-2"></i>Instructions:</h6>
                        <ul class="mb-0">
                            <li>First column (A) should contain Student ID</li>
                            <li>Second column (B) should contain Email</li>
                            <li>Students will be verified by Student ID or Email</li>
                            <li>Only existing students can be added to the course</li>
                        </ul>
                    </div>
                    
                    <div class="mb-3">
                        <button type="button" class="btn btn-outline-primary" onclick="downloadStudentsTemplate()">
                            <i class="fas fa-download me-1"></i>
                            Download Template
                        </button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-info">
                        <i class="fas fa-upload me-2"></i>
                        Upload and Import
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Global variables for enrolled students pagination
    let allEnrolledStudents = [];
    let enrolledStudentsCurrentPage = 1;
    let enrolledStudentsTotalPages = 1;
    const ENROLLED_STUDENTS_PAGE_SIZE = 10;

    // Global variables for course data
    let courseOfferingId = null;
    let courseId = null;
    let courseData = null;
    let latestTrimester = null;
    let courseOffering = null;

    // Global variables for student management
    let selectedStudents = [];

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
        // Get courseId from URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const courseIdParam = urlParams.get('courseId');
        
        if (courseIdParam) {
            loadPageData(courseIdParam);
        } else {
            showNoCourseOfferingMessage();
        }
    });

    // Load all page data
    async function loadPageData(courseIdParam) {
        try {
            courseId = courseIdParam;
            
            // Load course offering data
            const offeringUrl = `/Tutor/Course/GetCourseOffering?courseId=${courseIdParam}`;
            const offeringResponse = await fetch(offeringUrl);
            const offeringData = await offeringResponse.json();
            
            if (offeringData.success && offeringData.data) {
                courseOffering = offeringData.data;
                courseOfferingId = courseOffering.id;
                
                // Load course details and trimester info separately
                await loadCourseAndTrimesterData(courseIdParam);
                
                // Update page display
                updatePageDisplay();
                
                // Load enrolled students
                loadEnrolledStudents();
            } else {
                showNoCourseOfferingMessage();
            }
        } catch (error) {
            console.error('Error loading page data:', error);
            showNoCourseOfferingMessage();
        }
    }

    // Load course details and trimester info separately
    async function loadCourseAndTrimesterData(courseIdParam) {
        try {
            // Load course data
            const courseResponse = await fetch(`/Tutor/Course/GetCourseById/${courseIdParam}`);
            const courseResult = await courseResponse.json();
            if (courseResult.success) {
                courseData = courseResult.data;
            }

            // Load latest trimester
            const trimesterResponse = await fetch('/Tutor/Trimester/GetLatestTrimester');
            const trimesterResult = await trimesterResponse.json();
            if (trimesterResult.success) {
                latestTrimester = trimesterResult.data;
            }
        } catch (error) {
            console.error('Error loading course and trimester data:', error);
        }
    }

    // Update page display with loaded data
    function updatePageDisplay() {
        // Update Current Trimester
        if (latestTrimester) {
            document.getElementById('currentAcademicYear').textContent = latestTrimester.academicYear || '-';
            document.getElementById('currentTrimesterNumber').textContent = latestTrimester.trimesterNumber || '-';
        }

        // Update Course Information
        if (courseData) {
            document.getElementById('courseName').textContent = courseData.courseName || '-';
            document.getElementById('courseCode').textContent = courseData.courseCode || '-';
            document.getElementById('courseLevel').textContent = courseData.level || '-';
            document.getElementById('qualificationName').textContent = courseData.qualificationName || '-';
            document.getElementById('courseDescription').textContent = courseData.description || 'No description available';
            
            // Update Learning Outcomes
            updateLearningOutcomesDisplay();
        }
    }

    // Update Learning Outcomes display
    function updateLearningOutcomesDisplay() {
        const container = document.getElementById('learningOutcomesContainer');
        
        if (courseData && courseData.learningOutcomes && courseData.learningOutcomes.length > 0) {
            let html = '';
            courseData.learningOutcomes.forEach(lo => {
                html += `
                    <div class="mb-2 p-2 border rounded bg-light">
                        <h6 class="mb-1 fw-semibold text-primary">${lo.loName || lo.LOName}</h6>
                        <p class="mb-0 small text-muted">${lo.description || lo.Description || 'No description available'}</p>
                    </div>
                `;
            });
            container.innerHTML = html;
        } else {
            container.innerHTML = `
                <div class="text-center py-2">
                    <i class="fas fa-target text-muted mb-1"></i>
                        <p class="mb-0 small text-muted">No learning outcomes defined for this course</p>
                </div>
            `;
        }
    }

    // Show message when no course offering is available
    function showNoCourseOfferingMessage() {
        const container = document.getElementById('enrolledStudentsList');
        const countElement = document.getElementById('enrolledStudentsCount');
        
        container.innerHTML = `
            <div class="text-center py-4">
                <i class="fas fa-exclamation-triangle fa-2x text-warning mb-3"></i>
                <p class="text-muted mb-0">No course offering available</p>
                <small class="text-muted">This course is not offered in the current trimester</small>
            </div>
        `;
        countElement.textContent = '0';
    }

    // Load enrolled students for this course offering
    async function loadEnrolledStudents() {
        const container = document.getElementById('enrolledStudentsList');
        const countElement = document.getElementById('enrolledStudentsCount');
        
        // Show loading state
        container.innerHTML = `
            <div class="text-center py-4">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="text-muted mb-0">Loading enrolled students...</p>
            </div>
        `;
        
        try {
            const trimesterId = latestTrimester ? latestTrimester.id : null;
            const response = await fetch(`/Tutor/Course/GetEnrolledStudents?courseOfferingId=${courseOfferingId}&trimesterId=${trimesterId}`);
            const data = await response.json();
            
            if (data.success) {
                const students = data.data;
                
                if (students && students.length > 0) {
                    // Store all enrolled students for pagination
                    allEnrolledStudents = students;
                    enrolledStudentsCurrentPage = 1; // Reset to first page
                    
                    // Display enrolled students with pagination
                    displayEnrolledStudentsPage(students);
                    countElement.textContent = students.length;
                } else {
                    allEnrolledStudents = [];
                    enrolledStudentsCurrentPage = 1;
                    enrolledStudentsTotalPages = 1;
                    container.innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-user-graduate fa-2x text-muted mb-3"></i>
                            <p class="text-muted mb-0">No students enrolled for this course</p>
                            <small class="text-muted">Students will appear here once they are enrolled</small>
                        </div>
                    `;
                    countElement.textContent = '0';
                    document.getElementById('enrolledStudentsPagination').style.display = 'none';
                }
            } else {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-exclamation-triangle fa-2x text-warning mb-3"></i>
                        <p class="text-muted mb-0">Error loading enrolled students</p>
                        <small class="text-danger">${data.message}</small>
                    </div>
                `;
                countElement.textContent = '0';
            }
        } catch (error) {
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-exclamation-triangle fa-2x text-warning mb-3"></i>
                    <p class="text-muted mb-0">Error loading enrolled students</p>
                    <small class="text-danger">${error.message}</small>
                </div>
            `;
            countElement.textContent = '0';
        }
    }

    // Display enrolled students in the list with pagination
    function displayEnrolledStudentsPage(students) {
        const container = document.getElementById('enrolledStudentsList');
        const paginationContainer = document.getElementById('enrolledStudentsPagination');
        
        // Calculate pagination
        enrolledStudentsTotalPages = Math.ceil(allEnrolledStudents.length / ENROLLED_STUDENTS_PAGE_SIZE);
        const startIndex = (enrolledStudentsCurrentPage - 1) * ENROLLED_STUDENTS_PAGE_SIZE;
        const endIndex = Math.min(startIndex + ENROLLED_STUDENTS_PAGE_SIZE, allEnrolledStudents.length);
        const pageStudents = allEnrolledStudents.slice(startIndex, endIndex);
        
        if (pageStudents.length > 0) {
            // Generate student list HTML
            let studentsHtml = '';
            pageStudents.forEach(student => {
                studentsHtml += `
                    <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                    <i class="fas fa-user"></i>
                                </div>
                            </div>
                            <div>
                                <h6 class="mb-1 fw-semibold">${student.firstName || student.FirstName || ''} ${student.lastName || student.LastName || ''}</h6>
                                <p class="mb-1 text-muted small">
                                    <i class="fas fa-id-card me-1"></i>
                                    Student ID: ${student.studentNo || student.StudentNo || student.studentId || student.StudentId || 'N/A'}
                                </p>
                                <p class="mb-0 text-muted small">
                                    <i class="fas fa-envelope me-1"></i>
                                    ${student.email || student.Email || 'No email available'}
                                </p>
                            </div>
                        </div>
                        <div class="d-flex align-items-center gap-2">
                            <span class="badge bg-success">Enrolled</span>
                            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeStudentFromCourse('${student.id || student.Id}')" title="Remove from course">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = `
                <div class="list-group list-group-flush">
                    ${studentsHtml}
                </div>
            `;
            
            // Show pagination if needed
            if (enrolledStudentsTotalPages > 1) {
                generateEnrolledStudentsPagination();
                paginationContainer.style.display = 'flex';
            } else {
                paginationContainer.style.display = 'none';
            }
        } else {
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-user-graduate fa-2x text-muted mb-3"></i>
                    <p class="text-muted mb-0">No students found on this page</p>
                </div>
            `;
            paginationContainer.style.display = 'none';
        }
    }

    // Generate pagination controls for enrolled students
    function generateEnrolledStudentsPagination() {
        const paginationInfo = document.getElementById('enrolledStudentsPaginationInfo');
        const paginationControls = document.getElementById('enrolledStudentsPaginationControls');
        
        const startIndex = (enrolledStudentsCurrentPage - 1) * ENROLLED_STUDENTS_PAGE_SIZE + 1;
        const endIndex = Math.min(enrolledStudentsCurrentPage * ENROLLED_STUDENTS_PAGE_SIZE, allEnrolledStudents.length);
        
        paginationInfo.textContent = `Showing ${startIndex}-${endIndex} of ${allEnrolledStudents.length} students`;
        
        // Generate pagination buttons
        let paginationHtml = '';
        
        // Previous button
        if (enrolledStudentsCurrentPage > 1) {
            paginationHtml += `
                <li class="page-item">
                    <a class="page-link" href="#" onclick="changeEnrolledStudentsPage(${enrolledStudentsCurrentPage - 1})">Previous</a>
                </li>
            `;
        }
        
        // Page numbers
        const maxVisiblePages = 5;
        let startPage = Math.max(1, enrolledStudentsCurrentPage - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(enrolledStudentsTotalPages, startPage + maxVisiblePages - 1);
        
        if (endPage - startPage + 1 < maxVisiblePages) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }
        
        for (let i = startPage; i <= endPage; i++) {
            paginationHtml += `
                <li class="page-item ${i === enrolledStudentsCurrentPage ? 'active' : ''}">
                    <a class="page-link" href="#" onclick="changeEnrolledStudentsPage(${i})">${i}</a>
                </li>
            `;
        }
        
        // Next button
        if (enrolledStudentsCurrentPage < enrolledStudentsTotalPages) {
            paginationHtml += `
                <li class="page-item">
                    <a class="page-link" href="#" onclick="changeEnrolledStudentsPage(${enrolledStudentsCurrentPage + 1})">Next</a>
                </li>
            `;
        }
        
        paginationControls.innerHTML = paginationHtml;
    }

    // Change page for enrolled students
    function changeEnrolledStudentsPage(page) {
        if (page >= 1 && page <= enrolledStudentsTotalPages) {
            enrolledStudentsCurrentPage = page;
            displayEnrolledStudentsPage(allEnrolledStudents);
        }
    }

    // Refresh enrolled students
    function refreshEnrolledStudents() {
        if (courseOfferingId) {
            loadEnrolledStudents();
        }
    }

    // Show Add Students Modal
    function showAddStudentsModal() {
        if (!courseOfferingId || !latestTrimester) {
            showError('Course offering or trimester information not available');
            return;
        }

        // Set modal values
        document.getElementById('modalCourseOfferingId').value = courseOfferingId;
        document.getElementById('modalCourseId').value = courseId;
        document.getElementById('modalTrimesterId').value = latestTrimester.id;
        
        // Update trimester display
        document.getElementById('modalTrimesterDisplay').textContent = `${latestTrimester.academicYear} - Trimester ${latestTrimester.trimesterNumber}`;
        
        // Reset selected students count
        updateSelectedStudentsCount();
        
        // Clear search and reset display
        document.getElementById('studentSearch').value = '';
        document.getElementById('availableStudentsList').innerHTML = `
            <div class="text-center py-4">
                <i class="fas fa-search fa-2x text-muted mb-3"></i>
                <p class="text-muted mb-0">Search for students to add to this course</p>
                <small class="text-muted">Search by name, email, or student ID</small>
            </div>
        `;
        
        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('addStudentToCourseModal'));
        modal.show();
    }

    // Show Upload Excel Modal
    function showUploadExcelModal() {
        if (!courseOfferingId || !latestTrimester) {
            showError('Course offering or trimester information not available');
            return;
        }

        // Set modal values
        document.getElementById('excelCourseOfferingId').value = courseOfferingId;
        document.getElementById('excelCourseId').value = courseId;
        document.getElementById('excelTrimesterId').value = latestTrimester.id;
        
        // Update trimester display
        document.getElementById('excelTrimesterDisplay').textContent = `${latestTrimester.academicYear} - Trimester ${latestTrimester.trimesterNumber}`;
        
        // Reset form
        document.getElementById('uploadExcelForm').reset();
        document.getElementById('excelFile').value = '';
        
        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('uploadExcelModal'));
        modal.show();
    }

    // Add Selected Students (form submit handler)
    document.getElementById('addStudentsToCourseForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Get selected student IDs from checkboxes
        const selectedCheckboxes = document.querySelectorAll('#availableStudentsList input[type="checkbox"]:checked');
        const selectedStudentIds = Array.from(selectedCheckboxes).map(checkbox => checkbox.value);
        
        if (selectedStudentIds.length === 0) {
            showError('Please select at least one student to add');
            return;
        }

        const submitBtn = document.querySelector('#addStudentsToCourseForm .btn-success');
        const originalText = submitBtn.innerHTML;
        
        try {
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Adding...';

            const requestData = {
                CourseOfferingId: courseOfferingId,
                StudentIds: selectedStudentIds,
                TrimesterId: latestTrimester ? latestTrimester.id : null
            };

            const response = await fetch('/Tutor/Course/AddStudentsToCourseOffering', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(requestData)
            });

            const data = await response.json();

            if (data.success) {
                showSuccess('Students added to course successfully!');
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addStudentToCourseModal'));
                modal.hide();
                
                // Refresh enrolled students list
                loadEnrolledStudents();
            } else {
                showError('Error: ' + data.message);
            }
        } catch (error) {
            showError('An error occurred while adding students to the course.');
        } finally {
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalText;
        }
    });

    // Upload Students Excel
    // Upload Excel Form Submit Handler
    document.getElementById('uploadExcelForm').addEventListener('submit', function(e) {
        e.preventDefault();
        uploadStudentsExcel();
    });

    // Upload Students Excel
    async function uploadStudentsExcel() {
        const courseOfferingId = document.getElementById('excelCourseOfferingId').value;
        const selectedTrimesterId = document.getElementById('excelTrimesterId').value;
        const fileInput = document.getElementById('excelFile');

        if (!selectedTrimesterId) {
            showInfo('Please wait for the trimester information to load before proceeding.');
            return;
        }

        if (!fileInput.files || fileInput.files.length === 0) {
            showError('Please select a file to upload.');
            return;
        }

        // Validate file type
        const file = fileInput.files[0];
        const allowedTypes = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel', 'text/csv'];
        if (!allowedTypes.includes(file.type)) {
            showError('Please select a valid Excel or CSV file.');
            return;
        }

        // Validate file size (max 5MB)
        if (file.size > 5 * 1024 * 1024) {
            showError('File size must be less than 5MB.');
            return;
        }

        // Show loading state
        const submitBtn = document.querySelector('#uploadExcelForm button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Uploading...';

        const formData = new FormData();
        formData.append('file', fileInput.files[0]);
        formData.append('courseOfferingId', courseOfferingId);
        if (selectedTrimesterId) {
            formData.append('trimesterId', selectedTrimesterId);
        }

        try {
            const response = await fetch('/Tutor/Course/UploadStudentsExcelToCourseOffering', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();

            if (data.success) {
                const successMessage = data.message;
                const resultData = data.data;
                
                if (resultData && resultData.errors && resultData.errors.length > 0) {
                    // Show success with warnings about errors
                    Swal.fire({
                        title: 'Import Completed with Warnings',
                        html: `
                            <div class="text-start">
                                <p class="text-success"><i class="fas fa-check-circle me-2"></i>${successMessage}</p>
                                <div class="mt-3">
                                    <h6 class="text-warning"><i class="fas fa-exclamation-triangle me-2"></i>Errors Found:</h6>
                                    <div class="text-start" style="max-height: 200px; overflow-y: auto;">
                                        ${resultData.errors.map(error => `<div class="text-danger small mb-2"></i>${error}</div>`).join('')}
                                    </div>
                                </div>
                            </div>
                        `,
                        icon: 'warning',
                        confirmButtonColor: '#ffc107'
                    });
                } else {
                    showSuccess(successMessage);
                }
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('uploadExcelModal'));
                modal.hide();
                
                // Reset form
                document.getElementById('uploadExcelForm').reset();
                document.getElementById('excelFile').value = '';
                
                // Refresh enrolled students list
                loadEnrolledStudents();
            } else {
                showError('Error: ' + data.message);
            }
        } catch (error) {
            showError('An error occurred while uploading the Excel file.');
        } finally {
            // Reset button state
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalText;
        }
    }

    // Search Students
    async function searchStudents() {
        const searchTerm = document.getElementById('studentSearch').value.trim();
        const container = document.getElementById('availableStudentsList');

        if (!searchTerm) {
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-search fa-2x text-muted mb-3"></i>
                    <p class="text-muted mb-0">Enter a search term to find students</p>
                </div>
            `;
            return;
        }

        // Show typing indicator for better UX
        if (searchTerm.length < 3) {
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-keyboard fa-2x text-muted mb-3"></i>
                    <p class="text-muted mb-0">Type at least 3 characters to search</p>
                </div>
            `;
            return;
        }

        // Show loading state
        container.innerHTML = `
            <div class="text-center py-4">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Searching...</span>
                </div>
                <p class="text-muted mb-0">Searching for students...</p>
            </div>
        `;

        try {
            // Call the backend API to search students
            const response = await fetch(`/Tutor/Student/SearchStudents?searchTerm=${encodeURIComponent(searchTerm)}`);
            const data = await response.json();

            if (data.success && data.data && data.data.length > 0) {
                // Display search results using Admin's format
                container.innerHTML = `
                    <div class="mb-3">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="text-muted small">Found ${data.data.length} student(s)</span>
                            <div>
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="selectAllStudents()">
                                    <i class="fas fa-check-double me-1"></i>Select All
                                </button>
                                <button type="button" class="btn btn-outline-secondary btn-sm ms-1" onclick="deselectAllStudents()">
                                    <i class="fas fa-times me-1"></i>Deselect All
                                </button>
                            </div>
                        </div>
                    </div>
                    ${data.data.map(student => `
                        <div class="form-check mb-3 p-3 border rounded student-card">
                            <input class="form-check-input" type="checkbox" value="${student.id || student.Id}" id="student_${student.id || student.Id}" onchange="updateSelectedStudentsCount()">
                            <label class="form-check-label w-100" for="student_${student.id || student.Id}">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <div class="fw-semibold text-dark fs-5">${student.firstName || student.FirstName || ''} ${student.lastName || student.LastName || ''}</div>
                                        <div class="text-muted fs-6">
                                            <i class="fas fa-id-card me-1"></i>${student.studentNo || student.StudentNo || student.studentId || student.StudentId || 'N/A'}
                                        </div>
                                        <div class="text-muted fs-6">
                                            <i class="fas fa-envelope me-1"></i>${student.email || student.Email || 'N/A'}
                                        </div>
                                    </div>
                                    <div class="ms-2">
                                        <span class="badge bg-success">Active</span>
                                    </div>
                                </div>
                            </label>
                        </div>
                    `).join('')}
                `;
            } else {
                // No students found
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-user-slash fa-2x text-muted mb-3"></i>
                        <p class="text-muted mb-0">No students found matching "${searchTerm}"</p>
                        <small class="text-muted">Try a different search term</small>
                    </div>
                `;
            }
        } catch (error) {
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-exclamation-triangle fa-2x text-warning mb-3"></i>
                    <p class="text-muted mb-0">Error searching students</p>
                    <small class="text-danger">${error.message}</small>
                </div>
            `;
        }
    }

    // Clear Student Search
    function clearStudentSearch() {
        document.getElementById('studentSearch').value = '';
        searchStudents();
    }

    // Select all students
    function selectAllStudents() {
        const checkboxes = document.querySelectorAll('#availableStudentsList input[type="checkbox"]');
        checkboxes.forEach(checkbox => {
            checkbox.checked = true;
        });
        updateSelectedStudentsCount();
    }
    
    // Deselect all students
    function deselectAllStudents() {
        const checkboxes = document.querySelectorAll('#availableStudentsList input[type="checkbox"]');
        checkboxes.forEach(checkbox => {
            checkbox.checked = false;
        });
        updateSelectedStudentsCount();
    }
    
    // Update Selected Students Count (Admin style)
    function updateSelectedStudentsCount() {
        const selectedCount = document.querySelectorAll('#availableStudentsList input[type="checkbox"]:checked').length;
        const countElement = document.getElementById('selectedStudentsCount');
        if (countElement) {
            countElement.textContent = `${selectedCount} student(s) selected`;
        }
    }

    // Update Selected Students Display
    function updateSelectedStudentsDisplay() {
        const container = document.getElementById('selectedStudentsList');
        
        if (selectedStudents.length === 0) {
            container.innerHTML = `
                <div class="text-center py-3 text-muted">
                    <i class="fas fa-users fa-lg mb-2"></i>
                    <p class="mb-0">No students selected</p>
                </div>
            `;
        } else {
            let html = '';
            selectedStudents.forEach(student => {
                html += `
                    <div class="d-flex justify-content-between align-items-center p-2 border rounded mb-2 bg-white">
                        <div>
                            <div class="fw-semibold">${student.firstName} ${student.lastName}</div>
                            <small class="text-muted">${student.email}</small>
                        </div>
                        <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeSelectedStudent('${student.id}')">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
            });
            container.innerHTML = html;
        }
    }

    // Remove Selected Student
    function removeSelectedStudent(studentId) {
        selectedStudents = selectedStudents.filter(s => s.id !== studentId);
        updateSelectedStudentsDisplay();
    }

    // Download Students Template
    function downloadStudentsTemplate() {
        try {
            // Create a temporary link element
            const link = document.createElement('a');
            link.href = '/Tutor/Course/DownloadStudentsTemplate';
            link.download = 'StudentsUploadTemplate.xlsx';
            
            // Append to body, click, and remove
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
        } catch (error) {
            showError('Failed to download template. Please try again.');
        }
    }

    // Remove Student from Course
    async function removeStudentFromCourse(studentId) {
        if (!courseOfferingId || !latestTrimester) {
            showError('Course offering or trimester information not available');
            return;
        }

        // Get student name for better confirmation (Admin style)
        const studentElement = document.querySelector(`[onclick="removeStudentFromCourse('${studentId}')"]`).closest('.list-group-item');
        const studentName = studentElement ? studentElement.querySelector('.fw-semibold').textContent.trim() : 'this student';

        showConfirm(
            `Are you sure you want to remove ${studentName} from the course?`,
            async () => {
                try {
                    const requestData = {
                        StudentId: studentId,
                        CourseOfferingId: courseOfferingId
                    };

                    const response = await fetch('/Tutor/Course/RemoveStudentFromCourseOffering', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(requestData)
                    });

                    const data = await response.json();

                    if (data.success) {
                        showSuccess('Student removed from course successfully!');
                        // Refresh enrolled students list
                        loadEnrolledStudents();
                    } else {
                        showError('Error: ' + data.message);
                    }
                } catch (error) {
                    showError('An error occurred while removing the student from the course.');
                }
            }
        );
    }
</script>

<style>
    /* Custom styles for the course configuration page */
    
    /* Student Search Results */
    .student-search-results {
        min-height: 200px;
        max-height: 400px;
        overflow-y: auto;
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
    }
    
    .student-search-results .list-group-item {
        border: none;
        border-bottom: 1px solid #e9ecef;
        padding: 12px 16px;
        transition: all 0.2s ease;
    }
    
    .student-search-results .list-group-item:last-child {
        border-bottom: none;
    }
    
    .student-search-results .list-group-item:hover {
        background-color: #e9ecef;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .student-search-results .btn-check:checked + .btn {
        background-color: #198754;
        border-color: #198754;
        color: white;
    }
    
    /* Modal styles */
    .modal-dialog {
        max-width: 800px;
    }
    
    .modal-body {
        padding: 1.5rem;
    }
    
    .modal-footer {
        border-top: 1px solid #dee2e6;
        padding: 1rem 1.5rem;
    }
    
    /* Form controls */
    .form-control:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    .input-group .btn {
        border-color: #ced4da;
    }
    
    .input-group .btn:hover {
        background-color: #e9ecef;
        border-color: #adb5bd;
    }
    
    /* Alert styles */
    .alert-info {
        background-color: #d1ecf1;
        border-color: #bee5eb;
        color: #0c5460;
    }
    
    /* Student card styles */
    .student-card {
        transition: all 0.2s ease;
        background-color: #fff;
    }
    
    .student-card:hover {
        background-color: #f8f9fa;
        border-color: #dee2e6;
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .form-check-input:checked {
        background-color: #198754;
        border-color: #198754;
    }
    
    .form-check-input:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    .list-group-item {
        border-left: none;
        border-right: none;
        border-radius: 0;
    }
    
    .list-group-item:first-child {
        border-top: none;
    }
    
    .list-group-item:last-child {
        border-bottom: none;
    }
    
    .list-group-item:hover {
        background-color: #f8f9fa;
    }
    
    .card {
        border-radius: 10px;
    }
    
    .card-header {
        border-radius: 10px 10px 0 0 !important;
    }
    
    .badge {
        font-size: 0.75rem;
    }
    
    .text-muted {
        color: #6c757d !important;
    }
    
    .spinner-border {
        width: 2rem;
        height: 2rem;
    }
    
    /* Learning Outcomes specific styles */
    .learning-outcomes-container {
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 8px;
        background-color: #f8f9fa;
    }
    
    .learning-outcomes-container .border {
        border-color: #dee2e6 !important;
        transition: all 0.2s ease;
    }
    
    .learning-outcomes-container .border:hover {
        border-color: #007bff !important;
        background-color: #ffffff !important;
        box-shadow: 0 2px 4px rgba(0,123,255,0.1);
    }
    
    .learning-outcomes-container h6 {
        font-size: 0.875rem;
        line-height: 1.2;
    }
    
    .learning-outcomes-container p {
        font-size: 0.75rem;
        line-height: 1.3;
    }
</style>
