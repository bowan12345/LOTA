@model IEnumerable<LOTA.Model.DTO.Admin.CourseReturnDTO>
@{
    ViewData["Title"] = "My Courses";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Html.AntiForgeryToken()

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold text-dark mb-0">My Courses</h2>
    </div>

    <!-- Course List Card -->
    <div class="card border-0 shadow-sm">
        <div class="card-header bg-white border-0 py-3">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-graduation-cap text-primary me-2"></i>
                        Course List
                        @if (Model != null && Model.Any())
                        {
                            <span class="badge bg-primary ms-2">@Model.Count()</span>
                        }
                    </h5>
                </div>
            </div>
        </div>
        
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0 responsive-table">
                    <thead class="table-light">
                        <tr>
                            <th class="border-0 text-nowrap">Course Name</th>
                            <th class="border-0 text-nowrap">Course Code</th>
                            <th class="border-0 text-nowrap d-none d-md-table-cell">Level</th>
                            <th class="border-0 text-nowrap d-none d-lg-table-cell">Qualification</th>
                            <th class="border-0 text-nowrap d-none d-xl-table-cell">Description</th>
                            <th class="border-0 text-nowrap d-none d-xxl-table-cell">Learning Outcomes</th>
                            <th class="border-0 text-nowrap">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="courseTableBody">
                        @if (Model != null && Model.Any())
                        {
                            foreach (var course in Model)
                            {
                                <tr class="course-row" data-course-id="@course.Id">
                                    <td class="text-nowrap">@(course.CourseName ?? "N/A")</td>
                                    <td class="text-nowrap">@(course.CourseCode ?? "N/A")</td>
                                    <td class="text-nowrap d-none d-md-table-cell">
                                        <span class="badge bg-info">@(course.Level == 0 ? "N/A" : course.Level.ToString())</span>
                                    </td>
                                    <td class="text-nowrap d-none d-lg-table-cell">
                                        @if (!string.IsNullOrEmpty(course.QualificationName))
                                        {
                                            <div>
                                                <div class="fw-semibold">@course.QualificationName</div>
                                                @if (!string.IsNullOrEmpty(course.QualificationType))
                                                {
                                                    <small class="text-muted">@course.QualificationType</small>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">No qualification</span>
                                        }
                                    </td>
                                    <td class="text-nowrap d-none d-xl-table-cell">
                                        @if (!string.IsNullOrEmpty(course.Description))
                                        {
                                            <span title="@course.Description">
                                                @(course.Description.Length > 50 ? course.Description.Substring(0, 50) + "..." : course.Description)
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">No description</span>
                                        }
                                    </td>
                                    <td class="d-none d-xxl-table-cell">
                                        @if (course.LearningOutcomes != null && course.LearningOutcomes.Any())
                                        {
                                            <span title="@string.Join(", ", course.LearningOutcomes.OrderBy(lo => lo.LOName).Select(lo => lo.LOName))">
                                                @{
                                                    var loNames = string.Join(", ", course.LearningOutcomes.OrderBy(lo => lo.LOName).Select(lo => lo.LOName));
                                                    var displayText = loNames.Length > 60 ? loNames.Substring(0, 60) + "..." : loNames;
                                                }
                                                @displayText
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">No learning outcomes</span>
                                        }
                                    </td>

                                    <td class="text-nowrap">
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-primary btn-sm" title="View Details" onclick="viewCourseDetails('@course.Id')">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button class="btn btn-success btn-sm" title="Edit" onclick="editCourse('@course.Id')">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center py-4">
                                    <div class="text-muted">
                                        <i class="fas fa-graduation-cap fa-2x mb-3"></i>
                                        <p class="mb-0">No courses assigned to you yet</p>
                                        <small>Contact your administrator to get assigned to courses</small>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Edit Course Modal -->
<div class="modal fade" id="editCourseModal" tabindex="-1" aria-labelledby="editCourseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="editCourseModalLabel">
                    <i class="fas fa-edit me-2"></i>
                    Edit Course
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editCourseForm">
                    <input type="hidden" id="editCourseId" name="courseId">
                    <div class="row g-3">
                        <!-- Read-only course information -->
                        <div class="col-12">
                            <h6 class="text-muted mb-3">Course Information (Read Only)</h6>
                            <div class="row g-3">
                                <div class="col-12 col-md-6">
                                    <label class="form-label">Course Name</label>
                                    <input type="text" class="form-control" id="editCourseName" readonly style="background-color: #f8f9fa;">
                                </div>
                                <div class="col-12 col-md-6">
                                    <label class="form-label">Course Code</label>
                                    <input type="text" class="form-control" id="editCourseCode" readonly style="background-color: #f8f9fa;">
                                </div>
                                <div class="col-12 col-md-6">
                                    <label class="form-label">Level</label>
                                    <input type="text" class="form-control" id="editLevel" readonly style="background-color: #f8f9fa;">
                                </div>
                                <div class="col-12 col-md-6">
                                    <label class="form-label">Qualification</label>
                                    <input type="text" class="form-control" id="editQualification" readonly style="background-color: #f8f9fa;">
                                </div>
                            </div>
                        </div>

                        <!-- Editable fields -->
                        <div class="col-12">
                            <h6 class="text-muted mb-3">Editable Fields</h6>
                            <div class="mb-3">
                                <label for="editDescription" class="form-label">Description</label>
                                <textarea class="form-control" id="editDescription" name="Description" rows="3" placeholder="Enter course description..."></textarea>
                            </div>
                        </div>

                        <div class="col-12">
                            <label class="form-label">Learning Outcomes</label>
                            <div id="editLearningOutcomesContainer">
                                <!-- Learning outcomes will be added here dynamically -->
                            </div>
                            <button type="button" class="btn btn-success btn-sm mt-2" onclick="addEditLearningOutcome()">
                                <i class="fas fa-plus me-2"></i>
                                Add Learning Outcome
                            </button>
                        </div>
                    </div>
                </form>
                <div class="row g-3">
                    <div class="col-12">
                        <div class="d-flex justify-content-end gap-2 mt-4">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" onclick="updateCourse()">
                                <i class="fas fa-save me-2"></i>
                                Update
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let editLoCounter = 0;

    // View Course Details
    function viewCourseDetails(courseId) {
        window.location.href = `/Tutor/Course/Details/${courseId}`;
    }

    // Edit Course
    function editCourse(courseId) {
        // Show loading state
        const editModal = new bootstrap.Modal(document.getElementById('editCourseModal'));
        editModal.show();
        
        // Load course data from backend
        fetch(`/Tutor/Course/GetCourseById/${courseId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.data) {
                    const course = data.data;
                    
                    // Populate form fields - support both camelCase and PascalCase
                    document.getElementById('editCourseId').value = course.id || course.Id || '';
                    document.getElementById('editCourseName').value = course.courseName || course.CourseName || '';
                    document.getElementById('editCourseCode').value = course.courseCode || course.CourseCode || '';
                    const level = course.level || course.Level || 0;
                    document.getElementById('editLevel').value = level > 0 ? `${level}` : 'N/A';
                    document.getElementById('editQualification').value = course.qualificationName || course.QualificationName || 'No qualification';
                    document.getElementById('editDescription').value = course.description || course.Description || '';
                    
                    // Load learning outcomes
                    clearEditLearningOutcomes();
                    const learningOutcomes = course.learningOutcomes || course.LearningOutcomes || [];
                    if (learningOutcomes && learningOutcomes.length > 0) {
                        // Sort learning outcomes by name
                        const sortedLOs = learningOutcomes.sort((a, b) => {
                            const nameA = (a.loName || a.LOName || '').toLowerCase();
                            const nameB = (b.loName || b.LOName || '').toLowerCase();
                            return nameA.localeCompare(nameB);
                        });
                        
                        sortedLOs.forEach(lo => {
                            addEditLearningOutcome();
                            const tbody = document.querySelector('#editLearningOutcomesContainer .lo-table tbody');
                            const lastRow = tbody.lastElementChild;
                            if (lastRow) {
                                const idInput = lastRow.querySelector('input[name^="editLoId_"]');
                                const nameInput = lastRow.querySelector('input[name^="editLoName_"]');
                                const descriptionInput = lastRow.querySelector('input[name^="editLoDescription_"]');
                                if (idInput && nameInput && descriptionInput) {
                                    idInput.value = lo.id || lo.Id || '';
                                    nameInput.value = lo.loName || lo.LOName || '';
                                    descriptionInput.value = lo.description || lo.Description || '';
                                }
                            }
                        });
                    }
                } else {
                    showError('Error loading course data: ' + (data.message || 'Unknown error'));
                    editModal.hide();
                }
            })
            .catch(error => {
                showError('An error occurred while loading course data. Please try again.');
                editModal.hide();
            });
    }

    // Add Learning Outcome Row
    function addEditLearningOutcome() {
        editLoCounter++;
        const container = document.getElementById('editLearningOutcomesContainer');
        
        // Create table if it doesn't exist
        if (!container.querySelector('.lo-table')) {
            const table = document.createElement('table');
            table.className = 'lo-table';
            table.innerHTML = `
                <thead>
                    <tr>
                        <th style="width: 30%;">LO Name</th>
                        <th style="width: 60%;">Description</th>
                        <th style="width: 10%;">Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            `;
            container.appendChild(table);
        }
        
        const tbody = container.querySelector('.lo-table tbody');
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>
                <input type="hidden" name="editLoId_${editLoCounter}" value="">
                <input type="text" class="form-control" name="editLoName_${editLoCounter}" placeholder="LO Name (e.g., LO1)" required>
            </td>
            <td>
                <input type="text" class="form-control" name="editLoDescription_${editLoCounter}" placeholder="LO Description" required>
            </td>
            <td>
                <button type="button" class="btn btn-danger btn-sm" onclick="removeEditLearningOutcome(this)">
                    <i class="fas fa-trash"></i>
                </button>
            </td>
        `;
        tbody.appendChild(row);
    }

    // Remove Learning Outcome Row
    function removeEditLearningOutcome(button) {
        button.closest('tr').remove();
    }

    // Clear Learning Outcomes
    function clearEditLearningOutcomes() {
        const container = document.getElementById('editLearningOutcomesContainer');
        container.innerHTML = '';
        editLoCounter = 0;
    }

    // Get Learning Outcomes Data for Edit Form
    function getEditLearningOutcomesData(containerId) {
        const container = document.getElementById(containerId);
        const table = container.querySelector('.lo-table');
        if (!table) return [];
        
        const rows = table.querySelectorAll('tbody tr');
        const learningOutcomes = [];
        
        rows.forEach(row => {
            const nameInput = row.querySelector('input[name^="editLoName_"]');
            const descriptionInput = row.querySelector('input[name^="editLoDescription_"]');
            const idInput = row.querySelector('input[name^="editLoId_"]');
            
            if (nameInput && descriptionInput && nameInput.value.trim() && descriptionInput.value.trim()) {
                learningOutcomes.push({
                    id: idInput ? idInput.value.trim() : '',
                    name: nameInput.value.trim(),
                    description: descriptionInput.value.trim()
                });
            }
        });
        
        return learningOutcomes;
    }

    // Update course data in the current view without refreshing
    function updateCourseInView(courseId, updatedData) {
        // Find the course row in the current view
        const courseRow = document.querySelector(`.course-row[data-course-id="${courseId}"]`);
        if (!courseRow) {
            return;
        }
        
        // Update description
        const description = updatedData.Description || updatedData.description;
        if (description) {
            const descriptionCell = courseRow.cells[4]; // Description is in column 5 (0-indexed)
            if (descriptionCell) {
                if (description.length > 50) {
                    descriptionCell.innerHTML = `<span title="${description}">${description.substring(0, 50)}...</span>`;
                } else {
                    descriptionCell.textContent = description;
                }
            }
        }
        
        // Update learning outcomes
        const learningOutcomes = updatedData.LearningOutcomes || updatedData.learningOutcomes;
        if (learningOutcomes && learningOutcomes.length > 0) {
            const loCell = courseRow.cells[5]; // Learning Outcomes is in column 6 (0-indexed)
            if (loCell) {
                const loNamesText = learningOutcomes.map(lo => lo.LOName || lo.loName).join(', ');
                if (loNamesText.length > 60) {
                    loCell.innerHTML = `<span title="${loNamesText}">${loNamesText.substring(0, 60)}...</span>`;
                } else {
                    loCell.textContent = loNamesText;
                }
            }
        }
        
        // Show a subtle highlight effect
        courseRow.style.backgroundColor = '#d4edda';
        setTimeout(() => {
            courseRow.style.backgroundColor = '';
        }, 2000);
    }

    // Update Course
    function updateCourse() {
        // Get form data
        const courseId = document.getElementById('editCourseId').value;
        const description = document.getElementById('editDescription').value;
        const learningOutcomes = getEditLearningOutcomesData('editLearningOutcomesContainer');
        
        // Validate required fields
        if (!courseId) {
            showError('Course ID is required!');
            return;
        }
        
        // Create request data - adapt to CourseUpdateDTO format (PascalCase)
        const requestData = {
            Id: courseId,
            CourseName: "", // Tutor doesn't update this field
            CourseCode: "", // Tutor doesn't update this field
            Description: description,
            QualificationId: "", // Tutor doesn't update this field
            LearningOutcomes: learningOutcomes.map(lo => ({
                Id: lo.id || null,
                LOName: lo.name,
                Description: lo.description
            }))
        };
        
        // Show loading state
        const updateButton = document.querySelector('#editCourseModal .btn-success');
        const originalText = updateButton.innerHTML;
        updateButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Updating...';
        updateButton.disabled = true;
        
        // Get anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        const tokenValue = token ? token.value : '';
        
        // Send AJAX request to backend
        fetch('/Tutor/Course/Update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': tokenValue
            },
            body: JSON.stringify(requestData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                showSuccess('Course updated successfully!');
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('editCourseModal'));
                modal.hide();
                
                // Update the course data in the current view without refreshing
                updateCourseInView(courseId, requestData);
            } else {
                // Show error message
                showError('Error: ' + (data.message || 'Unknown error'));
            }
        })
        .catch(error => {
            showError('An error occurred while updating the course. Please try again.');
        })
        .finally(() => {
            // Reset button state
            updateButton.innerHTML = originalText;
            updateButton.disabled = false;
        });
    }

    // Edit Course Modal event listeners
    const editCourseModal = document.getElementById('editCourseModal');
    if (editCourseModal) {
        editCourseModal.addEventListener('hidden.bs.modal', function() {
            // Reset form
            document.getElementById('editCourseForm').reset();
            // Clear learning outcomes
            clearEditLearningOutcomes();
        });
    }
</script>

<style>
    /* Custom styles for the course management page */
    .table th {
        font-weight: 600;
        color: #495057;
        border-bottom: 2px solid #dee2e6;
    }
    
    .table td {
        vertical-align: middle;
        border-bottom: 1px solid #f8f9fa;
    }
    
    .table tbody tr:hover {
        background-color: #f8f9fa;
    }
    
    .btn-group .btn {
        margin-right: 2px;
    }
    
    .btn-group .btn:last-child {
        margin-right: 0;
    }
    
    /* Modal enhancements */
    .modal-header.bg-success {
        border-bottom: none;
    }
    
    .modal-title {
        color: white;
    }
    
    /* Form styling */
    .form-label {
        font-weight: 500;
        color: #495057;
    }
    
    .form-control:focus,
    .form-select:focus {
        border-color: #198754;
        box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
    }
    
    /* Badge styling */
    .badge {
        font-size: 0.875rem;
        padding: 0.5rem 0.75rem;
        border-radius: 20px;
    }
    
    /* Responsive table styles */
    .responsive-table {
        min-width: 800px; /* Ensure table has minimum width */
    }
    
    /* Table scrollbar styles */
    .table-responsive::-webkit-scrollbar {
        height: 8px;
    }
    
    .table-responsive::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }
    
    .table-responsive::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 4px;
    }
    
    .table-responsive::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }
    
    /* Empty state styling */
    .text-muted .fas {
        opacity: 0.5;
    }

    /* Learning Outcomes Table Styles */
    .lo-table {
        width: 100%;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        overflow: hidden;
        margin-bottom: 0.5rem;
    }
    
    .lo-table thead th {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        padding: 0.75rem;
        font-weight: 600;
        color: #495057;
        font-size: 0.875rem;
    }
    
    .lo-table tbody td {
        padding: 0.75rem;
        border-bottom: 1px solid #f8f9fa;
        vertical-align: middle;
    }
    
    .lo-table tbody tr:last-child td {
        border-bottom: none;
    }
    
    .lo-table .form-control {
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
    }
    
    .lo-table .form-control:focus {
        border-color: #198754;
        box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
    }
    
    .lo-table .btn-danger {
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
    }
    
    .lo-table .btn-danger i {
        font-size: 0.75rem;
    }
</style>

