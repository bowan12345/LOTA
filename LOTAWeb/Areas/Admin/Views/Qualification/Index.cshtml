@{
    ViewData["Title"] = "Qualification Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    // Add anti-forgery token for AJAX requests
    var token = Html.AntiForgeryToken();
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold text-dark mb-0">Manage Qualifications</h2>
        <div class="d-flex gap-2">
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addQualificationModal" id="addQualificationBtn">
                <i class="fas fa-plus me-2"></i>
                Add Qualification
            </button>
        </div>
    </div>

    <!-- Qualification List Card -->
    <div class="card border-0 shadow-sm">
        <div class="card-header bg-white border-0 py-3">
                            <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-certificate text-primary me-2"></i>
                        Qualification List
                        <span class="badge bg-primary ms-2" id="qualificationListCount">0</span>
                    </h5>
                </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0 responsive-table">
                    <thead class="table-light">
                        <tr>
                            <th class="border-0 text-nowrap">Qualification Name</th>
                            <th class="border-0 text-nowrap">Qualification Type</th>
                            <th class="border-0 text-nowrap d-none d-md-table-cell">Level</th>
                            <th class="border-0 text-nowrap d-none d-xl-table-cell">Status</th>
                            <th class="border-0 text-nowrap">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="qualificationTableBody">
                        <tr>
                            <td colspan="6" class="text-center py-4">
                                <div class="text-muted">
                                    <i class="fas fa-spinner fa-spin fa-2x mb-3"></i>
                                    <p class="mb-0">Loading qualifications...</p>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add Qualification Modal -->
<div class="modal fade" id="addQualificationModal" tabindex="-1" aria-labelledby="addQualificationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="addQualificationModalLabel">
                    <i class="fas fa-plus me-2"></i>
                    Add Qualification
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addQualificationForm">
                    <div class="row g-3">
                        <div class="col-12 col-md-6">
                            <label for="qualificationName" class="form-label">Qualification Name</label>
                            <input type="text" class="form-control" id="qualificationName" name="qualificationName" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="qualificationType" class="form-label">Qualification Type</label>
                            <select class="form-select" id="qualificationType" name="qualificationType" required>
                                <option value="">Select Type</option>
                            </select>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="qualificationLevel" class="form-label">Level</label>
                            <select class="form-select" id="qualificationLevel" name="level" required>
                                <option value="">Select Level</option>
                                <option value="1">Level 1</option>
                                <option value="2">Level 2</option>
                                <option value="3">Level 3</option>
                                <option value="4">Level 4</option>
                                <option value="5">Level 5</option>
                                <option value="6">Level 6</option>
                                <option value="7">Level 7</option>
                                <option value="8">Level 8</option>
                                <option value="9">Level 9</option>
                                <option value="10">Level 10</option>
                            </select>
                        </div>
                    </div>
                </form>
                <div class="row g-3">
                    <div class="col-12">
                        <div class="d-flex justify-content-end gap-2 mt-4">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" onclick="saveQualification()">
                                <i class="fas fa-save me-2"></i>
                                Add
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Qualification Modal -->
<div class="modal fade" id="editQualificationModal" tabindex="-1" aria-labelledby="editQualificationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="editQualificationModalLabel">
                    <i class="fas fa-edit me-2"></i>
                    Edit Qualification
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editQualificationForm">
                    <input type="hidden" id="editQualificationHiddenId" name="id">
                    <div class="row g-3">
                        <div class="col-12 col-md-6">
                            <label for="editQualificationName" class="form-label">Qualification Name</label>
                            <input type="text" class="form-control" id="editQualificationName" name="qualificationName" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editQualificationType" class="form-label">Qualification Type</label>
                            <select class="form-select" id="editQualificationType" name="qualificationType" required>
                                <option value="">Select Type</option>
                            </select>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editQualificationLevel" class="form-label">Level</label>
                            <select class="form-select" id="editQualificationLevel" name="level" required>
                                <option value="">Select Level</option>
                                <option value="1">Level 1</option>
                                <option value="2">Level 2</option>
                                <option value="3">Level 3</option>
                                <option value="4">Level 4</option>
                                <option value="5">Level 5</option>
                                <option value="6">Level 6</option>
                                <option value="7">Level 7</option>
                                <option value="8">Level 8</option>
                                <option value="9">Level 9</option>
                                <option value="10">Level 10</option>
                            </select>
                        </div>
                    </div>
                </form>
                <div class="row g-3">
                    <div class="col-12">
                        <div class="d-flex justify-content-end gap-2 mt-4">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" onclick="updateQualification()">
                                <i class="fas fa-save me-2"></i>
                                Update
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/sweetalert-utils.js"></script>
    <script>
        // Initialize when document is ready
        document.addEventListener('DOMContentLoaded', function() {
            // Load qualification types from database
            loadQualificationTypes();
            
            // Load qualifications
            loadQualifications();
            

            
            // Initialize Bootstrap tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });

        // Load qualifications data
        function loadQualifications() {
            const tbody = document.getElementById('qualificationTableBody');
            tbody.innerHTML = `
                <tr>
                    <td colspan="6" class="text-center py-4">
                        <div class="text-muted">
                            <i class="fas fa-spinner fa-spin fa-2x mb-3"></i>
                            <p class="mb-0">Loading qualifications...</p>
                        </div>
                    </td>
                </tr>
            `;
            
            // Call actual API endpoint
            fetch('/Admin/Qualification/GetQualifications')
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        displayQualifications(result.data);
                        updateQualificationCount(result.data.length);
                    } else {
                        showError(result.message || 'Failed to load qualifications');
                        displayQualifications([]);
                    }
                })
                .catch(error => {
                    showError('Failed to load qualifications');
                    displayQualifications([]);
                });
        }

        // Load qualification types from database
        function loadQualificationTypes() {
            fetch('/Admin/Qualification/GetQualificationTypes')
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        populateQualificationTypeDropdowns(result.data);
                    } else {
                        // Fallback to default options if API fails
                        populateQualificationTypeDropdowns([
                            'Bachelor', 'Diploma', 'Certificate', 'Master', 
                            'PhD', 'Graduate Diploma', 'Postgraduate Certificate'
                        ]);
                    }
                })
                .catch(error => {
                    // Fallback to default options if API fails
                    populateQualificationTypeDropdowns([
                        'Bachelor', 'Diploma', 'Certificate', 'Master', 
                        'PhD', 'Graduate Diploma', 'Postgraduate Certificate'
                    ]);
                });
        }

        // Populate qualification type dropdowns
        function populateQualificationTypeDropdowns(types) {
            const addDropdown = document.getElementById('qualificationType');
            const editDropdown = document.getElementById('editQualificationType');
            
            // Clear existing options except the first "Select Type" option
            if (addDropdown) {
                addDropdown.innerHTML = '<option value="">Select Type</option>';
                types.forEach(type => {
                    const option = document.createElement('option');
                    option.value = type;
                    option.textContent = type;
                    addDropdown.appendChild(option);
                });
            }
            
            if (editDropdown) {
                editDropdown.innerHTML = '<option value="">Select Type</option>';
                types.forEach(type => {
                    const option = document.createElement('option');
                    option.value = type;
                    option.textContent = type;
                    editDropdown.appendChild(option);
                });
            }
        }

        // Display qualifications in table
        function displayQualifications(qualifications) {
            const tbody = document.getElementById('qualificationTableBody');
            
            if (!qualifications || qualifications.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-4">
                            <div class="text-muted">
                                <i class="fas fa-certificate fa-2x mb-3"></i>
                                <p class="mb-0">No qualifications found</p>
                                <small>Click "Add Qualification" to create the first qualification</small>
                            </div>
                        </td>
                    </tr>
                `;
                return;
            }
            
            tbody.innerHTML = qualifications.map(qual => `
                <tr>
                    <td class="text-nowrap">${qual.qualificationName || 'N/A'}</td>
                    <td class="text-nowrap">${qual.qualificationType || 'N/A'}</td>
                    <td class="text-nowrap d-none d-md-table-cell">
                        <span class="badge bg-info">${qual.level || 'N/A'}</span>
                    </td>
                    <td class="text-nowrap d-none d-xl-table-cell">
                        <span class="badge ${qual.isActive ? 'bg-success' : 'bg-secondary'}">
                            ${qual.isActive ? 'Active' : 'Inactive'}
                        </span>
                    </td>
                    <td class="text-nowrap">
                        <div class="btn-group" role="group">
                            <button class="btn btn-success btn-sm" title="Edit" onclick="editQualification('${qual.id}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-danger btn-sm" title="Delete" onclick="deleteQualification('${qual.id}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
        }

        // Update qualification count
        function updateQualificationCount(count) {
            document.getElementById('qualificationListCount').textContent = count;
        }



        // Save qualification
        function saveQualification() {
            const form = document.getElementById('addQualificationForm');
            const formData = new FormData(form);
            
            // Validate required fields
            const name = formData.get('qualificationName');
            const type = formData.get('qualificationType');
            const level = formData.get('level');
            
            if (!name || !type || !level) {
                showError('Please fill in all required fields!');
                return;
            }
            
            // Show loading state
            const saveButton = document.querySelector('#addQualificationModal .btn-success');
            const originalText = saveButton.innerHTML;
            saveButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';
            saveButton.disabled = true;
            
            // Prepare data for API call
            const qualificationData = {
                qualificationName: name,
                qualificationType: type,
                level: parseInt(level),
                isActive: true
            };
            
            // Call API
            fetch('/Admin/Qualification/CreateQualification', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(qualificationData)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    showSuccess(result.message || 'Qualification created successfully!');
                    
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addQualificationModal'));
                    modal.hide();
                    
                    // Reset form
                    form.reset();
                    
                    // Reload qualifications
                    loadQualifications();
                } else {
                    showError(result.message || 'Failed to create qualification');
                }
            })
            .catch(error => {
                showError('Failed to create qualification');
            })
            .finally(() => {
                // Reset button state
                saveButton.innerHTML = originalText;
                saveButton.disabled = false;
            });
        }

        // Edit qualification
        function editQualification(qualificationId) {
            // Show loading state
            const editModal = new bootstrap.Modal(document.getElementById('editQualificationModal'));
            editModal.show();
            
            // Load qualification data
            fetch(`/Admin/Qualification/GetQualification?id=${qualificationId}`)
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        const qualification = result.data;
                        
                        // Populate form fields
                        document.getElementById('editQualificationHiddenId').value = qualification.id;
                        document.getElementById('editQualificationName').value = qualification.qualificationName;
                        document.getElementById('editQualificationType').value = qualification.qualificationType;
                        document.getElementById('editQualificationLevel').value = qualification.level || '';
                    } else {
                        showError(result.message || 'Failed to load qualification data');
                        editModal.hide();
                    }
                })
                .catch(error => {
                    showError('Failed to load qualification data');
                    editModal.hide();
                });
        }

        // Update qualification
        function updateQualification() {
            const form = document.getElementById('editQualificationForm');
            const formData = new FormData(form);
            
            // Validate required fields
            const name = formData.get('qualificationName');
            const type = formData.get('qualificationType');
            const level = formData.get('level');
            
            if (!name || !type || !level) {
                showError('Please fill in all required fields!');
                return;
            }
            
            // Show loading state
            const updateButton = document.querySelector('#editQualificationModal .btn-success');
            const originalText = updateButton.innerHTML;
            updateButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Updating...';
            updateButton.disabled = true;
            
            // Prepare data for API call
            const qualificationData = {
                id: formData.get('id'),
                qualificationName: name,
                qualificationType: type,
                level: parseInt(level),
                isActive: true
            };
            
            // Call API
            fetch('/Admin/Qualification/UpdateQualification', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(qualificationData)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    showSuccess(result.message || 'Qualification updated successfully!');
                    
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editQualificationModal'));
                    modal.hide();
                    
                    // Reset form
                    form.reset();
                    
                    // Reload qualifications
                    loadQualifications();
                } else {
                    showError(result.message || 'Failed to update qualification');
                }
            })
            .catch(error => {
                showError('Failed to update qualification');
            })
            .finally(() => {
                // Reset button state
                updateButton.innerHTML = originalText;
                updateButton.disabled = false;
            });
        }

        // Delete qualification
        function deleteQualification(qualificationId) {
            showConfirm(
                'Are you sure you want to delete this qualification?',
                () => {
                    // Show loading message
                    const loadingToast = showLoading('Deleting qualification...');
                    
                    // Call API
                    fetch(`/Admin/Qualification/DeleteQualification?id=${qualificationId}`, {
                        method: 'DELETE'
                    })
                    .then(response => response.json())
                    .then(result => {
                        // Clear loading toast
                        clearAllToasts();
                        
                        if (result.success) {
                            showSuccess(result.message || 'Qualification deleted successfully!');
                            // Reload the page after a short delay
                            setTimeout(() => {
                                location.reload();
                            }, 500);
                        } else {
                            showError(result.message || 'Failed to delete qualification');
                        }
                    })
                    .catch(error => {
                        clearAllToasts();
                        showError('Failed to delete qualification');
                    });
                },
                null,
                'Delete Qualification'
            );
        }
    </script>
}

@section Styles {
    <style>
        /* Custom styles for the qualification management page */
        .table th {
            font-weight: 600;
            color: #495057;
            border-bottom: 2px solid #dee2e6;
        }
        
        .table td {
            vertical-align: middle;
            border-bottom: 1px solid #f8f9fa;
        }
        
        .table tbody tr:hover {
            background-color: #f8f9fa;
        }
        
        .btn-group .btn {
            margin-right: 2px;
        }
        
        .btn-group .btn:last-child {
            margin-right: 0;
        }
        
        /* Modal enhancements */
        .modal-header.bg-success {
            border-bottom: none;
        }
        
        .modal-title {
            color: white;
        }
        
        /* Form styling */
        .form-label {
            font-weight: 500;
            color: #495057;
        }
        
        .form-control:focus,
        .form-select:focus {
            border-color: #198754;
            box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
        }
        
        /* Modal layout fixes */
        .modal {
            z-index: 1060;
        }
        
        .modal-backdrop {
            z-index: 1055;
        }
        
        /* Ensure page layout remains stable when modal is open */
        body.modal-open {
            overflow: hidden;
            padding-right: 0 !important;
        }
        
        /* Badge styling */
        .badge {
            font-size: 0.875rem;
            padding: 0.5rem 0.75rem;
            border-radius: 20px;
        }
        
        /* Responsive table styles */
        .responsive-table {
            min-width: 800px; /* Ensure table has minimum width */
        }
        
        /* Table scrollbar styles */
        .table-responsive::-webkit-scrollbar {
            height: 8px;
        }
        
        .table-responsive::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }
        
        .table-responsive::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 4px;
        }
        
        .table-responsive::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
        
        /* Responsive breakpoint optimization */
        @@media (max-width: 1200px) {
            .responsive-table {
                min-width: 700px;
            }
        }
        
        @@media (max-width: 992px) {
            .responsive-table {
                min-width: 600px;
            }
            
            .table-responsive {
                font-size: 0.875rem;
            }
            
            .btn-group .btn {
                padding: 0.25rem 0.5rem;
                font-size: 0.75rem;
            }
        }
        
        @@media (max-width: 768px) {
            .responsive-table {
                min-width: 500px;
            }
            
            .table-responsive {
                font-size: 0.8rem;
            }
            
            .btn-group .btn {
                padding: 0.2rem 0.4rem;
                font-size: 0.7rem;
            }
            
            .d-flex.gap-2 {
                flex-direction: column;
                gap: 0.5rem !important;
            }
            
            .d-flex.gap-2 .btn {
                width: 100%;
            }
            
            /* Search box takes full width on small screens */
            .input-group {
                max-width: 100% !important;
            }
        }
        
        @@media (max-width: 576px) {
            .responsive-table {
                min-width: 400px;
            }
            
            .table-responsive {
                font-size: 0.75rem;
            }
            
            .btn-group .btn {
                padding: 0.15rem 0.3rem;
                font-size: 0.65rem;
            }
            
            .card-header .row {
                flex-direction: column;
                gap: 1rem;
            }
            
            .card-header .col-md-6 {
                width: 100%;
            }
        }
        
        /* Empty state styling */
        .text-muted .fas {
            opacity: 0.5;
        }
        
        /* Tooltip styling */
        .tooltip-inner {
            max-width: 300px;
            text-align: left;
        }
    </style>
}
