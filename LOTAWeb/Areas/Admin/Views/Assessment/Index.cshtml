@using LOTA.Model.DTO.Admin
@model IEnumerable<AssessmentReturnDTO>
@{
    ViewData["Title"] = "Manage Assessments";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    // Add anti-forgery token for AJAX requests
    var token = Html.AntiForgeryToken();
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold text-dark mb-0">Manage Assessments</h2>
        <div class="d-flex gap-2">
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addAssessmentModal" id="addAssessmentBtn">
                <i class="fas fa-plus me-2"></i>
                Add Assessment
            </button>
        </div>
    </div>



    <!-- Course List with Assessments -->
    <div class="card border-0 shadow-sm">
        <div class="card-header bg-white border-0 py-3">
            <div class="row align-items-center">
                <div class="col-lg-6 col-md-12 mb-3 mb-lg-0">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-clipboard-check text-primary me-2"></i>
                        Assessment List
                        @if (Model != null && Model.Any())
                        {
                            <span class="badge bg-primary ms-2">@Model.Count()</span>
                        }
                                                 @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
                         {
                             <span class="badge bg-info ms-2">
                                 <i class="fas fa-filter me-1"></i>
                                 Filtered
                             </span>
                         }
                    </h5>
                </div>
                <div class="col-lg-6 col-md-12">
                    <div class="d-flex justify-content-lg-end justify-content-start gap-2">
                        <form method="get" action="@Url.Action("Index", "Assessment", new { area = "Admin" })" class="d-flex w-100" style="max-width: 300px;">
                            <div class="input-group input-group-sm">
                                <span class="input-group-text bg-light border-end-0">
                                    <i class="fas fa-search text-muted"></i>
                                </span>
                                <input type="text" class="form-control border-start-0" name="searchTerm" id="searchTermInput" 
                                       placeholder="course name or code..." value="@ViewBag.SearchTerm">
                                <button type="submit" class="btn btn-outline-secondary border-start-0" title="Search">
                                    <i class="fas fa-search"></i>
                                </button>
                                @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
                                {
                                    <a href="@Url.Action("Index", "Assessment", new { area = "Admin" })" 
                                       class="btn btn-outline-danger border-start-0" title="Clear Search">
                                        <i class="fas fa-times"></i>
                                    </a>
                                }
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card-body p-0">
            @if (Model != null && Model.Any())
            {
                // Group assessments by course
                var courseGroups = Model.GroupBy(a => new { 
                    CourseId = a.TrimesterCourse?.Course?.Id, 
                    CourseName = a.TrimesterCourse?.Course?.CourseName, 
                    CourseCode = a.TrimesterCourse?.Course?.CourseCode,
                    Trimester = a.Trimester
                }).OrderBy(g => g.Key.CourseName);

                foreach (var courseGroup in courseGroups)
                {
                    var courseId = $"course_{courseGroup.Key.CourseId?.Replace("-", "_")}";
                    <div class="course-assessment-section">
                        <div class="row">
                            <!-- Left side: Course header (clickable) -->
                            <div class="col-md-4">
                                <div class="course-header-left" onclick="toggleCourseAssessments('@courseId')" style="cursor: pointer;">
                                    <div class="course-icon">
                                        <i class="fas fa-chevron-down me-2" id="icon_@courseId"></i>
                                        <i class="fas fa-book"></i>
                                    </div>
                                    <div class="course-main-info">
                                        <h5 class="course-name">@courseGroup.Key.CourseName</h5>
                                        <div class="course-code">@courseGroup.Key.CourseCode</div>
                                    </div>
                                    <div class="course-details">
                                        <div class="trimester-info">
                                            <i class="fas fa-calendar-alt me-1"></i>
                                            <span class="badge bg-info">@courseGroup.Key.Trimester?.AcademicYear - T @courseGroup.Key.Trimester?.TrimesterNumber</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Right side: Assessments table -->
                            <div class="col-md-8">
                                <div class="assessments-container" id="@courseId">
                                    <div class="table-responsive">
                                        <table class="table table-hover mb-0 assessment-table">
                                            <thead class="table-light">
                                                <tr>
                                                    <th class="border-0 text-nowrap px-3">Assessment Name</th>
                                                    <th class="border-0 text-nowrap px-3">Type</th>
                                                    <th class="border-0 text-nowrap px-3">Weight</th>
                                                    <th class="border-0 text-nowrap px-3">Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var assessment in courseGroup.OrderBy(a => a.AssessmentName))
                                                {
                                                    <tr class="assessment-row">
                                                        <td class="border-0 px-3">
                                                            <div class="d-flex align-items-center">
                                                                <div class="flex-grow-1">
                                                                    <h6 class="mb-1 fw-semibold text-dark">@assessment.AssessmentName</h6>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td class="border-0 px-3">
                                                            <span class="badge bg-info">@assessment.AssessmentType?.AssessmentTypeName</span>
                                                        </td>
                                                        <td class="border-0 px-3">
                                                            <span class="badge bg-success">@assessment.Weight%</span>
                                                        </td>
                                                        <td class="border-0 px-3">
                                                            <div class="btn-group" role="group">
                                                                <button class="btn btn-success btn-sm" onclick="editAssessment('@assessment.Id', '@assessment.AssessmentName')" title="Edit Assessment">
                                                                    <i class="fas fa-edit"></i>
                                                                </button>
                                                                <button class="btn btn-danger btn-sm" onclick="deleteAssessment('@assessment.Id', '@assessment.AssessmentName')" title="Delete Assessment">
                                                                    <i class="fas fa-trash"></i>
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-4">
                    <div class="text-muted">
                        @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
                        {
                            <i class="fas fa-search fa-2x mb-3"></i>
                            <p class="mb-0">No assessments found for the specified search term</p>
                            <small>Try different search terms or <a href="@Url.Action("Index", "Assessment", new { area = "Admin" })" class="text-decoration-none">clear filters</a></small>
                        }
                        else
                        {
                            <i class="fas fa-clipboard-check fa-2x mb-3"></i>
                            <p class="mb-0">No assessments found</p>
                            <small>No assessments are available for management</small>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Add Assessment Modal -->
<div class="modal fade" id="addAssessmentModal" tabindex="-1" aria-labelledby="addAssessmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="addAssessmentModalLabel">
                    <i class="fas fa-plus me-2"></i>
                    Add Assessment
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addAssessmentForm">
                    <div class="row g-3">
                        <div class="col-12">
                            <label for="courseId" class="form-label">Course</label>
                            <select class="form-select" id="courseId" name="courseId" required>
                                <option value="">Select Course</option>
                                <option value="">Loading course offerings...</option>
                            </select>
                        </div>
                        
                        <div class="col-12 col-md-6">
                            <label for="assessmentName" class="form-label">Assessment Name</label>
                            <input type="text" class="form-control" id="assessmentName" name="assessmentName" placeholder="e.g., Assignment 1, Final Exam" required>
                        </div>
                        
                        <div class="col-12 col-md-6">
                            <label for="assessmentType" class="form-label">Assessment Type</label>
                            <select class="form-select" id="assessmentType" name="assessmentType" required>
                                <option value="">Select Type</option>
                                <option value="">Loading assessment types...</option>
                            </select>
                        </div>
                        
                        <div class="col-12 col-md-6">
                            <label for="Weight" class="form-label">Weight (%)</label>
                            <input type="number" class="form-control" id="Weight" name="Weight" min="0" max="100" step="0.01" placeholder="e.g., 25.50" required>
                        </div>
                        
                        <div class="col-12 col-md-6">
                            <label for="Score" class="form-label">Score</label>
                            <input type="number" class="form-control" id="Score" name="Score" min="0" step="0.01" placeholder="e.g., 100.00" required>
                        </div>
                        
                        <div class="col-12">
                            <label class="form-label">Learning Outcomes</label>
                            <div id="learningOutcomesContainer">
                                <!-- Learning outcomes will be loaded dynamically based on selected course -->
                            </div>
                            <div class="alert alert-info mt-2">
                                <i class="fas fa-info-circle me-2"></i>
                                Select the learning outcomes that this assessment will assess and enter the score for each selected LO
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="saveAssessment()">
                    <i class="fas fa-save me-2"></i>
                    Add 
                </button>
            </div>
        </div>
    </div>
</div>

<!-- View Course Assessments Modal -->
<div class="modal fade" id="viewCourseAssessmentsModal" tabindex="-1" aria-labelledby="viewCourseAssessmentsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="viewCourseAssessmentsModalLabel">
                    <i class="fas fa-eye me-2"></i>
                    Course Assessments
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-12">
                        <h6 class="fw-bold" id="courseNameDisplay"></h6>
                        <button class="btn btn-success btn-sm" onclick="addAssessmentForCurrentCourse()">
                            <i class="fas fa-plus me-2"></i>
                            Add New Assessment
                        </button>
                    </div>
                </div>
                
                <div id="assessmentsTableContainer">
                    <!-- Assessments table will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Assessment Modal -->
<div class="modal fade" id="editAssessmentModal" tabindex="-1" aria-labelledby="editAssessmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="editAssessmentModalLabel">
                    <i class="fas fa-edit me-2"></i>
                    Edit Assessment
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editAssessmentForm">
                    <input type="hidden" id="editAssessmentId" name="assessmentId">
                    <input type="hidden" id="editCourseId" name="courseOfferingId">
                    <input type="hidden" id="editTrimesterId" name="trimesterId">
                    
                    <div class="row g-3">
                        <div class="col-12 col-md-6">
                            <label for="editAssessmentName" class="form-label">Assessment Name</label>
                            <input type="text" class="form-control" id="editAssessmentName" name="assessmentName" required>
                        </div>
                        
                        <div class="col-12 col-md-6">
                            <label for="editAssessmentType" class="form-label">Assessment Type</label>
                            <select class="form-select" id="editAssessmentType" name="assessmentType" required>
                                <option value="">Select Type</option>
                                <option value="">Loading assessment types...</option>
                            </select>
                        </div>
                        
                        <div class="col-12 col-md-6">
                            <label for="editWeight" class="form-label">Weight (%)</label>
                            <input type="number" class="form-control" id="editWeight" name="Weight" min="0" max="100" step="0.01" required>
                        </div>
                        
                        <div class="col-12 col-md-6">
                            <label for="editScore" class="form-label">Score</label>
                            <input type="number" class="form-control" id="editScore" name="Score" min="0" step="0.01" required>
                        </div>
                        
                        <div class="col-12">
                            <label class="form-label">Learning Outcomes</label>
                            <div id="editLearningOutcomesContainer">
                                <!-- Learning outcomes will be loaded dynamically -->
                            </div>
                            <div class="alert alert-info mt-2">
                                <i class="fas fa-info-circle me-2"></i>
                                Select the learning outcomes that this assessment will assess and enter the score for each selected LO
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="updateAssessment()">
                    <i class="fas fa-save me-2"></i>
                    Update
                </button>
            </div>
        </div>
    </div>
</div>

<script>
         // Global variables
     let currentCourseId = null;
     let currentCourseName = null;
     let currentAssessmentId = null;
     let currentAssessmentName = null;
     let latestTrimesterCourseOfferings = [];
    
         // Initialize when document is ready
     document.addEventListener('DOMContentLoaded', function() {
         // Load course offerings for the latest trimester
         loadLatestTrimesterCourseOfferings();
         
         // Load assessment types
         loadAssessmentTypes();
         
         // Search functionality - Add enter key support and auto-submit
         const searchTermInput = document.getElementById('searchTermInput');
         
         if (searchTermInput) {
             searchTermInput.addEventListener('keypress', function(e) {
                 if (e.key === 'Enter') {
                     e.preventDefault();
                     this.closest('form').submit();
                 }
             });
         }
        
        // Course selection change handler
        const courseSelect = document.getElementById('courseId');
        if (courseSelect) {
            courseSelect.addEventListener('change', function() {
                loadLearningOutcomes(this.value);
            });
        }
        
        // Modal event listeners
        const addAssessmentModal = document.getElementById('addAssessmentModal');
        if (addAssessmentModal) {
            addAssessmentModal.addEventListener('hidden.bs.modal', function() {
                document.getElementById('addAssessmentForm').reset();
                document.getElementById('learningOutcomesContainer').innerHTML = '';
                document.getElementById('courseId').disabled = false;
                // Reload assessment types after modal is closed
                loadAssessmentTypes();
            });
        }
        
        const editAssessmentModal = document.getElementById('editAssessmentModal');
        if (editAssessmentModal) {
            editAssessmentModal.addEventListener('hidden.bs.modal', function() {
                document.getElementById('editAssessmentForm').reset();
                document.getElementById('editLearningOutcomesContainer').innerHTML = '';
            });
                 }
     });
     
     // Load course offerings for the latest trimester
     function loadLatestTrimesterCourseOfferings() {
         const courseSelect = document.getElementById('courseId');
         if (!courseSelect) return;
         
         // Show loading state
         courseSelect.innerHTML = '<option value="">Loading course offerings...</option>';
         
         // Fetch latest trimester course offerings
         fetch('/Admin/Assessment/GetLatestTrimesterCourseOfferings')
             .then(response => response.json())
             .then(data => {
                 if (data.success && data.data && data.data.length > 0) {
                     latestTrimesterCourseOfferings = data.data;
                     
                     // Populate dropdown with trimester information
                     courseSelect.innerHTML = '<option value="">Select Course</option>' + 
                         data.data.map(co => {
                             const trimesterInfo = co.trimester ? 
                                 `${co.trimester.academicYear} - Tri${co.trimester.trimesterNumber}` : 
                                 'Trimester info unavailable';
                             return `<option value="${co.id}" data-course-id="${co.courseId}" data-trimester-id="${co.trimester?.id || ''}">${co.courseName} (${co.courseCode}) - ${trimesterInfo}</option>`;
                         }).join('');
                 } else {
                     courseSelect.innerHTML = '<option value="">No course offerings available</option>';
                 }
             })
             .catch(error => {
                 console.error('Error loading course offerings:', error);
                 courseSelect.innerHTML = '<option value="">Error loading course offerings</option>';
             });
     }
     
     // Load assessment types
     function loadAssessmentTypes() {
         const assessmentTypeSelect = document.getElementById('assessmentType');
         if (!assessmentTypeSelect) return;
         
         // Show loading state
         assessmentTypeSelect.innerHTML = '<option value="">Loading assessment types...</option>';
         
         // Fetch assessment types from the server
         fetch('/Admin/Assessment/GetAssessmentTypes')
             .then(response => response.json())
             .then(data => {
                 if (data.success && data.data && data.data.length > 0) {
                     // Populate dropdown
                     assessmentTypeSelect.innerHTML = '<option value="">Select Type</option>' + 
                         data.data.map(at => 
                             `<option value="${at.id}">${at.assessmentTypeName}</option>`
                         ).join('');
                 } else {
                     assessmentTypeSelect.innerHTML = '<option value="">No assessment types available</option>';
                 }
             })
             .catch(error => {
                 console.error('Error loading assessment types:', error);
                 assessmentTypeSelect.innerHTML = '<option value="">Error loading assessment types</option>';
             });
     }
     
         // Load assessment types for edit modal
    function loadAssessmentTypesForEdit() {
        const assessmentTypeSelect = document.getElementById('editAssessmentType');
        if (!assessmentTypeSelect) return Promise.resolve();
        
        // Show loading state
        assessmentTypeSelect.innerHTML = '<option value="">Loading assessment types...</option>';
        
        // Fetch assessment types from the server
        return fetch('/Admin/Assessment/GetAssessmentTypes')
            .then(response => response.json())
            .then(data => {
                if (data.success && data.data && data.data.length > 0) {
                    // Populate dropdown
                    assessmentTypeSelect.innerHTML = '<option value="">Select Type</option>' + 
                        data.data.map(at => 
                            `<option value="${at.id}">${at.assessmentTypeName}</option>`
                        ).join('');
                } else {
                    assessmentTypeSelect.innerHTML = '<option value="">No assessment types available</option>';
                }
            })
            .catch(error => {
                console.error('Error loading assessment types:', error);
                assessmentTypeSelect.innerHTML = '<option value="">Error loading assessment types</option>';
            });
    }
     
     // Load learning outcomes for selected course
    function loadLearningOutcomes(courseOfferingId) {
        if (!courseOfferingId) {
            document.getElementById('learningOutcomesContainer').innerHTML = '';
            return;
        }
        
        const container = document.getElementById('learningOutcomesContainer');
        container.innerHTML = `
            <div class="alert alert-info">
                <i class="fas fa-spinner fa-spin me-2"></i>
                Loading learning outcomes for the selected course...
            </div>
        `;
        
        // Fetch learning outcomes from the server
        fetch(`/Admin/Assessment/GetLearningOutcomes?courseOfferingId=${courseOfferingId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.data && data.data.length > 0) {
                    // Sort learning outcomes by name
                    const sortedData = data.data.sort((a, b) => {
                        const nameA = (a.loName || a.LOName || '').toLowerCase();
                        const nameB = (b.loName || b.LOName || '').toLowerCase();
                        return nameA.localeCompare(nameB);
                    });
                    
                    container.innerHTML = sortedData.map(lo => {
                        const loName = lo.loName || lo.LOName || '';
                        const description = lo.description || lo.Description || '';
                        return `
                            <div class="form-check d-flex align-items-start mb-3">
                                <div class="flex-shrink-0 me-3 mt-1">
                                    <input class="form-check-input" type="checkbox" name="learningOutcomes" value="${lo.id}" id="lo_${lo.id}" onchange="toggleLOScoreInput('${lo.id}')">
                                </div>
                                <div class="flex-grow-1 me-3">
                                    <label class="form-check-label" for="lo_${lo.id}">
                                        <strong>${loName}</strong> - ${description}
                                    </label>
                                </div>
                                <div class="flex-shrink-0" style="width: 120px;">
                                    <input type="number" class="form-control form-control-sm lo-score-input" 
                                           id="lo_score_${lo.id}" name="lo_score_${lo.id}" 
                                           placeholder="Score" min="0" max="100" step="0.01" 
                                           style="display: none;" disabled>
                                </div>
                            </div>
                        `;
                    }).join('');
                } else {
                    container.innerHTML = `
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            No learning outcomes found for this course
                        </div>
                    `;
                }
            })
            .catch(error => {
                container.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-times-circle me-2"></i>
                        Error loading learning outcomes
                    </div>
                `;
            });
    }
    
         // Add assessment for a specific course
     function addAssessmentForCourse(courseOfferingId, courseName) {
         // Find the course offering for this course in the latest trimester
         const courseOffering = latestTrimesterCourseOfferings.find(co => co.id === courseOfferingId);
         
         if (courseOffering) {
             currentCourseId = courseOffering.courseId;
             currentCourseName = courseName;
             
             // Set the course in the modal
             const courseSelect = document.getElementById('courseId');
             courseSelect.value = courseOfferingId;
             courseSelect.disabled = true;
             
             // Load learning outcomes for this course offering
             loadLearningOutcomes(courseOfferingId);
             
             // Show the modal
             const modal = new bootstrap.Modal(document.getElementById('addAssessmentModal'));
             modal.show();
         } else {
             showError('This course is not available in the current trimester. Please select a course from the dropdown.');
         }
     }
    
    // Add assessment for current course (from view modal)
    function addAssessmentForCurrentCourse() {
        if (currentCourseId && currentCourseName) {
            // Close the view modal
            const viewModal = bootstrap.Modal.getInstance(document.getElementById('viewCourseAssessmentsModal'));
            viewModal.hide();
            
            // Find the course offering for this course
            const courseOffering = latestTrimesterCourseOfferings.find(co => co.courseId === currentCourseId);
            if (courseOffering) {
                // Open the add assessment modal with course offering ID
                addAssessmentForCourse(courseOffering.id, currentCourseName);
            } else {
                showError('Course offering not found for this course!');
            }
        }
    }
    
         // View assessment details
     function viewAssessment(assessmentId, assessmentName) {
         // Set the assessment ID
         currentAssessmentId = assessmentId;
         currentAssessmentName = assessmentName;
         
         // Set the assessment name display
         document.getElementById('assessmentNameDisplay').textContent = `${assessmentName} - Assessment Details`;
         
         // Load assessment details
         loadAssessmentDetails(assessmentId);
         
         // Show the modal
         const modal = new bootstrap.Modal(document.getElementById('viewAssessmentModal'));
         modal.show();
          }
     
     // Load assessment details
     function loadAssessmentDetails(assessmentId) {
         const container = document.getElementById('assessmentDetailsContainer');
         container.innerHTML = `
             <div class="text-center py-4">
                 <div class="text-muted">
                     <i class="fas fa-spinner fa-spin fa-2x mb-3"></i>
                     <p class="mb-0">Loading assessment details...</p>
                 </div>
             </div>
         `;
         
         // Fetch assessment details from the server
         fetch(`/Admin/Assessment/GetAssessmentById?id=${assessmentId}`)
             .then(response => response.json())
             .then(data => {
                 if (data.success && data.data) {
                     const assessment = data.data;
                     container.innerHTML = `
                         <div class="row">
                             <div class="col-md-6">
                                 <h6 class="fw-bold">Assessment Information</h6>
                                 <p><strong>Name:</strong> ${assessment.assessmentName}</p>
                                 <p><strong>Type:</strong> ${assessment.assessmentType?.assessmentTypeName || 'N/A'}</p>
                                 <p><strong>Weight:</strong> ${assessment.Weight}%</p>
                                 <p><strong>Score:</strong> ${assessment.Score}</p>
                             </div>
                             <div class="col-md-6">
                                 <h6 class="fw-bold">Course Information</h6>
                                 <p><strong>Course:</strong> ${assessment.courseName}</p>
                                 <p><strong>Code:</strong> ${assessment.courseCode}</p>
                                 <p><strong>Trimester:</strong> ${assessment.academicYear} - Tri${assessment.trimesterNumber}</p>
                             </div>
                         </div>
                         <div class="row mt-3">
                             <div class="col-12">
                                 <h6 class="fw-bold">Learning Outcomes</h6>
                                 <div class="d-flex flex-wrap gap-2">
                                     ${assessment.learningOutcomes ? assessment.learningOutcomes.sort().map(lo => 
                                         `<span class="badge bg-info">${lo}</span>`
                                     ).join('') : '<span class="text-muted">No learning outcomes assigned</span>'}
                                 </div>
                             </div>
                         </div>
                     `;
                 } else {
                     container.innerHTML = `
                         <div class="text-center py-4">
                             <div class="text-danger">
                                 <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                                 <p class="mb-0">Error loading assessment details</p>
                                 <small>Please try again later</small>
                             </div>
                         </div>
                     `;
                 }
             })
             .catch(error => {
                 container.innerHTML = `
                     <div class="text-center py-4">
                         <div class="text-danger">
                             <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                             <p class="mb-0">Error loading assessment details</p>
                             <small>Please try again later</small>
                         </div>
                     </div>
                 `;
             });
     }
     
     // Load course assessments
    function loadCourseAssessments(courseId) {
        const container = document.getElementById('assessmentsTableContainer');
        container.innerHTML = `
            <div class="text-center py-4">
                <div class="text-muted">
                    <i class="fas fa-spinner fa-spin fa-2x mb-3"></i>
                    <p class="mb-0">Loading assessments...</p>
                </div>
            </div>
        `;
        
        // Fetch assessments from the server
        fetch(`/Admin/Assessment/GetCourseAssessments?courseId=${courseId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.data && data.data.length > 0) {
                    container.innerHTML = `
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Assessment Name</th>
                                        <th>Type</th>
                                        <th>Weight (%)</th>
                                        <th>Score</th>
                                        <th>Learning Outcomes</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${data.data.map(assessment => `
                                        <tr>
                                            <td>${assessment.assignmentName}</td>
                                            <td><span class="badge bg-info">Assignment</span></td>
                                            <td>${assessment.Weight}</td>
                                            <td>${assessment.Score}</td>
                                            <td>${assessment.learningOutcomes.sort().join(', ')}</td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-warning btn-sm" onclick="editAssessment('${assessment.id}', '${assessment.assignmentName}')">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-danger btn-sm" onclick="deleteAssessment('${assessment.id}', '${assessment.assignmentName}')">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    `;
                } else {
                    container.innerHTML = `
                        <div class="text-center py-4">
                            <div class="text-muted">
                                <i class="fas fa-clipboard-list fa-2x mb-3"></i>
                                <p class="mb-0">No assessments found for this course</p>
                                <small>Click "Add New Assessment" to create the first assessment</small>
                            </div>
                        </div>
                    `;
                }
            })
            .catch(error => {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <div class="text-danger">
                            <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                            <p class="mb-0">Error loading assessments</p>
                            <small>Please try again later</small>
                        </div>
                    </div>
                `;
            });
    }
    
    // Save assessment
    function saveAssessment() {
        const form = document.getElementById('addAssessmentForm');
        const formData = new FormData(form);
        
        // Show loading state first
        const saveButton = document.querySelector('#addAssessmentModal .btn-success');
        const originalText = saveButton.innerHTML;
        saveButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';
        saveButton.disabled = true;
        
        // Validate required fields
        const courseId = formData.get('courseId');
        const assessmentName = formData.get('assessmentName');
        const assessmentType = formData.get('assessmentType');
        const Weight = formData.get('Weight');
        const Score = formData.get('Score');
        
        if (!courseId || !assessmentName || !assessmentType || !Weight || !Score) {
            showError('Please fill in all required fields!');
            // Reset button state
            saveButton.innerHTML = originalText;
            saveButton.disabled = false;
            return;
        }
        
        // Validate weight
        if (parseFloat(Weight) <= 0 || parseFloat(Weight) > 100) {
            showError('weight must be between 0 and 100!');
            // Reset button state
            saveButton.innerHTML = originalText;
            saveButton.disabled = false;
            return;
        }
        
        // Get selected learning outcomes with scores
        const selectedLOs = [];
        const checkedLOs = document.querySelectorAll('input[name="learningOutcomes"]:checked');
        
        if (checkedLOs.length === 0) {
            showError('Please select at least one learning outcome!');
            // Reset button state
            saveButton.innerHTML = originalText;
            saveButton.disabled = false;
            return;
        }
        
        for (let i = 0; i < checkedLOs.length; i++) {
            const checkbox = checkedLOs[i];
            const loId = checkbox.value;
            const scoreInput = document.getElementById(`lo_score_${loId}`);
            const score = scoreInput ? parseFloat(scoreInput.value) || 0 : 0;
            
            // Validate score input
            if (!scoreInput || scoreInput.value.trim() === '') {
                showError('Please enter a score for all selected learning outcomes!');
                // Reset button state
                saveButton.innerHTML = originalText;
                saveButton.disabled = false;
                return;
            }
            
            if (score < 0 || score > 100) {
                showError('Score must be between 0 and 100!');
                // Reset button state
                saveButton.innerHTML = originalText;
                saveButton.disabled = false;
                return;
            }
            
            selectedLOs.push({
                LOId: loId,
                Score: score
            });
        }
        
                 // Get the selected course offering to get trimester ID and course ID
         const courseSelect = document.getElementById('courseId');
         const selectedOption = courseSelect.querySelector(`option[value="${courseId}"]`);
         
         if (!selectedOption) {
             showError('Course not selected!');
             // Reset button state
             saveButton.innerHTML = originalText;
             saveButton.disabled = false;
             return;
         }
         
         // Get trimester ID and course ID from the selected option's data attributes
         const trimesterId = selectedOption.getAttribute('data-trimester-id');
         const actualCourseId = selectedOption.getAttribute('data-course-id');
         
         if (!trimesterId) {
             showError('Trimester information not found for this course!');
             // Reset button state
             saveButton.innerHTML = originalText;
             saveButton.disabled = false;
             return;
         }
         
         if (!actualCourseId) {
             showError('Course information not found!');
             // Reset button state
             saveButton.innerHTML = originalText;
             saveButton.disabled = false;
             return;
         }
         
         // Prepare data for API call
         const assessmentData = {
             courseId: actualCourseId,
             courseOfferingId: courseId, // This is the TrimesterCourse ID
             trimesterId: trimesterId,
             assessmentName: assessmentName,
             assessmentTypeId: assessmentType, // This is the AssessmentType ID
             Weight: parseFloat(Weight),
             Score: parseFloat(Score),
             learningOutcomes: selectedLOs
         };
        
        // Send API request to create assessment
        fetch('/Admin/Assessment/CreateAssessment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(assessmentData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                showSuccess('Assessment created successfully!');
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addAssessmentModal'));
                modal.hide();
                
                                 // Reset form
                 form.reset();
                 document.getElementById('learningOutcomesContainer').innerHTML = '';
                 
                 // Reload assessment types after form reset
                 loadAssessmentTypes();
                 
                 // Refresh the page after a short delay
                 setTimeout(() => {
                     location.reload();
                 }, 1500);
            } else {
                // Show error message
                showError('Error: ' + data.message);
            }
        })
        .catch(error => {
            showError('An error occurred while creating the assessment. Please try again.');
        })
        .finally(() => {
            // Reset button state
            saveButton.innerHTML = originalText;
            saveButton.disabled = false;
        });
    }
    
    // Edit assessment
    function editAssessment(assessmentId, assessmentName) {
        // Show loading state
        const modal = new bootstrap.Modal(document.getElementById('editAssessmentModal'));
        modal.show();
        
        // Set the assessment ID
        document.getElementById('editAssessmentId').value = assessmentId;
        
        // Load assessment data from API
        fetch(`/Admin/Assessment/GetAssessmentById?id=${assessmentId}`)
            .then(response => response.json())
            .then(result => {
                if (result.success && result.data) {
                    const assessment = result.data;
                    
                    // Populate form fields with actual data
                    document.getElementById('editAssessmentName').value = assessment.assessmentName || '';
                    document.getElementById('editWeight').value = assessment.weight || '';
                    document.getElementById('editScore').value = assessment.score || '';
                    
                    // Try to find courseOfferingId in different possible locations
                    let courseOfferingId = assessment.courseOfferingId;
                    
                    // If not found directly, try to get it from the first assessmentLearningOutcome
                    if (!courseOfferingId && assessment.assessmentLearningOutcomes && assessment.assessmentLearningOutcomes.length > 0) {
                        const firstLO = assessment.assessmentLearningOutcomes[0];
                        courseOfferingId = firstLO.assessment?.courseOfferingId;
                    }
                    
                    // Fallback to empty string if still not found
                    courseOfferingId = courseOfferingId || '';
                    
                    // Set course offering ID (this is the key field for backend)
                    document.getElementById('editCourseId').value = courseOfferingId;
                    
                    // Set trimester ID
                    document.getElementById('editTrimesterId').value = assessment.trimesterId || '';
                    
                    // Load assessment types and set the selected one
                    loadAssessmentTypesForEdit().then(() => {
                        if (assessment.assessmentType && assessment.assessmentType.id) {
                            document.getElementById('editAssessmentType').value = assessment.assessmentType.id;
                        }
                    });
                    
                    // Load all learning outcomes for the course and mark selected ones
                    loadEditLearningOutcomesWithAllOptions(assessment.trimesterCourse?.course?.learningOutcomes, assessment.assessmentLearningOutcomes);
                    
                } else {
                    showError('Failed to load assessment data');
                    modal.hide();
                }
            })
            .catch(error => {
                showError('Failed to load assessment data');
                modal.hide();
            });
    }
    
    // Load learning outcomes for editing with all course options
    function loadEditLearningOutcomesWithAllOptions(allCourseLOs = [], selectedLOs = []) {
        const container = document.getElementById('editLearningOutcomesContainer');
        
        if (!allCourseLOs || allCourseLOs.length === 0) {
            container.innerHTML = `
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    No learning outcomes found for this course
                </div>
            `;
            return;
        }
        
        // Create a set of selected LO IDs for quick lookup
        const selectedLOIds = new Set();
        const selectedLOScores = new Map();
        if (selectedLOs && selectedLOs.length > 0) {
            selectedLOs.forEach(lo => {
                if (lo.learningOutcome && lo.learningOutcome.id) {
                    selectedLOIds.add(lo.learningOutcome.id);
                    if (lo.score !== undefined) {
                        selectedLOScores.set(lo.learningOutcome.id, lo.score);
                    }
                } else if (lo.loId) {
                    selectedLOIds.add(lo.loId);
                    if (lo.score !== undefined) {
                        selectedLOScores.set(lo.loId, lo.score);
                    }
                }
            });
        }
        
        // Sort learning outcomes by name
        const sortedLOs = allCourseLOs.sort((a, b) => {
            const nameA = (a.loName || a.LOName || '').toLowerCase();
            const nameB = (b.loName || b.LOName || '').toLowerCase();
            return nameA.localeCompare(nameB);
        });
        
        // Render all course learning outcomes with selection state
        container.innerHTML = sortedLOs.map(lo => {
            if (lo && lo.id) {
                const loName = lo.loName || lo.LOName || '';
                const description = lo.description || lo.Description || '';
                const isChecked = selectedLOIds.has(lo.id) ? 'checked' : '';
                const score = selectedLOScores.get(lo.id) || '';
                const isVisible = isChecked ? '' : 'style="display: none;"';
                const isDisabled = isChecked ? '' : 'disabled';
                
                return `
                    <div class="form-check d-flex align-items-start mb-3">
                        <div class="flex-shrink-0 me-3 mt-1">
                            <input class="form-check-input" type="checkbox" name="editLearningOutcomes" value="${lo.id}" id="editLo_${lo.id}" ${isChecked} onchange="toggleEditLOScoreInput('${lo.id}')">
                        </div>
                        <div class="flex-grow-1 me-3">
                            <label class="form-check-label" for="editLo_${lo.id}">
                                <strong>${loName}</strong> - ${description}
                            </label>
                        </div>
                        <div class="flex-shrink-0" style="width: 120px;">
                            <input type="number" class="form-control form-control-sm edit-lo-score-input" 
                                   id="edit_lo_score_${lo.id}" name="edit_lo_score_${lo.id}" 
                                   placeholder="Score" min="0" max="100" step="0.01" 
                                   value="${score}" ${isVisible} ${isDisabled}>
                        </div>
                    </div>
                `;
            }
            return '';
        }).join('');
    }
    
    // Load learning outcomes for editing (direct from assessment data - legacy)
    function loadEditLearningOutcomesDirect(assessmentLearningOutcomes = []) {
        const container = document.getElementById('editLearningOutcomesContainer');
        
        if (!assessmentLearningOutcomes || assessmentLearningOutcomes.length === 0) {
            container.innerHTML = `
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    No learning outcomes found for this assessment
                </div>
            `;
            return;
        }
        
        // Create a set of selected LO IDs for quick lookup
        const selectedLOIds = new Set();
        assessmentLearningOutcomes.forEach(lo => {
            if (lo.learningOutcome && lo.learningOutcome.id) {
                selectedLOIds.add(lo.learningOutcome.id);
            }
        });
        
        // Sort learning outcomes by name
        const sortedLOs = assessmentLearningOutcomes.sort((a, b) => {
            const nameA = (a.learningOutcome?.loName || a.learningOutcome?.LOName || '').toLowerCase();
            const nameB = (b.learningOutcome?.loName || b.learningOutcome?.LOName || '').toLowerCase();
            return nameA.localeCompare(nameB);
        });
        
        // Render the learning outcomes directly from assessment data
        container.innerHTML = sortedLOs.map(lo => {
            if (lo.learningOutcome) {
                const loName = lo.learningOutcome.loName || lo.learningOutcome.LOName || '';
                const description = lo.learningOutcome.description || lo.learningOutcome.Description || '';
                return `
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="editLearningOutcomes" value="${lo.learningOutcome.id}" id="editLo_${lo.learningOutcome.id}" checked>
                        <label class="form-check-label" for="editLo_${lo.learningOutcome.id}">
                            <strong>${loName}</strong> - ${description}
                        </label>
                    </div>
                `;
            }
            return '';
        }).join('');
    }
    
    // Toggle LO score input visibility for add modal
    function toggleLOScoreInput(loId) {
        const checkbox = document.getElementById(`lo_${loId}`);
        const scoreInput = document.getElementById(`lo_score_${loId}`);
        
        if (checkbox.checked) {
            scoreInput.style.display = 'block';
            scoreInput.disabled = false;
        } else {
            scoreInput.style.display = 'none';
            scoreInput.disabled = true;
            scoreInput.value = '';
        }
    }
    
    // Toggle LO score input visibility for edit modal
    function toggleEditLOScoreInput(loId) {
        const checkbox = document.getElementById(`editLo_${loId}`);
        const scoreInput = document.getElementById(`edit_lo_score_${loId}`);
        
        if (checkbox.checked) {
            scoreInput.style.display = 'block';
            scoreInput.disabled = false;
        } else {
            scoreInput.style.display = 'none';
            scoreInput.disabled = true;
            scoreInput.value = '';
        }
    }
    
    // Load learning outcomes for editing (legacy function for add modal)
    function loadEditLearningOutcomes(courseOfferingId, selectedLearningOutcomes = []) {
        if (!courseOfferingId) {
            document.getElementById('editLearningOutcomesContainer').innerHTML = '';
            return;
        }
        
        const container = document.getElementById('editLearningOutcomesContainer');
        container.innerHTML = `
            <div class="alert alert-info">
                <i class="fas fa-spinner fa-spin me-2"></i>
                Loading learning outcomes for the selected course...
            </div>
        `;
        
        // Fetch learning outcomes from the server
        fetch(`/Admin/Assessment/GetLearningOutcomes?courseOfferingId=${courseOfferingId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.data && data.data.length > 0) {
                    // Create a set of selected LO IDs for quick lookup
                    const selectedLOIds = new Set();
                    console.log('Processing selected LOs:', selectedLearningOutcomes);
                    if (selectedLearningOutcomes && selectedLearningOutcomes.length > 0) {
                        selectedLearningOutcomes.forEach(lo => {
                            console.log('Processing LO item:', lo);
                            // Based on the actual API response structure
                            if (lo.learningOutcome && lo.learningOutcome.id) {
                                selectedLOIds.add(lo.learningOutcome.id);
                                console.log('Added LO ID:', lo.learningOutcome.id);
                            }
                        });
                    }
                    console.log('Final selected LO IDs:', Array.from(selectedLOIds));
                    
                    // Sort learning outcomes by name
                    const sortedData = data.data.sort((a, b) => {
                        const nameA = (a.loName || a.LOName || '').toLowerCase();
                        const nameB = (b.loName || b.LOName || '').toLowerCase();
                        return nameA.localeCompare(nameB);
                    });
                    
                    container.innerHTML = sortedData.map(lo => {
                        const isChecked = selectedLOIds.has(lo.id) ? 'checked' : '';
                        // Get LO name and description with proper field name handling
                        const loName = lo.loName || lo.LOName || lo.loName || '';
                        const description = lo.description || lo.Description || lo.description || '';
                        console.log(`LO ${lo.id}: ${loName} - checked: ${isChecked}`);
                        return `
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="editLearningOutcomes" value="${lo.id}" id="editLo_${lo.id}" ${isChecked}>
                                <label class="form-check-label" for="editLo_${lo.id}">
                                    <strong>${loName}</strong> - ${description}
                                </label>
                            </div>
                        `;
                    }).join('');
                } else {
                    container.innerHTML = `
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            No learning outcomes found for this course
                        </div>
                    `;
                }
            })
            .catch(error => {
                container.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-times-circle me-2"></i>
                        Error loading learning outcomes
                    </div>
                `;
            });
    }
    
    // Update assessment
    function updateAssessment() {
        const form = document.getElementById('editAssessmentForm');
        const formData = new FormData(form);
        
        // Show loading state first
        const updateButton = document.querySelector('#editAssessmentModal .btn-success');
        const originalText = updateButton.innerHTML;
        updateButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Updating...';
        updateButton.disabled = true;
        
        // Validate required fields
        const assessmentName = formData.get('assessmentName');
        const assessmentType = formData.get('assessmentType');
        const Weight = formData.get('Weight');
        const Score = formData.get('Score');
        
        if (!assessmentName || !assessmentType || !Weight || !Score) {
            showError('Please fill in all required fields!');
            // Reset button state
            updateButton.innerHTML = originalText;
            updateButton.disabled = false;
            return;
        }
        
        // Validate weight
        if (parseFloat(Weight) <= 0 || parseFloat(Weight) > 100) {
            showError('weight must be between 0 and 100!');
            // Reset button state
            updateButton.innerHTML = originalText;
            updateButton.disabled = false;
            return;
        }
        
        // Get selected learning outcomes with scores
        const selectedLOs = [];
        const checkedLOs = document.querySelectorAll('input[name="editLearningOutcomes"]:checked');
        
        if (checkedLOs.length === 0) {
            showError('Please select at least one learning outcome!');
            // Reset button state
            updateButton.innerHTML = originalText;
            updateButton.disabled = false;
            return;
        }
        
        for (let i = 0; i < checkedLOs.length; i++) {
            const checkbox = checkedLOs[i];
            const loId = checkbox.value;
            const scoreInput = document.getElementById(`edit_lo_score_${loId}`);
            const score = scoreInput ? parseFloat(scoreInput.value) || 0 : 0;
            
            // Validate score input
            if (!scoreInput || scoreInput.value.trim() === '') {
                showError('Please enter a score for all selected learning outcomes!');
                // Reset button state
                updateButton.innerHTML = originalText;
                updateButton.disabled = false;
                return;
            }
            
            if (score < 0 || score > 100) {
                showError('Score must be between 0 and 100!');
                // Reset button state
                updateButton.innerHTML = originalText;
                updateButton.disabled = false;
                return;
            }
            
            selectedLOs.push({
                LOId: loId,
                Score: score
            });
        }
        
        // Prepare data for API call
        const assessmentData = {
            id: formData.get('assessmentId'),
            courseOfferingId: formData.get('courseOfferingId'), // Get courseOfferingId from form
            assessmentName: assessmentName,
            assessmentTypeId: assessmentType, // This is the AssessmentType ID
            trimesterId: formData.get('trimesterId') || '', // Get trimesterId from form
            Weight: parseFloat(Weight),
            Score: parseFloat(Score),
            LearningOutcomes: selectedLOs
        };
        
        // Send API request to update assessment
        fetch('/Admin/Assessment/UpdateAssessment', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(assessmentData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                showSuccess('Assessment updated successfully!');
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('editAssessmentModal'));
                modal.hide();
                
                // Reset form
                form.reset();
                document.getElementById('editLearningOutcomesContainer').innerHTML = '';
                
                // Refresh the page after a short delay
                setTimeout(() => {
                    location.reload();
                }, 1500);
            } else {
                // Show error message
                showError('Error: ' + data.message);
            }
        })
        .catch(error => {
            showError('An error occurred while updating the assessment. Please try again.');
        })
        .finally(() => {
            // Reset button state
            updateButton.innerHTML = originalText;
            updateButton.disabled = false;
        });
    }
    
    // Delete assessment
    function deleteAssessment(assessmentId, assessmentName) {
        showConfirm(
            `Are you sure you want to delete "${assessmentName}"?`,
            () => confirmDeleteAssessment(assessmentId, assessmentName),
            null,
            'Delete Assessment'
        );
    }
    
    // Confirm delete assessment
    function confirmDeleteAssessment(assessmentId, assessmentName) {
        // Show loading message
        const loadingToast = showLoading('Deleting assessment...');
        
        // Send API request to delete assessment
        fetch(`/Admin/Assessment/DeleteAssessment?id=${assessmentId}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            // Clear loading toast
            clearAllToasts();
            
            if (data.success) {
                // Show success message
                showSuccess('Assessment deleted successfully!');
                
                // Refresh the page after a short delay
                setTimeout(() => {
                    location.reload();
                }, 1500);
            } else {
                // Show error message
                showError('Error: ' + data.message);
            }
        })
        .catch(error => {
            // Clear loading toast
            clearAllToasts();
            showError('An error occurred while deleting the assessment. Please try again.');
        });
    }
</script>

<style>
    /* Custom styles for the assessment management page */
    .table th {
        font-weight: 600;
        color: #495057;
        border-bottom: 2px solid #dee2e6;
    }
    
    .table td {
        vertical-align: middle;
        border-bottom: 1px solid #f8f9fa;
    }
    
    .table tbody tr:hover {
        background-color: #f8f9fa;
    }
    
    /* Learning Outcomes styling */
    .form-check-label {
        font-size: 0.95rem;
        line-height: 1.4;
    }
    
    .form-check-label strong {
        color: #495057;
        font-weight: 600;
    }
    
    .form-check {
        margin-bottom: 0.5rem;
        padding-left: 1.75rem;
    }
    
    .form-check-input:checked {
        background-color: #198754;
        border-color: #198754;
    }
    
    .form-check-input:focus {
        border-color: #198754;
        box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
    }
    
    .btn-group .btn {
        margin-right: 2px;
    }
    
    .btn-group .btn:last-child {
        margin-right: 0;
    }
    
    /* Modal enhancements */
    .modal-header.bg-success,
    .modal-header.bg-info,
    .modal-header.bg-warning {
        border-bottom: none;
    }
    
    .modal-title {
        color: inherit;
    }
    
    /* Form styling */
    .form-label {
        font-weight: 500;
        color: #495057;
    }
    
    .form-control:focus,
    .form-select:focus {
        border-color: #198754;
        box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
    }
    
    /* Assessment list styling */
    .assessment-list {
        max-height: 120px;
        overflow-y: auto;
    }
    
    .assessment-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .assessment-item .badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
    }
    
    /* Responsive table styles */
    .responsive-table {
        min-width: 800px;
    }
    
    /* Table scrollbar styles */
    .table-responsive::-webkit-scrollbar {
        height: 8px;
    }
    
    .table-responsive::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }
    
    .table-responsive::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 4px;
    }
    
    .table-responsive::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }
    
    /* Responsive breakpoint optimization */
    @@media (max-width: 1200px) {
        .responsive-table {
            min-width: 700px;
        }
    }
    
    /* Learning Outcome responsive styling */
    @@media (max-width: 768px) {
        .form-check.d-flex {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }
        
        .form-check.d-flex .flex-shrink-0:last-child {
            width: 100%;
            min-width: auto;
        }
        
        .form-check.d-flex .form-check-label {
            font-size: 0.875rem;
        }
    }
    
    @@media (max-width: 992px) {
        .responsive-table {
            min-width: 600px;
        }
        
        .table-responsive {
            font-size: 0.875rem;
        }
        
        .btn-group .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }
    }
    
    @@media (max-width: 768px) {
        .responsive-table {
            min-width: 500px;
        }
        
        .table-responsive {
            font-size: 0.8rem;
        }
        
        .btn-group .btn {
            padding: 0.2rem 0.4rem;
            font-size: 0.7rem;
        }
        
        .d-flex.gap-2 {
            flex-direction: column;
            gap: 0.5rem !important;
        }
        
        .d-flex.gap-2 .btn {
            width: 100%;
        }
        
        /* Search box takes full width on small screens */
        .input-group {
            max-width: 100% !important;
        }
    }
    
    @@media (max-width: 576px) {
        .responsive-table {
            min-width: 400px;
        }
        
        .table-responsive {
            font-size: 0.75rem;
        }
        
        .btn-group .btn {
            padding: 0.15rem 0.3rem;
            font-size: 0.65rem;
        }
        
        .card-header .row {
            flex-direction: column;
            gap: 1rem;
        }
        
        .card-header .col-md-6 {
            width: 100%;
        }
    }
    
    /* Empty state styling */
    .text-muted .fas {
        opacity: 0.5;
    }
    
    /* Badge styling */
    .badge {
        font-size: 0.875rem;
        padding: 0.5rem 0.75rem;
        border-radius: 20px;
    }
    
    /* Form check styling */
    .form-check {
        margin-bottom: 0.5rem;
    }
    
    .form-check-input:checked {
        background-color: #198754;
        border-color: #198754;
    }
    
    .form-check-label {
        font-size: 0.875rem;
        color: #495057;
    }
    
    /* Learning Outcome score input styling */
    .lo-score-input,
    .edit-lo-score-input {
        transition: all 0.3s ease;
        border-radius: 6px;
        border: 1px solid #ced4da;
    }
    
    .lo-score-input:focus,
    .edit-lo-score-input:focus {
        border-color: #198754;
        box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
    }
    
    .lo-score-input:disabled,
    .edit-lo-score-input:disabled {
        background-color: #f8f9fa;
        opacity: 0.6;
    }
    
    /* Learning Outcome item styling */
    .form-check.d-flex {
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 12px 16px;
        margin-bottom: 8px;
        background-color: #f8f9fa;
        transition: all 0.2s ease;
        min-height: 60px;
    }
    
    .form-check.d-flex:hover {
        background-color: #e9ecef;
        border-color: #198754;
    }
    
    .form-check.d-flex .form-check-input:checked ~ .form-check-label {
        color: #198754;
        font-weight: 600;
    }
    
    /* Learning Outcome label styling */
    .form-check.d-flex .form-check-label {
        word-wrap: break-word;
        word-break: break-word;
        hyphens: auto;
        line-height: 1.4;
        margin-bottom: 0;
    }
    
    /* Score input container styling */
    .form-check.d-flex .flex-shrink-0:last-child {
        min-width: 120px;
        flex-shrink: 0;
    }
    
    /* Search input styling */
    .input-group-text {
        background-color: #f8f9fa;
        border-color: #ced4da;
    }
    
    .input-group .form-control {
        border-left: none;
    }
    
    .input-group .form-control:focus {
        border-left: none;
        box-shadow: none;
    }
    
    .input-group .btn {
        border-left: none;
    }
    
    /* Card styling */
    .card {
        border-radius: 0.5rem;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }
    
    .card-header {
        border-radius: 0.5rem 0.5rem 0 0 !important;
    }
    
    /* Button styling */
    .btn {
        border-radius: 0.375rem;
        font-weight: 500;
    }
    
    .btn-sm {
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
    }
    
    /* Alert styling */
    .alert {
        border-radius: 0.375rem;
        border: none;
    }
    
    .alert-info {
        background-color: #d1ecf1;
        color: #0c5460;
    }
    
    /* Loading spinner */
    .fa-spinner {
        color: #6c757d;
    }
    
    /* Assessment type badges */
    .badge.bg-info {
        background-color: #17a2b8 !important;
    }
    
    .badge.bg-warning {
        background-color: #ffc107 !important;
        color: #212529 !important;
    }
    
    .badge.bg-success {
        background-color: #28a745 !important;
    }
    
    .badge.bg-secondary {
        background-color: #6c757d !important;
    }
    
    /* Course Assessment Section Styling */
    .course-assessment-section {
        border: 1px solid #e9ecef;
        border-radius: 8px;
        margin-bottom: 20px;
        overflow: hidden;
    }
    
    .course-header-left {
        background: linear-gradient(135deg, #ffffff 0%, #ffffff 70%, #f0f8f0 100%);
        color: #2e7d32;
        padding: 25px 20px;
        font-weight: 600;
        font-size: 1.1rem;
        border-radius: 12px;
        height: 140px;
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        text-align: center;
        transition: all 0.3s ease;
        user-select: none;
        border: 2px solid #e8f5e8;
    }
    
    .course-header-left:hover {
        background: linear-gradient(135deg, #ffffff 0%, #ffffff 60%, #e8f5e8 100%);
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(46, 125, 50, 0.15);
        border-color: #c8e6c9;
    }
    
    .course-header-left .course-icon {
        font-size: 1.5rem;
        color: #4caf50;
        margin-bottom: 8px;
    }
    
    .course-header-left .course-main-info {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }
    
    .course-header-left .course-name {
        font-size: 1.1rem;
        font-weight: 700;
        margin-bottom: 4px;
        color: #2e7d32;
        line-height: 1.2;
    }
    
    .course-header-left .course-code {
        font-size: 0.9rem;
        color: #4caf50;
        font-weight: 500;
        font-family: monospace;
    }
    
    .course-header-left .course-details {
        display: flex;
        flex-direction: column;
        gap: 6px;
        align-items: center;
    }
    
    .course-header-left .trimester-info {
        display: flex;
        align-items: center;
        gap: 4px;
    }
    
    .course-header-left .trimester-info i {
        font-size: 0.8rem;
        color: #4caf50;
    }
    
    .course-header-left .trimester-info .badge {
        font-size: 0.75rem;
        padding: 3px 8px;
        border-radius: 12px;
    }
    
    .assessments-container {
        padding: 25px;
        background-color: #f8f9fa;
        border-radius: 12px;
        min-height: 140px;
        border: 1px solid #e9ecef;
    }
    
    .course-assessment-section .row {
        align-items: stretch;
    }
    
    .course-assessment-section .col-md-4 {
        display: flex;
        align-items: stretch;
    }
    
    .course-assessment-section .col-md-8 {
        background-color: #f8f9fa;
        border-radius: 12px;
        padding: 0;
    }
    
    /* Assessment Table Styling */
    .assessment-table {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }
    
    .assessment-table thead th {
        background-color: #f8f9fa !important;
        border-bottom: 2px solid #dee2e6;
        font-weight: 600;
        color: #495057;
        padding: 12px 16px;
    }
    
    .assessment-row {
        transition: all 0.2s ease;
        border-bottom: 1px solid #f1f3f4;
    }
    
    .assessment-row:hover {
        background-color: #f8f9fa;
        transform: translateX(2px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    
    .assessment-row:last-child {
        border-bottom: none;
    }
    
    .assessment-row td {
        padding: 16px;
        vertical-align: middle;
    }
    
    .assessment-row .text-dark {
        color: #212529 !important;
    }
    
    .assessment-row .badge {
        font-size: 0.8rem;
        padding: 6px 10px;
        border-radius: 15px;
        font-weight: 500;
    }
    
    .assessment-row .btn-group .btn {
        border-radius: 6px;
        margin: 0 2px;
        transition: all 0.2s ease;
    }
    
    .assessment-row .btn-group .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
    }
    
    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .course-assessment-section .row {
            flex-direction: column;
        }
        
        .course-assessment-section .col-md-4,
        .course-assessment-section .col-md-8 {
            width: 100%;
            margin-bottom: 15px;
        }
        
        .course-header-left {
            height: auto;
            min-height: 120px;
            padding: 20px 15px;
        }
        
        .assessments-container {
            padding: 20px 15px;
        }
        
        .assessment-table thead th,
        .assessment-row td {
            padding: 12px 8px;
        }
        
        .assessment-row .btn-group .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }
    }
    
    /* Collapsible Course Assessment Styling */
    .assessments-container.collapsed {
        max-height: 0;
        padding: 0 25px;
        opacity: 0;
        overflow: hidden;
        transition: all 0.3s ease;
    }
    
    .course-header-left .course-icon .fa-chevron-down {
        transition: transform 0.3s ease;
    }
    
    .course-header-left .course-icon .fa-chevron-down.rotated {
        transform: rotate(-90deg);
    }
</style>

@section Scripts {
    <script>
        // Toggle course assessments visibility
        function toggleCourseAssessments(courseId) {
            const assessmentsContainer = document.getElementById(courseId);
            const icon = document.getElementById(`icon_${courseId}`);
            
            if (assessmentsContainer.classList.contains('collapsed')) {
                // Show assessments
                assessmentsContainer.classList.remove('collapsed');
                icon.classList.remove('rotated');
            } else {
                // Hide assessments
                assessmentsContainer.classList.add('collapsed');
                icon.classList.add('rotated');
            }
        }
        
        // Initialize all course sections as expanded by default
        document.addEventListener('DOMContentLoaded', function() {
            // All course sections start expanded
            console.log('Assessment page loaded - all course sections are expanded by default');
        });
    </script>
}
