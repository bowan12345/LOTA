@model LOTA.Model.DTO.Admin.CourseOfferingAssessmentDTO
@{
    ViewData["Title"] = "LO Score - " + Model.TrimesterCourse.Course.CourseName;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    var token = Html.AntiForgeryToken();
}



@token

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="fw-bold text-dark mb-0">
                <i class="fas fa-star text-primary me-2"></i>
                LO Score 
            </h2>
            <p class="text-muted mb-0">
                @Model.TrimesterCourse.Course.CourseName (@Model.TrimesterCourse.Course.CourseCode) -
                @($"Trimester {Model.TrimesterCourse.Trimester.TrimesterNumber} {Model.TrimesterCourse.Trimester.AcademicYear}")
            </p>
        </div>
        <div class="d-flex gap-2">
            <a href="@Url.Action("Index", "LOScore", new { area = "Admin" })" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-2"></i>
                Back to List
            </a>
            <button class="btn btn-success" onclick="saveAllScores()">
                <i class="fas fa-save me-2"></i>
                Save All Scores
            </button>
        </div>
    </div>

    <!-- Alert Messages -->
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (Model.Assessments.Any())
    {
        <!-- Assessment Tabs -->
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-header bg-white border-0 py-3">
                <h5 class="card-title mb-0 fw-bold">
                    <i class="fas fa-clipboard-check text-primary me-2"></i>
                    Assessments
                </h5>
            </div>
            <div class="card-body p-0">
                <ul class="nav nav-tabs" id="assessmentTabs" role="tablist">
                    @for (int i = 0; i < Model.Assessments.Count; i++)
                    {
                        var assessment = Model.Assessments.ToList()[i];
                        var isActive = i == 0;
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(isActive ? "active" : "")" 
                                    id="tab-@assessment.Id" 
                                    data-bs-toggle="tab"
                                    data-bs-target="#content-@assessment.Id"
                                    type="button" 
                                    role="tab">
                                @assessment.AssessmentName
                                <span class="badge bg-dark ms-1">@assessment.Score</span>
                            </button>
                        </li>
                    }
                </ul>
            </div>
        </div>

        <!-- Assessment Content -->
        <div class="tab-content" id="assessmentTabContent">
            @for (int i = 0; i < Model.Assessments.Count; i++)
            {
                var assessment = Model.Assessments.ToList()[i];
                var isActive = i == 0;
                <div class="tab-pane fade @(isActive ? "show active" : "")" 
                     id="content-@assessment.Id" 
                     role="tabpanel">
                    
                    <div class="card border-0 shadow-sm">
                        <div class="card-header bg-white border-0 py-3">
                            <div class="row align-items-center">
                                <div class="col-md-6">
                                    <h5 class="card-title mb-0">
                                        <i class="fas fa-users text-primary me-2"></i>
                                        Students - @assessment.AssessmentName
                                    </h5>
                                </div>
                                <div class="col-md-6 text-end">
                                    <small class="text-muted">
                                        Total Students: @Model.Students.Count |
                                        Learning Outcomes: @assessment.AssessmentLearningOutcomes.Count
                                    </small>
                                </div>
                            </div>
                        </div>
                        <div class="card-body p-0">
                            @if (Model.Students.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover mb-0">
                                        <thead class="table-light">
                                            <tr>
                                                <th style="width: 200px;">Student</th>
                                                @foreach (var alo in assessment.AssessmentLearningOutcomes.OrderBy(alo => alo.LearningOutcome.LOName))
                                                {
                                                    <th class="text-center" style="min-width: 120px;">
                                                        <div class="d-flex flex-column align-items-center">
                                                            <small class="fw-bold">@alo.LearningOutcome.LOName</small>
                                                            <small class="text-muted">LO</small>
                                                            <small class="text-primary fw-bold">@alo.Score</small>
                                                        </div>
                                                    </th>
                                                }
                                                <th class="text-center" style="width: 100px;">Total</th>
                                                <th class="text-center" style="width: 100px;">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var student in Model.Students)
                                            {
                                                <tr data-student-id="@student.StudentId" data-assessment-id="@assessment.Id">
                                                    <td>
                                                        <div class="d-flex align-items-center">
                                                            <div class="avatar-sm me-3">
                                                                <i class="fas fa-user-circle fa-2x text-muted"></i>
                                                            </div>
                                                            <div>
                                                                <div class="fw-semibold">@student.Student.FirstName @student.Student.LastName</div>
                                                                <small class="text-muted">@student.Student.Email</small>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    @foreach (var alo in assessment.AssessmentLearningOutcomes.OrderBy(alo => alo.LearningOutcome.LOName))
                                                    {
                                                        var studentScore = Model.StudentAssessmentScores
                                                            .FirstOrDefault(ss => ss.StudentId == student.StudentId && ss.AssessmentId == assessment.Id);
                                                        var loScore = studentScore?.StudentLOScores?.FirstOrDefault(ls => ls.AssessmentLearningOutcomeId == alo.Id);
                                                        var isRetake = loScore?.IsRetake ?? false;
                                                        var scoreValue = loScore?.Score ?? 0;
                                                        var scoreId = loScore?.Id ?? "";
                                                        
                                                        <td class="text-center">
                                                            <div class="d-flex flex-column align-items-center">
                                                                <div class="position-relative">
                                                                    <input type="number" 
                                                                           class="form-control form-control-sm text-center lo-score-input @(isRetake ? "retake-input" : "")" 
                                                                           data-lo-id="@alo.Id"
                                                                           data-score-id="@scoreId"
                                                                           data-student-id="@student.StudentId"
                                                                           data-assessment-id="@assessment.Id"
                                                                           data-assessment-score="@assessment.Score"
                                                                           data-lo-score="@alo.Score"
                                                                           data-is-retake="@isRetake.ToString().ToLower()"
                                                                           value="@scoreValue"
                                                                           min="0" 
                                                                           max="@alo.Score" 
                                                                           step="0.01"
                                                                           style="width: 110px; height: 40px; font-size: 15px; @(isRetake ? "background-color: #f8f9fa;" : "")"
                                                                           @(isRetake ? "readonly disabled" : "")
                                                                           @(isRetake ? "" : "onchange=\"validateScore(this)\"")>
                                                                    @if (isRetake)
                                                                    {
                                                                        <span class="badge bg-warning text-dark retake-badge-overlay" 
                                                                              title="This is a retake score and cannot be modified">
                                                                            RETAKE
                                                                        </span>
                                                                    }
                                                                </div>
                                                            </div>
                                                        </td>
                                                    }
                                                    <td class="text-center">
                                                        <span class="fw-bold total-score" 
                                                              data-student-id="@student.StudentId" 
                                                              data-assessment-id="@assessment.Id">
                                                            0.00
                                                        </span>
                                                    </td>
                                                    <td class="text-center">
                                                        <button class="btn btn-sm btn-outline-primary" 
                                                                onclick="saveStudentScores('@student.StudentId', '@assessment.Id')">
                                                            <i class="fas fa-save"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="text-center text-muted py-5">
                                    <i class="fas fa-users fa-2x mb-3"></i>
                                    <p>No students enrolled in this course.</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="card border-0 shadow-sm">
            <div class="card-body text-center text-muted py-5">
                <i class="fas fa-clipboard-list fa-3x mb-3"></i>
                <h5>No Assessments Found</h5>
                <p>There are no assessments configured for this course offering.</p>
            </div>
        </div>
    }
</div>

<!-- Loading Modal -->
<div class="modal fade" id="loadingModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-sm modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2 mb-0">Saving scores...</p>
            </div>
        </div>
    </div>
</div>

<style>
    .nav-tabs .nav-link {
        border: none;
        border-bottom: 2px solid transparent;
        color: #6c757d;
        font-weight: 500;
    }

    .nav-tabs .nav-link.active {
        border-bottom-color: #0d6efd;
        color: #0d6efd;
        background-color: transparent;
    }

    .nav-tabs .nav-link:hover {
        border-bottom-color: #0d6efd;
        color: #0d6efd;
    }

    .lo-score-input:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }

    .lo-score-input.invalid {
        border-color: #dc3545;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
    }

    .total-score {
        color: #0d6efd;
        font-size: 1.1em;
    }

    .avatar-sm {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .table th {
        border-top: none;
        font-weight: 600;
        color: #495057;
        vertical-align: top;
        padding: 12px 8px;
    }

    .table td {
        vertical-align: top;
        padding: 12px 8px;
    }
    
    /* LO Header styling */
    .table th .d-flex.flex-column {
        gap: 4px;
        min-height: 60px;
        justify-content: flex-start;
    }
    
    .table th .d-flex.flex-column small {
        line-height: 1.2;
        word-wrap: break-word;
        word-break: break-word;
    }
    
    .table th .d-flex.flex-column .text-primary {
        font-size: 0.9em;
        padding: 2px 6px;
        background-color: #e3f2fd;
        border-radius: 4px;
        border: 1px solid #bbdefb;
    }
    
    /* LO Input styling */
    .table td .d-flex.flex-column {
        gap: 8px;
        min-height: 60px;
        justify-content: flex-start;
        align-items: center;
    }
    
    .lo-score-input {
        margin-top: 8px;
    }
    
    .retake-input {
        background-color: #f8f9fa !important;
        cursor: not-allowed;
    }
    
    .retake-badge-overlay {
        position: absolute;
        top: -8px;
        right: -8px;
        font-size: 0.75rem;
        font-weight: 600;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        z-index: 10;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        white-space: nowrap;
        min-width: 60px;
        text-align: center;
    }
    
    .position-relative {
        display: inline-block;
    }
    
    /* Responsive styling */
    @@media (max-width: 768px) {
        .table th .d-flex.flex-column {
            min-height: 50px;
            gap: 2px;
        }
        
        .table th .d-flex.flex-column small {
            font-size: 0.75em;
        }
        
        .table th .d-flex.flex-column .text-primary {
            font-size: 0.8em;
            padding: 1px 4px;
        }
        
        .table td .d-flex.flex-column {
            min-height: 50px;
            gap: 4px;
        }
        
        .lo-score-input {
            width: 60px !important;
            font-size: 0.875rem;
            margin-top: 4px;
        }
    }
</style>

<script>
    // Validate score input
    function validateScore(input) {
        const value = parseFloat(input.value) || 0;
        const maxScore = parseFloat(input.getAttribute('data-lo-score'));
        
        if (value > maxScore) {
            input.value = maxScore;
            input.classList.add('invalid');
            setTimeout(() => input.classList.remove('invalid'), 2000);
        } else if (value < 0) {
            input.value = 0;
            input.classList.add('invalid');
            setTimeout(() => input.classList.remove('invalid'), 2000);
        }
        
        updateTotalScore(input);
    }

    // Update total score for a student
    function updateTotalScore(input) {
        const studentId = input.getAttribute('data-student-id');
        const assessmentId = input.getAttribute('data-assessment-id');
        const row = input.closest('tr');
        
        let total = 0;
        const scoreInputs = row.querySelectorAll('.lo-score-input');
        scoreInputs.forEach(input => {
            total += parseFloat(input.value) || 0;
        });
        
        const totalElement = row.querySelector(`.total-score[data-student-id="${studentId}"][data-assessment-id="${assessmentId}"]`);
        if (totalElement) {
            totalElement.textContent = total.toFixed(2);
        }
    }

    // Save scores for a specific student
    async function saveStudentScores(studentId, assessmentId, showMessage = true) {
        const row = document.querySelector(`tr[data-student-id="${studentId}"][data-assessment-id="${assessmentId}"]`);
        if (!row) {
            throw new Error(`Row not found for Student ID: ${studentId}, Assessment ID: ${assessmentId}`);
        }
        
        const scoreInputs = row.querySelectorAll('.lo-score-input');
        const loScores = [];
        
        scoreInputs.forEach(input => {
            // Skip retake scores - they cannot be edited
            const isRetake = input.getAttribute('data-is-retake') === 'true';
            if (isRetake) {
                console.log(`Skipping retake score for LO: ${input.getAttribute('data-lo-id')}`);
                return; // Skip this input
            }
            
            const assessmentLearningOutcomeId = input.getAttribute('data-lo-id');
            const score = parseFloat(input.value) || 0;
            
            loScores.push({
                studentId: studentId,
                assessmentId: assessmentId,
                assessmentLearningOutcomeId: assessmentLearningOutcomeId,
                score: score,
                trimesterId: '@Model.TrimesterCourse.Trimester.Id',
                isActive: true,
                isRetake: false
            });
        });
        
        // Check if there are any scores to save
        if (loScores.length === 0) {
            throw new Error('No editable scores found. All scores may be retake data.');
        }
        
        try {
            // Use batch save method
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            if (!tokenElement) {
                throw new Error('Anti-forgery token not found');
            }
            
            const requestData = {
                studentId: studentId,
                assessmentId: assessmentId,
                loScores: loScores
            };
            
            console.log('Sending request data:', requestData);
            
            const response = await fetch('@Url.Action("BatchSaveStudentLOScores", "LOScore", new { area = "Admin" })', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': tokenElement.value
                },
                body: JSON.stringify(requestData)
            });
            
            console.log('Response status:', response.status);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('Response error text:', errorText);
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            console.log('Response result:', result);
            
            if (!result.success) {
                throw new Error(result.message || 'Failed to save scores');
            }
            
            // Update original values after successful save
            scoreInputs.forEach(input => {
                input.setAttribute('data-original-value', input.value);
            });
            
            // Show success message only if showMessage is true (for individual saves)
            if (showMessage) {
                showSuccessMessage('Student scores saved successfully!');
            }
            
            // Refresh current tab data after successful save
            setTimeout(() => {
                // Save current tab info to localStorage
                const currentTab = document.querySelector('.tab-pane.active');
                if (currentTab) {
                    const assessmentId = currentTab.id.replace('content-', '');
                    localStorage.setItem('lastActiveTab', assessmentId);
                }
                location.reload();
            }, 1000);
            
        } catch (error) {
            if (showMessage) {
                showErrorMessage(error.message || 'Failed to save scores');
            }
            throw error;
        }
    }

    // Save all scores
    async function saveAllScores() {
        const allRows = document.querySelectorAll('tbody tr');
        
        let hasChanges = false;
        
        // Check for changes
        for (const row of allRows) {
            const scoreInputs = row.querySelectorAll('.lo-score-input');
            for (const input of scoreInputs) {
                const originalValue = parseFloat(input.getAttribute('data-original-value') || '0');
                const currentValue = parseFloat(input.value) || 0;
                
                if (Math.abs(originalValue - currentValue) > 0.01) {
                    hasChanges = true;
                    break;
                }
            }
            if (hasChanges) break;
        }
        
        if (!hasChanges) {
            showInfoMessage('No changes to save.');
            return;
        }
        
        try {
            showLoading();
            
            // Collect all student scores data
            const allStudentScores = [];
            const currentAssessmentId = document.querySelector('.tab-pane.active').id.replace('content-', '');
            
            for (const row of allRows) {
                const studentId = row.getAttribute('data-student-id');
                const assessmentId = row.getAttribute('data-assessment-id');
                
                // Only process rows for the current assessment
                if (assessmentId === currentAssessmentId) {
                    const scoreInputs = row.querySelectorAll('.lo-score-input');
                    const loScores = [];
                    
                    scoreInputs.forEach(input => {
                        const assessmentLearningOutcomeId = input.getAttribute('data-lo-id');
                        const score = parseFloat(input.value) || 0;
                        
                        loScores.push({
                            studentId: studentId,
                            assessmentId: assessmentId,
                            assessmentLearningOutcomeId: assessmentLearningOutcomeId,
                            score: score,
                            trimesterId: '@Model.TrimesterCourse.Trimester.Id',
                            isActive: true,
                            isRetake: false
                        });
                    });
                    
                    if (loScores.length > 0) {
                        allStudentScores.push({
                            studentId: studentId,
                            assessmentId: assessmentId,
                            loScores: loScores
                        });
                    }
                }
            }
            
            if (allStudentScores.length === 0) {
                hideLoading();
                showInfoMessage('No scores to save for this assessment.');
                return;
            }
            
            // Send all data in one request
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            if (!tokenElement) {
                throw new Error('Anti-forgery token not found');
            }
            
            const requestData = {
                assessmentId: currentAssessmentId,
                studentScores: allStudentScores
            };
            
            console.log('Sending batch save request:', requestData);
            
            const response = await fetch('@Url.Action("BatchSaveAllStudentsLOScores", "LOScore", new { area = "Admin" })', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': tokenElement.value
                },
                body: JSON.stringify(requestData)
            });
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('Response error text:', errorText);
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            console.log('Batch save response:', result);
            
            if (!result.success) {
                throw new Error(result.message || 'Failed to save all scores');
            }
            
            // Update original values after successful save
            allRows.forEach(row => {
                const scoreInputs = row.querySelectorAll('.lo-score-input');
                scoreInputs.forEach(input => {
                    input.setAttribute('data-original-value', input.value);
                });
            });
            
            hideLoading();
            showSuccessMessage(`All scores saved successfully! Processed ${allStudentScores.length} students.`);
            
            // Refresh current tab data after successful batch save
            setTimeout(() => {
                // Save current tab info to localStorage
                const currentTab = document.querySelector('.tab-pane.active');
                if (currentTab) {
                    const assessmentId = currentTab.id.replace('content-', '');
                    localStorage.setItem('lastActiveTab', assessmentId);
                }
                location.reload();
            }, 1500);
            
        } catch (error) {
            hideLoading();
            showErrorMessage(error.message || 'Failed to save all scores');
        }
    }

    // Validate score data before saving
    function validateScoreData(studentId, assessmentId, assessmentLearningOutcomeId, score) {
        if (!studentId) {
            throw new Error('Student ID is required');
        }
        if (!assessmentId) {
            throw new Error('Assessment ID is required');
        }
        if (!assessmentLearningOutcomeId) {
            throw new Error('Assessment Learning Outcome ID is required');
        }
        if (score < 0) {
            throw new Error('Score cannot be negative');
        }
    }





    // Show loading modal
    function showLoading() {
        const modal = new bootstrap.Modal(document.getElementById('loadingModal'));
        modal.show();
    }

    // Hide loading modal
    function hideLoading() {
        const modal = bootstrap.Modal.getInstance(document.getElementById('loadingModal'));
        if (modal) {
            modal.hide();
        }
    }

    // Show success message
    function showSuccessMessage(message) {
        Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: message,
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true
        });
    }

    // Show error message
    function showErrorMessage(message) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: message,
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true
        });
    }

    // Show info message
    function showInfoMessage(message) {
        Swal.fire({
            icon: 'info',
            title: 'Info!',
            text: message,
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true
        });
    }


     

     
     // Initialize page
     document.addEventListener('DOMContentLoaded', function() {
         // Store original values for change detection
         const scoreInputs = document.querySelectorAll('.lo-score-input');
         scoreInputs.forEach(input => {
             const currentValue = input.value;
             input.setAttribute('data-original-value', currentValue);
         });
         
         // Update total scores for all students
         scoreInputs.forEach(input => {
             updateTotalScore(input);
         });
         
         // Restore last active tab if available
         restoreLastActiveTab();
     });
     
     // Restore last active tab
     function restoreLastActiveTab() {
         const lastActiveTab = localStorage.getItem('lastActiveTab');
         if (lastActiveTab) {
             // Find the tab button
             const tabButton = document.querySelector(`#tab-${lastActiveTab}`);
             if (tabButton) {
                 // Remove active class from all tabs
                 document.querySelectorAll('.nav-link').forEach(tab => {
                     tab.classList.remove('active');
                 });
                 document.querySelectorAll('.tab-pane').forEach(pane => {
                     pane.classList.remove('show', 'active');
                 });
                 
                 // Activate the saved tab
                 tabButton.classList.add('active');
                 const targetPane = document.querySelector(`#content-${lastActiveTab}`);
                 if (targetPane) {
                     targetPane.classList.add('show', 'active');
                 }
                 
                 // Clear the stored tab info
                 localStorage.removeItem('lastActiveTab');
             }
         }
     }
</script>
