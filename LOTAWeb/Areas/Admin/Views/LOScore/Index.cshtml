@{
    ViewData["Title"] = "LO Scores";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    var token = Html.AntiForgeryToken();
}

@token

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
        <h2 class="fw-bold text-dark mb-0">
            <i class="fas fa-star text-primary me-2"></i>
            LO Scores 
        </h2>
            <p class="text-muted mb-0">
                View and manage learning outcome scores for course offerings
            </p>
        </div>
    </div>

    <!-- Alert Messages -->
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Course Offering Selection -->
    <div class="card border-0 shadow-sm mb-3">
        <div class="card-header bg-white border-0 py-2">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-filter text-primary me-2"></i>
                Select Course Offering
                    </h5>
                </div>
        <div class="card-body py-2">
            <div class="row">
                <div class="col-md-6">
                    <label for="courseOfferingSelect" class="form-label fw-semibold mb-1">Course Offering</label>
                    <div class="position-relative">
                        <input type="text" id="courseSearchInput" class="form-control" placeholder="Type to search course code or name...">
                        <div id="courseDropdown" class="dropdown-menu w-100" style="display: none; max-height: 300px; overflow-y: auto;">
                            <div class="dropdown-item" data-value="" onclick="selectCourse('', '-- Select a Course Offering --')">-- Select a Course Offering --</div>
                            @if (ViewBag.CourseOfferings != null && ViewBag.CourseOfferings.Count > 0)
                            {
                                foreach (var courseOffering in ViewBag.CourseOfferings)
                                {
                                    <div class="dropdown-item" 
                                         data-value="@courseOffering.Id"
                                         data-course-code="@courseOffering.Course?.CourseCode"
                                         data-course-name="@courseOffering.Course?.CourseName"
                                         data-trimester="@courseOffering.Trimester?.TrimesterNumber"
                                         data-year="@courseOffering.Trimester?.AcademicYear"
                                         onclick="selectCourse('@courseOffering.Id', '@(courseOffering.Course?.CourseCode ?? "Unknown") - @(courseOffering.Course?.CourseName ?? "Unknown") - Trimester @(courseOffering.Trimester?.TrimesterNumber ?? 0) @(courseOffering.Trimester?.AcademicYear ?? 0)')">
                                        @(courseOffering.Course?.CourseCode ?? "Unknown") - @(courseOffering.Course?.CourseName ?? "Unknown") - Tri @(courseOffering.Trimester?.TrimesterNumber ?? 0) @(courseOffering.Trimester?.AcademicYear ?? 0)
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="dropdown-item text-warning">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    No course offerings found. ViewBag.CourseOfferings is @(ViewBag.CourseOfferings == null ? "null" : "empty")
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Spinner -->
    <div id="loadingSpinner" class="text-center py-3" style="display: none;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
                        </div>
        <p class="mt-2 text-muted">Loading course offering details...</p>
                </div>
                
    <!-- Course Details Container -->
    <div id="courseDetailsContainer" style="display: none;">
        <!-- Course Overview Card -->
        <div class="card border-0 shadow-sm mb-3">
            <div class="card-header bg-success text-white py-3" style="cursor: pointer;" onclick="toggleCourseDetails()">
                <div class="row align-items-center">
                    <div class="col-lg-8 col-md-12 mb-2 mb-lg-0">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-chevron-down me-2" id="courseToggleIcon"></i>
                            <i class="fas fa-file-alt me-2"></i>
                            <div>
                                <h4 class="card-title mb-1 fw-bold d-flex align-items-center">
                                    <span id="courseTitle">Course Name</span>
                                    <span class="bg-info rounded ms-1 px-2 py-1" style="font-size: 0.875rem; display: inline-block; margin-left: 8px !important;">
                                        <span class="fw-bold text-white" id="assessmentCount">0</span>
                                        <small class="text-white">Assessments</small>
                                    </span>
                                </h4>
                                <div class="text-light opacity-75">
                                    <span id="courseCode">Course Code</span> - <span id="trimesterInfo">Trimester Info</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-12 text-lg-end">
                        <div class="mt-2">
                            <a href="#" id="manageScoresBtn" class="btn btn-light btn-sm">
                                <i class="fas fa-edit me-1"></i>
                                Manage Scores
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Assessments Section -->
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-white border-0 py-3">
                <h5 class="card-title mb-0 fw-bold">
                    <i class="fas fa-clipboard-check text-primary me-2"></i>
                    Assessments
                </h5>
            </div>
            <div class="card-body">
                <div id="assessmentsContainer">
                    <!-- Assessments will be dynamically loaded here -->
                </div>
            </div>
        </div>
    </div>

    <!-- No Results Message -->
    <div id="noResultsMessage" class="card border-0 shadow-sm" style="display: none;">
        <div class="card-body text-center text-muted py-3">
            <i class="fas fa-search fa-2x mb-2"></i>
            <h5>No Course Offering Selected</h5>
            <p>Please select a course offering from the dropdown above to view details.</p>
                    </div>
                </div>
</div>

<style>
    .dropdown-menu {
        border: 1px solid #dee2e6;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }
    
    .dropdown-item {
        padding: 0.5rem 1rem;
        cursor: pointer;
        transition: background-color 0.15s ease-in-out;
    }
    
    .dropdown-item:hover {
        background-color: #f8f9fa;
    }
    
    .dropdown-item[data-value=""] {
        color: #6c757d;
        font-style: italic;
    }
    
    .assessment-card {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 1rem;
        transition: all 0.3s ease;
        height: 100%;
    }
    
    .assessment-card:hover {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        transform: translateY(-2px);
    }
    
    .assessment-score {
        background: #212529;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-weight: 600;
        font-size: 0.875rem;
    }

    /* Course title with assessment count styling */
    .card-title.d-flex {
        flex-wrap: nowrap;
        align-items: center;
        gap: 8px;
    }
    
    .card-title .bg-info {
        white-space: nowrap;
        line-height: 1.2;
        margin-left: 8px !important;
    }
    
    .card-title .bg-info small {
        display: block;
        line-height: 1;
    }

    .assessment-info {
        color: #6c757d;
        font-size: 0.875rem;
    }

    .assessment-info i {
        width: 16px;
        text-align: center;
        margin-right: 0.5rem;
    }

    /* Course header hover effect */
    .card-header[onclick] {
        transition: background-color 0.2s ease;
    }
    
    .card-header[onclick]:hover {
        background-color: #198754 !important;
    }
    
    /* Assessment count badge styling */
    .bg-info.rounded {
        transition: transform 0.2s ease;
    }
    
    .bg-info.rounded:hover {
        transform: scale(1.05);
    }
</style>

<script>
    let currentCourseOfferingId = null;

    // Show dropdown
    function showDropdown() {
        const dropdown = document.getElementById('courseDropdown');
        if (dropdown) {
            dropdown.style.display = 'block';
        }
    }

    // Hide dropdown
    function hideDropdown() {
        // Delay hiding to allow click events to register
        setTimeout(() => {
            const dropdown = document.getElementById('courseDropdown');
            if (dropdown) {
                dropdown.style.display = 'none';
            }
        }, 200);
    }

    // Filter course options
    function filterCourseOptions() {
        const searchInput = document.getElementById('courseSearchInput');
        const dropdown = document.getElementById('courseDropdown');
        
        if (!searchInput || !dropdown) {
            console.error('Required elements not found for filtering');
            return;
        }
        
        const searchTerm = searchInput.value.toLowerCase();
        const items = dropdown.querySelectorAll('.dropdown-item[data-value]');
        
        if (searchTerm === '') {
            // Show all items if search is empty
            items.forEach(item => {
                item.style.display = '';
            });
            return;
        }
        
        // Filter items based on course code or course name
        items.forEach(item => {
            const courseCode = item.getAttribute('data-course-code') || '';
            const courseName = item.getAttribute('data-course-name') || '';
            const trimester = item.getAttribute('data-trimester') || '';
            const year = item.getAttribute('data-year') || '';
            
            const searchText = `${courseCode} ${courseName} ${trimester} ${year}`.toLowerCase();
            
            if (searchText.includes(searchTerm)) {
                item.style.display = '';
            } else {
                item.style.display = 'none';
            }
        });
    }

    // Select a course from dropdown
    function selectCourse(value, text) {
        const searchInput = document.getElementById('courseSearchInput');
        const dropdown = document.getElementById('courseDropdown');
        
        if (!searchInput || !dropdown) {
            console.error('Required elements not found for course selection');
            return;
        }
        
        searchInput.value = text;
        dropdown.style.display = 'none';
        
        // Ensure previous loading state is cleared
        hideLoading();
        
        // Store the selected course offering ID and text for persistence
        if (value) {
            currentCourseOfferingId = value;
            // Store in sessionStorage for persistence across page interactions (LO Scores specific)
            sessionStorage.setItem('loscores_selectedCourseOfferingId', value);
            sessionStorage.setItem('loscores_selectedCourseOfferingText', text);
            loadCourseOfferingDetails(value);
        } else {
            // Clear selection
            currentCourseOfferingId = null;
            sessionStorage.removeItem('loscores_selectedCourseOfferingId');
            sessionStorage.removeItem('loscores_selectedCourseOfferingText');
            hideCourseDetails();
        }
    }

    // Load course offering details
    async function loadCourseOfferingDetails(courseOfferingId) {
        if (!courseOfferingId) {
            hideCourseDetails();
            return;
        }

        try {
            showLoading();
            
            const url = `@Url.Action("GetCourseOfferingDetails", "LOScore", new { area = "Admin" })?courseOfferingId=${courseOfferingId}`;
            
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            
            if (result.success) {
                displayCourseOfferingDetails(result.data);
            } else {
                showErrorMessage(result.message || 'Failed to load course offering details');
                hideCourseDetails();
            }
        } catch (error) {
            showErrorMessage('Error loading course offering details: ' + error.message);
            hideCourseDetails();
        } finally {
            hideLoading();
        }
    }

    // Display course offering details
    function displayCourseOfferingDetails(data) {
        try {
            if (!data) {
                hideCourseDetails();
                return;
            }

            // Update course info - Try multiple possible data paths
            let courseName = 'Unknown Course';
            let courseCode = 'Unknown Code';
            let trimesterNumber = 0;
            let academicYear = 0;
            let courseOfferingId = '';

            // Get course information from the new DTO structure
            if (data.TrimesterCourse?.Course?.CourseName) {
                courseName = data.TrimesterCourse.Course.CourseName;
                courseCode = data.TrimesterCourse.Course.CourseCode || 'Unknown Code';
                trimesterNumber = data.TrimesterCourse.Trimester?.TrimesterNumber || 0;
                academicYear = data.TrimesterCourse.Trimester?.AcademicYear || 0;
                courseOfferingId = data.TrimesterCourse.Id || '';
            }
            
            // Safely update course info elements
            const courseTitleElement = document.getElementById('courseTitle');
            const courseCodeElement = document.getElementById('courseCode');
            const trimesterInfoElement = document.getElementById('trimesterInfo');
            const assessmentCountElement = document.getElementById('assessmentCount');
            
            if (courseTitleElement) courseTitleElement.textContent = courseName;
            if (courseCodeElement) courseCodeElement.textContent = courseCode;
            if (trimesterInfoElement) trimesterInfoElement.textContent = `Trimester ${trimesterNumber} ${academicYear}`;
            
            // Update counts
            const assessmentCount = data.Assessments?.length || 0;
            if (assessmentCountElement) assessmentCountElement.textContent = assessmentCount;
            
            // Safely hide student count display since we no longer fetch student information
            const studentCountElement = document.getElementById('studentCount');
            if (studentCountElement && studentCountElement.parentElement) {
                studentCountElement.parentElement.style.display = 'none';
            }
            
            // Update Manage Scores button
            const manageScoresBtn = document.getElementById('manageScoresBtn');
            if (manageScoresBtn) {
                const id = courseOfferingId || data.TrimesterCourse?.Id || data.Id || data.id;
                manageScoresBtn.href = `@Url.Action("Score", "LOScore", new { area = "Admin" })/${id}`;
            }
            
            // Generate assessments content
            generateAssessmentsContent(data.Assessments || []);
            
            // Show course details
            showCourseDetails();
            
        } catch (error) {
            showErrorMessage('Error displaying course offering details');
            hideCourseDetails();
        }
    }

    // Generate assessments content
    function generateAssessmentsContent(assessments) {
        const container = document.getElementById('assessmentsContainer');
        
        if (!container) {
            console.error('Assessments container not found');
            return;
        }
        
        if (!assessments || assessments.length === 0) {
            container.innerHTML = `
                <div class="text-center text-muted py-3">
                    <i class="fas fa-info-circle fa-2x mb-2"></i>
                    <p class="mb-0">No assessments found for this course offering.</p>
                </div>
            `;
            return;
        }
        
        const assessmentsHtml = assessments.map(assessment => {
            try {
                // Get assessment information from the new DTO structure
                const assessmentName = assessment.AssessmentName || 'Unknown Assessment';
                const weight = assessment.Weight || 0;
                const score = assessment.Score || 0;
                
                // Get assessment type name
                const assessmentTypeName = assessment.AssessmentType?.AssessmentTypeName || 'Unknown Type';
                
                return `
                    <div class="col-md-6 col-lg-4 mb-3">
                        <div class="assessment-card">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <h6 class="mb-1 text-truncate">${assessmentName}</h6>
                                <span class="assessment-score">${score}</span>
                            </div>
                            <div class="assessment-info">
                                <div><i class="fas fa-weight"></i>Weight: ${weight}%</div>
                                <div><i class="fas fa-star"></i>Score: ${score}</div>
                                <div><i class="fas fa-tag"></i>${assessmentTypeName}</div>
                                <div><i class="fas fa-calendar"></i>Due: ${new Date(assessment.DueDate).toLocaleDateString()}</div>
                            </div>
                        </div>
                    </div>
                `;
            } catch (error) {
                return `
                    <div class="col-md-6 col-lg-4 mb-3">
                        <div class="assessment-card">
                            <div class="text-center text-muted">
                                <i class="fas fa-exclamation-triangle"></i>
                                <p class="mb-0">Error displaying assessment</p>
                            </div>
                        </div>
                    </div>
                `;
            }
        }).join('');
        
        container.innerHTML = `
            <div class="row">
                ${assessmentsHtml}
            </div>
        `;
    }

    // Show course details
    function showCourseDetails() {
        const courseDetailsContainer = document.getElementById('courseDetailsContainer');
        const noResultsMessage = document.getElementById('noResultsMessage');
        
        if (courseDetailsContainer) courseDetailsContainer.style.display = 'block';
        if (noResultsMessage) noResultsMessage.style.display = 'none';
    }

    // Hide course details
    function hideCourseDetails() {
        const courseDetailsContainer = document.getElementById('courseDetailsContainer');
        const noResultsMessage = document.getElementById('noResultsMessage');
        
        if (courseDetailsContainer) courseDetailsContainer.style.display = 'none';
        if (noResultsMessage) noResultsMessage.style.display = 'block';
    }

    // Show loading
    function showLoading() {
        const loadingSpinner = document.getElementById('loadingSpinner');
        if (loadingSpinner) {
            loadingSpinner.style.display = 'block';
        }
    }

    // Hide loading
    function hideLoading() {
        const loadingSpinner = document.getElementById('loadingSpinner');
        if (loadingSpinner) {
            loadingSpinner.style.display = 'none';
        }
        
        // 强制清除所有可能的 loading 状态
        const allLoadingElements = document.querySelectorAll('[id*="loading"], [class*="loading"], [id*="spinner"], [class*="spinner"]');
        
        allLoadingElements.forEach(element => {
            if (element.style.display !== 'none') {
                element.style.display = 'none';
            }
        });
        
        // 清除 SweetAlert2 的 loading 状态和遮罩层
        if (typeof Swal !== 'undefined') {
            try {
                Swal.close();
            } catch (error) {
                // Silent error handling
            }
        }
        
        // 清除 SweetAlert2 的遮罩层
        const sweetAlertOverlays = document.querySelectorAll('.swal2-container, .swal2-backdrop-show, .swal2-backdrop');
        sweetAlertOverlays.forEach(overlay => {
            if (overlay.style.display !== 'none') {
                overlay.style.display = 'none';
                overlay.remove();
            }
        });
        
        // 清除任何可能的全局 loading 样式
        document.body.classList.remove('loading', 'loading-overlay', 'swal2-shown');
        
        // 强制移除 body 上的 overflow 隐藏样式
        document.body.style.overflow = '';
        document.body.style.paddingRight = '';
    }

    // Show error message
    function showErrorMessage(message) {
        // You can implement a toast notification or alert here
        console.error(message);
        alert(message);
    }

    // Toggle course details section
    function toggleCourseDetails() {
        const assessmentsSection = document.querySelector('#courseDetailsContainer .card:nth-child(2)');
        const toggleIcon = document.getElementById('courseToggleIcon');
        
        if (!assessmentsSection || !toggleIcon) {
            console.error('Required elements not found for toggle functionality');
            return;
        }
        
        if (assessmentsSection.style.display === 'none') {
            // Show assessments section
            assessmentsSection.style.display = 'block';
            toggleIcon.className = 'fas fa-chevron-down me-2';
        } else {
            // Hide assessments section
            assessmentsSection.style.display = 'none';
            toggleIcon.className = 'fas fa-chevron-right me-2';
        }
    }

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
        // Ensure loading state is cleared after page loads
        hideLoading();
        
        // Check if ViewBag.CourseOfferings has data
        const dropdown = document.getElementById('courseDropdown');
        if (dropdown) {
            const items = dropdown.querySelectorAll('.dropdown-item[data-value]');
            
            // Ensure dropdown is properly initialized
            if (items.length > 1) { // More than just the default "Select" option
                // Course offerings are available
            } else if (items.length === 1) {
                // Only the default "Select" option exists
                const courseItems = dropdown.querySelectorAll('.dropdown-item[data-value]:not([data-value=""])');
                
                if (courseItems.length > 0) {
                    // Course offerings are available
                } else {
                    // No course offerings found in dropdown
                }
            } else {
                // No course offerings found in dropdown
            }
        } else {
            console.error('Dropdown element not found!');
        }
        
        // Show default state every time entering the page, don't auto-restore previous selection
        // Clear previously saved selection state (LO Scores specific)
        sessionStorage.removeItem('loscores_selectedCourseOfferingId');
        sessionStorage.removeItem('loscores_selectedCourseOfferingText');
        
        // Ensure page displays default state
        hideCourseDetails();
        const searchInput = document.getElementById('courseSearchInput');
        if (searchInput) {
            searchInput.value = '';
            
            // Initialize dropdown search functionality
            // Show dropdown when clicking on input
            searchInput.addEventListener('click', showDropdown);
            
            // Show dropdown when focusing on input
            searchInput.addEventListener('focus', showDropdown);
            
            // Hide dropdown when blurring from input
            searchInput.addEventListener('blur', hideDropdown);
            
            // Handle keyup for filtering
            searchInput.addEventListener('keyup', filterCourseOptions);
            
            // Handle keyboard navigation
            searchInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    const dropdown = document.getElementById('courseDropdown');
                    if (dropdown) {
                        const visibleItems = Array.from(dropdown.querySelectorAll('.dropdown-item[style*="display: block"], .dropdown-item:not([style*="display: none"])'));
                        if (visibleItems.length > 0) {
                            const firstItem = visibleItems[0];
                            const value = firstItem.getAttribute('data-value');
                            const text = firstItem.textContent;
                            selectCourse(value, text);
                        }
                    }
                }
            });
        } else {
            console.error('Search input element not found!');
        }
    });
</script>
