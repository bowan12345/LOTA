@model IEnumerable<LOTA.Model.ApplicationUser>
@{
    ViewData["Title"] = "Tutor Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    // Add anti-forgery token for AJAX requests
    var token = Html.AntiForgeryToken();
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold text-dark mb-0">Manage Tutors</h2>
        <div class="d-flex gap-2">
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addTutorModal">
                <i class="fas fa-plus me-2"></i>
                Add Tutor
            </button>
            <button class="btn btn-outline-success" data-bs-toggle="modal" data-bs-target="#uploadExcelModal">
                <i class="fas fa-file-excel me-2"></i>
                Upload Excel
            </button>
        </div>
    </div>

    <!-- Tutor Table -->
    <div class="card border-0 shadow-sm">
        <div class="card-header bg-white border-0 py-3">
            <div class="row align-items-center">
                <div class="col-md-6">
                                         <h5 class="card-title mb-0 fw-bold">
                         <i class="fas fa-users text-primary me-2"></i>
                         Tutor List
                         @if (Model != null && Model.Any())
                         {
                             <span class="badge bg-primary ms-2">@Model.Count()</span>
                         }
                         @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
                         {
                             <span class="badge bg-info ms-2">
                                 <i class="fas fa-search me-1"></i>
                                 "@ViewBag.SearchTerm"
                             </span>
                         }
                     </h5>
                </div>
                 <div class="col-md-6">
                     <div class="d-flex justify-content-md-end gap-2">
                         <form method="get" action="@Url.Action("Index", "Tutor", new { area = "Admin" })" class="d-flex" style="max-width: 300px;">
                             <div class="input-group input-group-sm">
                                 <span class="input-group-text bg-light border-end-0">
                                     <i class="fas fa-search text-muted"></i>
                                 </span>
                                 <input type="text" class="form-control border-start-0" name="searchTerm" id="searchInput"
                                       placeholder="name or email..." value="@ViewBag.SearchTerm">
                                 <button type="submit" class="btn btn-outline-secondary border-start-0" title="Search">
                                     <i class="fas fa-search"></i>
                                 </button>
                                 @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
                                 {
                                     <a href="@Url.Action("Index", "Tutor", new { area = "Admin" })" 
                                        class="btn btn-outline-danger border-start-0" title="Clear Search">
                                         <i class="fas fa-times"></i>
                                     </a>
                                 }
                             </div>
                         </form>
                     </div>
                 </div>
            </div>
        </div>
        
        <!-- Batch Actions -->
        <div class="card-body border-bottom py-2" id="batchActions" style="display: none;">
            <div class="d-flex align-items-center gap-3">
                <button type="button" class="btn btn-outline-primary btn-sm" onclick="selectAllTutors()">
                    <i class="fas fa-check-square me-1"></i>Select All
                </button>
                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="deselectAllTutors()">
                    <i class="fas fa-square me-1"></i>Deselect All
                </button>
                <div class="vr"></div>
                <button type="button" class="btn btn-danger btn-sm" onclick="deleteSelectedTutors()">
                    <i class="fas fa-trash me-1"></i>Delete Selected
                </button>
            </div>
        </div>
        
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0 responsive-table">
                    <thead class="table-light">
                        <tr>
                            <th class="border-0 text-nowrap" style="width: 40px;">
                                <input type="checkbox" class="form-check-input" id="selectAllCheckbox" onchange="toggleSelectAll(this)">
                            </th>
                            <th class="border-0 text-nowrap">FirstName</th>
                            <th class="border-0 text-nowrap">SurName</th>
                            <th class="border-0 text-nowrap d-none d-lg-table-cell">Email</th>
                            <th class="border-0 text-nowrap d-none d-md-table-cell">Password</th>
                            <th class="border-0 text-nowrap d-none d-md-table-cell">Status</th>

                            <th class="border-0 text-nowrap">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="tutorTableBody">
                        @if (Model != null && Model.Any())
                        {
                            foreach (var tutor in Model)
                            {
                                <tr class="tutor-row" data-tutor-id="@tutor.Id">
                                    <td class="text-nowrap">
                                        <input type="checkbox" class="form-check-input tutor-checkbox" value="@tutor.Id" onchange="updateBatchActions()">
                                    </td>
                                    <td class="text-nowrap">@(tutor.FirstName ?? "N/A")</td>
                                    <td class="text-nowrap">@(tutor.LastName ?? "N/A")</td>
                                    <td class="text-nowrap d-none d-lg-table-cell">@(tutor.Email ?? "N/A")</td>
                                    <td class="text-nowrap d-none d-md-table-cell">
                                        <span class="text-muted">••••••••</span>
                                    </td>
                                    <td class="text-nowrap d-none d-md-table-cell">
                                        @if (tutor.IsActive)
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inactive</span>
                                        }
                                    </td>

                                    <td class="text-nowrap">
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-success btn-sm" title="Edit" onclick="editTutor('@tutor.Id')">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-danger btn-sm" title="Delete" onclick="deleteTutor('@tutor.Id')">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                         {
                             <tr>
                                 <td colspan="7" class="text-center py-4">
                                     <div class="text-muted">
                                         @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
                                         {
                                             <i class="fas fa-search fa-2x mb-3"></i>
                                             <p class="mb-0">No tutors found for "@ViewBag.SearchTerm"</p>
                                             <small>Try a different search term or <a href="@Url.Action("Index", "Tutor", new { area = "Admin" })" class="text-decoration-none">clear search</a></small>
                                         }
                                         else
                                         {
                                             <i class="fas fa-users fa-2x mb-3"></i>
                                             <p class="mb-0">No tutors found</p>
                                             <small>Click "Add Tutor" to create the first tutor</small>
                                         }
                                     </div>
                                 </td>
                             </tr>
                         }
                    </tbody>
                </table>
                
                                                                   <!-- Pagination Controls -->
                  <div id="paginationContainer" class="d-flex justify-content-between align-items-center p-3" style="display: none;">
                      <div class="text-muted small" id="paginationInfo">
                          <!-- Pagination info will be generated here -->
                      </div>
                      <nav aria-label="Tutor list pagination">
                          <ul class="pagination pagination-sm mb-0" id="paginationControls">
                              <!-- Pagination controls will be generated here -->
                          </ul>
                      </nav>
                  </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Tutor Modal -->
<div class="modal fade" id="addTutorModal" tabindex="-1" aria-labelledby="addTutorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="addTutorModalLabel">
                    <i class="fas fa-user-plus me-2"></i>
                    Add Tutor
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addTutorForm">
                    <div class="row g-3">
                        <div class="col-12 col-md-6">
                            <label for="firstName" class="form-label">FirstName</label>
                            <input type="text" class="form-control" id="firstName" name="firstName" >
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="lastName" class="form-label">SurName</label>
                            <input type="text" class="form-control" id="lastName" name="lastName" >
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="email" class="form-label">Email</label><span class="text-danger">*</span>
                            <input type="email" class="form-control" id="email" name="email" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="password" class="form-label">Password</label><span class="text-danger">*</span>
                            <input type="password" class="form-control" id="password" name="password" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="confirmPassword" class="form-label">Confirm Password</label><span class="text-danger">*</span>
                            <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                        </div>

                    </div>
                </form>
                <div class="row g-3">
                    <div class="col-12">
                        <div class="d-flex justify-content-end gap-2 mt-4">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" onclick="saveTutor()">
                                <i class="fas fa-save me-2"></i>
                                Add
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Tutor Modal -->
<div class="modal fade" id="editTutorModal" tabindex="-1" aria-labelledby="editTutorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="editTutorModalLabel">
                    <i class="fas fa-user-edit me-2"></i>
                    Edit Tutor
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editTutorForm">
                    <input type="hidden" id="editTutorId" name="tutorId">
                    <div class="row g-3">
                        <div class="col-12 col-md-6">
                            <label for="editFirstName" class="form-label">FirstName</label>
                            <input type="text" class="form-control" id="editFirstName" name="firstName" >
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editLastName" class="form-label">SurName</label>
                            <input type="text" class="form-control" id="editLastName" name="lastName" >
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editEmail" class="form-label">Email</label><span class="text-danger">*</span>
                            <input type="email" class="form-control" id="editEmail" name="email" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editPassword" class="form-label">Password</label>
                            <input type="password" class="form-control" id="editPassword" name="password" placeholder="Leave blank to keep current password">
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editConfirmPassword" class="form-label">Confirm Password</label>
                            <input type="password" class="form-control" id="editConfirmPassword" name="confirmPassword" placeholder="Leave blank to keep current password">
                        </div>

                    </div>
                </form>
                <div class="row g-3">
                    <div class="col-12">
                        <div class="d-flex justify-content-end gap-2 mt-4">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" onclick="updateTutor()">
                                <i class="fas fa-save me-2"></i>
                                Update
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Upload Excel Modal -->
<div class="modal fade" id="uploadExcelModal" tabindex="-1" aria-labelledby="uploadExcelModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadExcelModalLabel">
                    <i class="fas fa-file-excel me-2"></i>
                    Upload Excel File
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
                         <div class="modal-body">
                 <form id="uploadExcelForm">
                     <div class="mb-3">
                        <label for="excelFile" class="form-label">Select Excel File</label><span class="text-danger">*</span>
                         <input type="file" class="form-control" id="excelFile" accept=".xlsx,.xls" required>
                         <div class="form-text">Supported formats: .xlsx, .xls</div>
                     </div>
                                 <div class="alert alert-info">
                     <h6 class="alert-heading">
                         <i class="fas fa-info-circle me-2"></i>
                         Excel File Format Requirements
                     </h6>
                     <p class="mb-0">Your Excel file should contain the following columns:</p>
                     <ul class="mb-0 mt-2">
                            <li><strong>Surname</strong> (Required)</li>
                            <li><strong>FirstName</strong> (Required)</li>
                            <li><strong>Email</strong> (Required)</li>
                     </ul>
                     <div class="mt-3">
                         <small class="text-muted">
                             <i class="fas fa-exclamation-triangle me-1"></i>
                                <strong>Note:</strong> The default password will be automatically generated and sent to the email address.
                         </small>
                     </div>
                 </div>
                     <div class="mb-3">
                         <a href="@Url.Action("DownloadTemplate", "Tutor", new { area = "Admin" })" class="btn btn-outline-primary btn-sm">
                             <i class="fas fa-download me-2"></i>
                             Download Template
                         </a>
                     </div>
                 </form>
                 </div>
                    <div class="modal-footer flex-column flex-sm-row gap-2">
                     <button type="button" class="btn btn-secondary w-100 w-sm-auto" data-bs-dismiss="modal">Cancel</button>
                     <button type="button" class="btn btn-success w-100 w-sm-auto" onclick="uploadExcel()">
                     <i class="fas fa-upload me-2"></i>
                     Upload & Import
                 </button>
             </div>
        </div>
    </div>
</div>

<script>


    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {

        
        // Modal event listeners
        const addTutorModal = document.getElementById('addTutorModal');
        if (addTutorModal) {
            addTutorModal.addEventListener('hidden.bs.modal', function() {
                // Reset form when modal is hidden
            });
        }
        
        // Edit Tutor Modal event listeners
        const editTutorModal = document.getElementById('editTutorModal');
        if (editTutorModal) {
            editTutorModal.addEventListener('hidden.bs.modal', function() {
                // Reset form when modal is hidden
            });
        }
        
         // Search functionality - Add enter key support and auto-submit
         const searchInput = document.getElementById('searchInput');
         if (searchInput) {
             searchInput.addEventListener('keypress', function(e) {
                 if (e.key === 'Enter') {
                     e.preventDefault();
                     this.closest('form').submit();
                 }
             });
             
             // Auto-submit after 500ms of no typing (debounced search)
             let searchTimeout;
             searchInput.addEventListener('input', function() {
                 clearTimeout(searchTimeout);
                 searchTimeout = setTimeout(() => {
                     if (this.value.length >= 2 || this.value.length === 0) {
                         this.closest('form').submit();
                     }
                 }, 500);
             });
         }
        
        // Initialize Bootstrap tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });





    



    function saveTutor() {
        // Get form data
        const firstName = document.getElementById('firstName').value;
        const lastName = document.getElementById('lastName').value;
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        
        // Validate required fields
        if ( !email || !password) {
            showError('Please fill in all required fields- email and password!');
            return;
        }
        
        // Validate password
        if (password !== confirmPassword) {
            showError('Passwords do not match!');
            return;
        }
        
        // Validate password length
        if (password.length < 6) {
            showError('Password must be at least 6 characters long!');
            return;
        }
        
        // Create request data
        const requestData = {
            firstName: firstName,
            lastName: lastName,
            email: email,
            password: password
        };
        
        // Show loading state
        const saveButton = document.querySelector('#addTutorModal .btn-success');
        const originalText = saveButton.innerHTML;
        saveButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';
        saveButton.disabled = true;
        
        // Get anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        const tokenValue = token ? token.value : '';
        
        // Send AJAX request to backend
        fetch('/Admin/Tutor/Create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': tokenValue
            },
            body: JSON.stringify(requestData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                showSuccess('Tutor created successfully!');
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addTutorModal'));
                modal.hide();
                
                // Reset form
                document.getElementById('addTutorForm').reset();
                
                // Refresh page to show new tutor after a short delay
                setTimeout(() => {
                    location.reload();
                }, 500);
            } else {
                // Show error message
                showError('Error: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error creating tutor:', error);
            showError('An error occurred while creating the tutor. Please try again.');
        })
        .finally(() => {
            // Reset button state
            saveButton.innerHTML = originalText;
            saveButton.disabled = false;
        });
    }

    function editTutor(tutorId) {
        // Load tutor data and open edit modal
        console.log('Editing tutor:', tutorId);
        
        // Show loading state
        const editModal = new bootstrap.Modal(document.getElementById('editTutorModal'));
        editModal.show();
        
        // Load tutor data from backend
        fetch(`/Admin/Tutor/GetTutorById/${tutorId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.data) {
                    const tutor = data.data;
                    
                    // Populate form fields
                    document.getElementById('editTutorId').value = tutor.id;
                    document.getElementById('editFirstName').value = tutor.firstName || '';
                    document.getElementById('editLastName').value = tutor.lastName || '';
                    document.getElementById('editEmail').value = tutor.email || '';
                    document.getElementById('editPassword').value = '';
                    document.getElementById('editConfirmPassword').value = '';
                    

                    
                    console.log('Tutor data loaded:', tutor);
                } else {
                    showError('Error loading tutor data: ' + (data.message || 'Unknown error'));
                    editModal.hide();
                }
            })
            .catch(error => {
                console.error('Error loading tutor data:', error);
                showError('An error occurred while loading tutor data. Please try again.');
                editModal.hide();
            });
    }

    function updateTutor() {
        // Get form data
        const tutorId = document.getElementById('editTutorId').value;
        const firstName = document.getElementById('editFirstName').value;
        const lastName = document.getElementById('editLastName').value;
        const email = document.getElementById('editEmail').value;
        const password = document.getElementById('editPassword').value;
        const confirmPassword = document.getElementById('editConfirmPassword').value;
        

        
        // Validate required fields
        if (!email) {
            showError('Please fill in required email!');
            return;
        }
        
        // Validate password if provided
        if (password && password !== confirmPassword) {
            showError('Passwords do not match!');
            return;
        }
        
        // Validate password length if provided
        if (password && password.length < 6) {
            showError('Password must be at least 6 characters long!');
            return;
        }
        
        // Create request data
        const requestData = {
            id: tutorId,
            firstName: firstName,
            lastName: lastName,
            email: email,
            password: password || null,
            confirmPassword: confirmPassword || null
        };
        
        // Show loading state
        const updateButton = document.querySelector('#editTutorModal .btn-success');
        const originalText = updateButton.innerHTML;
        updateButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Updating...';
        updateButton.disabled = true;
        
        // Get anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        const tokenValue = token ? token.value : '';
        
        // Send AJAX request to backend
        fetch('/Admin/Tutor/Update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': tokenValue
            },
            body: JSON.stringify(requestData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                showSuccess('Tutor updated successfully!');
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('editTutorModal'));
                modal.hide();
                
                // Update the tutor data in the current view instead of refreshing
                updateTutorInView(tutorId, requestData);
            } else {
                // Show error message
                showError('Error: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error updating tutor:', error);
            showError('An error occurred while updating the tutor. Please try again.');
        })
        .finally(() => {
            // Reset button state
            updateButton.innerHTML = originalText;
            updateButton.disabled = false;
        });
    }

    function deleteTutor(tutorId) {
        // Show confirmation dialog using SweetAlert2
        showConfirm(
            'Are you sure you want to delete this tutor?',
            () => confirmDeleteTutor(tutorId),
            null, // No cancel callback needed with SweetAlert2
            'Delete Tutor'
        );
    }

    function confirmDeleteTutor(tutorId) {
        // Show loading message
        const loadingToast = showLoading('Deleting tutor...');
        
        // Get anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        const tokenValue = token ? token.value : '';
        
        // Send AJAX request to delete tutor
        fetch(`/Admin/Tutor/Delete/${tutorId}`, {
            method: 'DELETE',
            headers: {
                'RequestVerificationToken': tokenValue
            }
        })
        .then(response => response.json())
        .then(data => {
            // Clear loading toast
            clearAllToasts();
            
            if (data.success) {
                showSuccess('Tutor deleted successfully!');
                // Reload the page after a short delay
                setTimeout(() => {
                    location.reload();
                }, 500);
            } else {
                showError('Error: ' + data.message);
            }
        })
                 .catch(error => {
             // Clear loading toast
             clearAllToasts();
             showAjaxError(error, 'An error occurred while deleting the tutor. Please try again.');
         });
     }

     function uploadExcel() {
         const fileInput = document.getElementById('excelFile');
         const file = fileInput.files[0];
         
         if (!file) {
             showError('Please select a file to upload');
             return;
         }
         
         // Validate file extension
         const allowedExtensions = ['.xlsx', '.xls'];
         const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));
         if (!allowedExtensions.includes(fileExtension)) {
             showError('Please select a valid Excel file (.xlsx or .xls)');
             return;
         }
         
         // Show loading state
         const uploadButton = document.querySelector('#uploadExcelModal .btn-success');
         const originalText = uploadButton.innerHTML;
         uploadButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Uploading...';
         uploadButton.disabled = true;
         
         // Create FormData
         const formData = new FormData();
         formData.append('file', file);
         
         // Get anti-forgery token
         const token = document.querySelector('input[name="__RequestVerificationToken"]');
         const tokenValue = token ? token.value : '';
         
         // Send AJAX request
         fetch('/Admin/Tutor/UploadExcel', {
             method: 'POST',
             headers: {
                 'RequestVerificationToken': tokenValue
             },
             body: formData
         })
         .then(response => response.json())
        .then(data => {
            console.log('Tutor Upload Response:', data);
            console.log('Data structure:', {
                success: data.success,
                hasData: !!data.data,
                hasErrors: !!(data.data && data.data.errors),
                errorCount: data.data ? data.data.errorCount : 'undefined',
                successCount: data.data ? data.data.successCount : 'undefined'
            });
            
            if (data.success) {
                // Check if there are any errors to display
                if (data.data && data.data.errors && data.data.errors.length > 0) {
                    console.log('Showing errors with SweetAlert');
                    console.log('Calling showUploadResultWithErrors with:', {
                        errors: data.data.errors,
                        successCount: data.data.successCount,
                        errorCount: data.data.errorCount
                    });
                    // Show errors using SweetAlert
                    showUploadResultWithErrors(data.data.errors, data.data.successCount, data.data.errorCount);
                    
                    // Close modal after showing errors
                    const modal = bootstrap.Modal.getInstance(document.getElementById('uploadExcelModal'));
                    modal.hide();
                    
                    // Reset form
                    document.getElementById('uploadExcelForm').reset();
                } else {
                    console.log('Showing success with SweetAlert');
                    console.log('Calling showUploadSuccess with:', data.data.successCount);
                    // No errors, show success using SweetAlert
                    showUploadSuccess(data.data.successCount);
                    
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('uploadExcelModal'));
                    modal.hide();
                    
                    // Reset form
                    document.getElementById('uploadExcelForm').reset();
                }
            } else {
                console.log('Upload failed:', data.message);
                showError('Error: ' + data.message);
            }
        })
         .catch(error => {
             console.error('Error uploading Excel file:', error);
             showError('An error occurred while uploading the Excel file. Please try again.');
         })
         .finally(() => {
             // Reset button state
             uploadButton.innerHTML = originalText;
             uploadButton.disabled = false;
         });
     }

     // Function to show upload success using SweetAlert
     function showUploadSuccess(successCount) {
         console.log('showUploadSuccess called with successCount:', successCount);
         console.log('SweetAlert available:', typeof Swal !== 'undefined');
         console.log('Swal object:', Swal);
         console.log('Swal.fire method:', typeof Swal.fire);
         
         if (typeof Swal === 'undefined') {
             console.error('SweetAlert is not loaded!');
             alert('Upload successful! ' + successCount + ' tutors imported. SweetAlert not available.');
             return;
         }
         
         console.log('About to call Swal.fire with success details');
         console.log('Success count:', successCount);
         
         Swal.fire({
             icon: 'success',
             title: 'Upload Successful!',
             html: `
                 <div class="text-center">
                     <div class="mb-2">
                         <i class="fas fa-check-circle text-success" style="font-size: 2rem;"></i>
                     </div>
                     <h6 class="text-success mb-2">Tutors imported successfully!</h6>
                     <div class="alert alert-success py-2">
                         <strong>${successCount}</strong> tutors have been imported to the system.
                     </div>
                     <p class="text-muted mt-2 mb-0">
                         <small>The page will refresh after you click OK.</small>
                     </p>
                 </div>
             `,
             showConfirmButton: true,
             confirmButtonText: 'OK',
             confirmButtonColor: '#28a745',
             width: '400px',
             customClass: {
                 popup: 'swal-small',
                 title: 'text-success'
             }
         }).then((result) => {
             if (result.isConfirmed) {
                 // Refresh page after clicking OK
                 location.reload();
             }
         });
     }

           // Function to show upload result with errors using SweetAlert
      function showUploadResultWithErrors(errors, successCount, errorCount) {
          console.log('showUploadResultWithErrors called with:', { errors, successCount, errorCount });
          console.log('SweetAlert available:', typeof Swal !== 'undefined');
          if (typeof Swal === 'undefined') {
              console.error('SweetAlert is not loaded!');
              alert('Upload completed with errors. ' + successCount + ' tutors imported, ' + errorCount + ' errors found. SweetAlert not available.');
              return;
          }
          // Create error list HTML
          let errorListHtml = '';
          errors.forEach((error, index) => {
              errorListHtml += `
                  <div class="text-start mb-1 p-1 bg-light rounded">
                      <i class="fas fa-times-circle text-danger me-1"></i>
                      <span class="text-danger small">${error}</span>
                  </div>
              `;
          });

          // Add note about error limit if there are more than 10 errors
          if (errorCount > 10) {
              errorListHtml += `
                  <div class="alert alert-info mt-2 py-1">
                      <i class="fas fa-info-circle me-1"></i>
                      <small><strong>Note:</strong> Showing first 10 errors. Total errors: ${errorCount}</small>
                  </div>
              `;
          }

          Swal.fire({
              icon: 'warning',
              title: 'Upload Completed with Errors',
              html: `
                  <div class="text-center">
                      <div class="mb-2">
                          <i class="fas fa-exclamation-triangle text-warning" style="font-size: 2rem;"></i>
                      </div>
                      
                      <div class="row mb-2">
                          <div class="col-6">
                              <div class="alert alert-success mb-0 py-1">
                                  <i class="fas fa-check-circle me-1"></i>
                                  <small><strong>${successCount}</strong> tutors imported</small>
                              </div>
                          </div>
                          <div class="col-6">
                              <div class="alert alert-danger mb-0 py-1">
                                  <i class="fas fa-times-circle me-1"></i>
                                  <small><strong>${errorCount}</strong> errors found</small>
                              </div>
                          </div>
                      </div>
                      
                      <div class="text-start">
                          <h6 class="text-danger mb-1">Error Details:</h6>
                          <div class="error-list" style="max-height: 150px; overflow-y: auto;">
                              ${errorListHtml}
                          </div>
                      </div>
                      
                      <p class="text-muted mt-2 mb-0">
                          <small>The page will refresh after you click OK.</small>
                      </p>
                  </div>
              `,
              showConfirmButton: true,
              confirmButtonText: 'OK',
              confirmButtonColor: '#ffc107',
              width: '450px',
              customClass: {
                  popup: 'swal-small',
                  title: 'text-warning'
              }
          }).then((result) => {
              if (result.isConfirmed) {
                  // Refresh page after clicking OK
                  location.reload();
              }
          });
      }

    // Batch selection functions
    function toggleSelectAll(checkbox) {
        const checkboxes = document.querySelectorAll('.tutor-checkbox');
        checkboxes.forEach(cb => {
            cb.checked = checkbox.checked;
        });
        updateBatchActions();
    }

    function selectAllTutors() {
        const selectAllCheckbox = document.getElementById('selectAllCheckbox');
        const checkboxes = document.querySelectorAll('.tutor-checkbox');
        checkboxes.forEach(cb => {
            cb.checked = true;
        });
        selectAllCheckbox.checked = true;
        selectAllCheckbox.indeterminate = false;
        updateBatchActions();
    }

    function deselectAllTutors() {
        const selectAllCheckbox = document.getElementById('selectAllCheckbox');
        const checkboxes = document.querySelectorAll('.tutor-checkbox');
        checkboxes.forEach(cb => {
            cb.checked = false;
        });
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = false;
        updateBatchActions();
    }

    function updateBatchActions() {
        const checkboxes = document.querySelectorAll('.tutor-checkbox');
        const selectAllCheckbox = document.getElementById('selectAllCheckbox');
        const selectedCount = document.getElementById('selectedCount');

        let allChecked = true;
        let noneChecked = true;

        checkboxes.forEach(cb => {
            if (cb.checked) {
                noneChecked = false;
            } else {
                allChecked = false;
            }
        });

        selectAllCheckbox.checked = allChecked;
        selectAllCheckbox.indeterminate = !allChecked && !noneChecked;

        const batchActionsDiv = document.getElementById('batchActions');
        if (checkboxes.length > 0) {
            batchActionsDiv.style.display = 'flex';
            selectedCount.textContent = checkboxes.filter(cb => cb.checked).length;
        } else {
            batchActionsDiv.style.display = 'none';
            selectedCount.textContent = '0';
        }
    }

    function deleteSelectedTutors() {
        const selectedTutorIds = Array.from(document.querySelectorAll('.tutor-checkbox:checked')).map(cb => cb.value);
        if (selectedTutorIds.length === 0) {
            showError('Please select at least one tutor to delete.');
            return;
        }

        showConfirm(
            `Are you sure you want to delete ${selectedTutorIds.length} selected tutor(s)? This action cannot be undone.`,
            () => confirmDeleteSelectedTutors(selectedTutorIds),
            null,
            'Delete Selected Tutors'
        );
    }

    function confirmDeleteSelectedTutors(selectedTutorIds) {
        const loadingToast = showLoading('Deleting selected tutors...');
        
        // Get anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        const tokenValue = token ? token.value : '';

        // Send AJAX request to delete selected tutors
        fetch('/Admin/Tutor/DeleteSelected', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': tokenValue
            },
            body: JSON.stringify({ Ids: selectedTutorIds })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSuccess(`${selectedTutorIds.length} tutors deleted successfully!`);
                setTimeout(() => {
                    location.reload();
                }, 2000);
            } else {
                showError('Error: ' + data.message);
                loadingToast.hide();
            }
        })
        .catch(error => {
            console.error('Error deleting selected tutors:', error);
            showError('An error occurred while deleting the selected tutors. Please try again.');
            loadingToast.hide();
        });
    }
</script>

<style>
    /* Custom styles for the tutor management page */
    .table th {
        font-weight: 600;
        color: #495057;
        border-bottom: 2px solid #dee2e6;
    }
    
    .table td {
        vertical-align: middle;
        border-bottom: 1px solid #f8f9fa;
    }
    
    .table tbody tr:hover {
        background-color: #f8f9fa;
    }
    
    .btn-group .btn {
        margin-right: 2px;
    }
    
    .btn-group .btn:last-child {
        margin-right: 0;
    }
    
    /* Modal enhancements */
    .modal-header.bg-success {
        border-bottom: none;
    }
    
    .modal-title {
        color: white;
    }
    
    /* Form styling */
    .form-label {
        font-weight: 500;
        color: #495057;
    }
    
    .form-control:focus,
    .form-select:focus {
        border-color: #198754;
        box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
    }
    
    /* Modal layout fixes */
    .modal {
        z-index: 1060;
    }
    
    .modal-backdrop {
        z-index: 1055;
    }
    
    /* Ensure page layout remains stable when modal is open */
    body.modal-open {
        overflow: hidden;
        padding-right: 0 !important;
    }
    
    /* Badge styling */
    .badge {
        font-size: 0.875rem;
        padding: 0.5rem 0.75rem;
        border-radius: 20px;
    }
    
    /* Responsive table styles */
    .responsive-table {
        min-width: 800px; /* Ensure table has minimum width */
    }
    

    
    /* Table scrollbar styles */
    .table-responsive::-webkit-scrollbar {
        height: 8px;
    }
    
    .table-responsive::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }
    
    .table-responsive::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 4px;
    }
    
    .table-responsive::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }
    
         /* Responsive breakpoint optimization */
     @@media (max-width: 1200px) {
         .responsive-table {
             min-width: 700px;
         }
         

     }
     
     @@media (max-width: 992px) {
         .responsive-table {
             min-width: 600px;
         }
         
         .table-responsive {
             font-size: 0.875rem;
         }
         
         .btn-group .btn {
             padding: 0.25rem 0.5rem;
             font-size: 0.75rem;
         }
     }
     
     @@media (max-width: 768px) {
         .responsive-table {
             min-width: 500px;
         }
         
         .table-responsive {
             font-size: 0.8rem;
         }
         
         .btn-group .btn {
             padding: 0.2rem 0.4rem;
             font-size: 0.7rem;
         }
         
         .d-flex.gap-2 {
             flex-direction: column;
             gap: 0.5rem !important;
         }
         
         .d-flex.gap-2 .btn {
             width: 100%;
         }
         
         /* Search box takes full width on small screens */
         .input-group {
             max-width: 100% !important;
         }
     }
     
     @@media (max-width: 576px) {
         .responsive-table {
             min-width: 400px;
         }
         
         .table-responsive {
             font-size: 0.75rem;
         }
         
         .btn-group .btn {
             padding: 0.15rem 0.3rem;
             font-size: 0.65rem;
         }
         
         .card-header .row {
             flex-direction: column;
             gap: 1rem;
         }
         
         .card-header .col-md-6 {
             width: 100%;
         }
     }
    
    /* Empty state styling */
    .text-muted .fas {
        opacity: 0.5;
    }
    
         /* Tooltip styling */
     .tooltip-inner {
         max-width: 300px;
         text-align: left;
     }
     
     /* Enhanced dropdown styling */
     .form-select[multiple] {
         border: 1px solid #ced4da;
         border-radius: 0.375rem;
         padding: 0.5rem;
         background-color: #fff;
         transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
     }
     
     .form-select[multiple]:focus {
         border-color: #198754;
         box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
         outline: 0;
     }
     
     .form-select[multiple] option {
         padding: 0.5rem;
         border-bottom: 1px solid #f8f9fa;
     }
     
     .form-select[multiple] option:checked {
         background-color: #198754;
         color: white;
     }
     
     .form-select[multiple] option:hover {
         background-color: #f8f9fa;
     }
     
           .form-text {
          font-size: 0.875rem;
          color: #6c757d;
          margin-top: 0.25rem;
      }
      
      /* SweetAlert custom styling */
      .swal-wide {
          max-width: 600px !important;
      }
      
      .swal-wide .swal2-html {
          text-align: left;
      }
      
      .swal-wide .error-list {
          max-height: 200px;
          overflow-y: auto;
          border: 1px solid #dee2e6;
          border-radius: 0.375rem;
          padding: 0.5rem;
          background-color: #f8f9fa;
      }
      
      .swal-wide .error-list::-webkit-scrollbar {
          width: 6px;
      }
      
      .swal-wide .error-list::-webkit-scrollbar-track {
          background: #f1f1f1;
          border-radius: 3px;
      }
      
      .swal-wide .error-list::-webkit-scrollbar-thumb {
          background: #6c757d;
          border-radius: 3px;
      }
      
      .swal-wide .error-list::-webkit-scrollbar-thumb:hover {
          background: #495057;
      }
      
      .swal-wide .alert {
          margin-bottom: 0.5rem;
          padding: 0.5rem 0.75rem;
          border-radius: 0.375rem;
          font-size: 0.875rem;
      }
      
      .swal-wide .bg-light {
          background-color: #f8f9fa !important;
      }
      
      .swal-wide .text-start {
          text-align: left !important;
      }
      
      /* Small SweetAlert styling */
      .swal-small {
          max-width: 450px !important;
      }
      
      .swal-small .swal2-html {
          text-align: left;
      }
      
      .swal-small .error-list {
          max-height: 150px;
          overflow-y: auto;
          border: 1px solid #dee2e6;
          border-radius: 0.375rem;
          padding: 0.25rem;
          background-color: #f8f9fa;
      }
      
      .swal-small .error-list::-webkit-scrollbar {
          width: 4px;
      }
      
      .swal-small .error-list::-webkit-scrollbar-track {
          background: #f1f1f1;
          border-radius: 2px;
      }
      
      .swal-small .error-list::-webkit-scrollbar-thumb {
          background: #6c757d;
          border-radius: 2px;
      }
      
      .swal-small .error-list::-webkit-scrollbar-thumb:hover {
          background: #495057;
      }
      
      .swal-small .bg-light {
          background-color: #f8f9fa !important;
      }
      
      .swal-small .text-start {
          text-align: left !important;
      }
      
      .swal-small .small {
          font-size: 0.8rem !important;
      }
      
             /* Ensure consistent sizing for summary boxes */
       .swal-small .alert {
           margin-bottom: 0.25rem;
           padding: 0.25rem 0.5rem;
           border-radius: 0.25rem;
           font-size: 0.8rem;
       }
</style> 

@section Scripts {
    <script>
        // Pagination configuration
        const PAGE_SIZE = 10; // Number of tutors per page
        let currentPage = 1;
        let totalPages = 1;
        let allTutors = []; // Store all tutors for pagination
        
        // Initialize when document is ready
        document.addEventListener('DOMContentLoaded', function() {
            // Restore pagination state from localStorage
            restorePaginationState();
            initializePagination();
        });
        
        // Save pagination state to localStorage
        function savePaginationState() {
            localStorage.setItem('tutor_currentPage', currentPage.toString());
            localStorage.setItem('tutor_totalPages', totalPages.toString());
        }
        
        // Restore pagination state from localStorage
        function restorePaginationState() {
            const savedPage = localStorage.getItem('tutor_currentPage');
            const savedTotalPages = localStorage.getItem('tutor_totalPages');
            
            if (savedPage && savedTotalPages) {
                const page = parseInt(savedPage);
                const total = parseInt(savedTotalPages);
                
                // Only restore if the saved page is valid
                if (page >= 1 && page <= total) {
                    currentPage = page;
                }
            }
        }
        
        // Initialize pagination
        function initializePagination() {
            // Get all tutor rows
            const tutorRows = document.querySelectorAll('.tutor-row');
            if (tutorRows.length === 0) return;
            
            // Store all tutors data
            allTutors = Array.from(tutorRows).map(row => {
                return {
                    element: row,
                    id: row.querySelector('.tutor-checkbox').value,
                    firstName: row.cells[1].textContent,
                    lastName: row.cells[2].textContent,
                    email: row.cells[3].textContent,
                    status: row.cells[4].textContent,
                    actions: row.cells[5].innerHTML
                };
            });
            
            // Calculate total pages
            totalPages = Math.ceil(allTutors.length / PAGE_SIZE);
            
            // Save pagination state
            savePaginationState();
            
            // Only show pagination if there are more than 12 tutors
            if (allTutors.length > 12) {
                document.getElementById('paginationContainer').style.display = 'flex';
                document.getElementById('paginationContainer').classList.add('border-top');
                displayCurrentPage();
                addPaginationControls();
            } else {
                // If 12 or fewer tutors, hide pagination and show all results
                document.getElementById('paginationContainer').style.display = 'none';
                document.getElementById('paginationContainer').classList.remove('border-top');
                // Show all rows
                allTutors.forEach(tutor => {
                    tutor.element.style.display = '';
                });
            }
        }
        
        // Display current page
        function displayCurrentPage() {
            const startIndex = (currentPage - 1) * PAGE_SIZE;
            const endIndex = startIndex + PAGE_SIZE;
            const pageTutors = allTutors.slice(startIndex, endIndex);
            
            // Hide all rows first
            allTutors.forEach(tutor => {
                tutor.element.style.display = 'none';
            });
            
            // Show only current page rows
            pageTutors.forEach(tutor => {
                tutor.element.style.display = '';
            });
            
            // Update pagination info
            updatePaginationInfo(startIndex, endIndex);
        }
        
        // Update pagination info
        function updatePaginationInfo(startIndex, endIndex) {
            const infoElement = document.getElementById('paginationInfo');
            infoElement.textContent = `Showing ${startIndex + 1} to ${Math.min(endIndex, allTutors.length)} of ${allTutors.length} results`;
        }
        
                 // Add pagination controls
         function addPaginationControls() {
             const controlsContainer = document.getElementById('paginationControls');
             
             if (totalPages <= 1) {
                 // If only one page, show simple info without navigation
                 controlsContainer.innerHTML = '';
                 return;
             }
             
                         controlsContainer.innerHTML = `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="javascript:void(0)" onclick="changePage(${currentPage - 1})" ${currentPage === 1 ? 'tabindex="-1"' : ''}>
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </li>
                ${generatePageNumbers()}
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="javascript:void(0)" onclick="changePage(${currentPage + 1})" ${currentPage === totalPages ? 'tabindex="-1"' : ''}>
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            `;
         }
        
        // Generate page numbers
        function generatePageNumbers() {
            let pages = [];
            const maxVisiblePages = 5;
            
            if (totalPages <= maxVisiblePages) {
                // Show all page numbers if total pages is small
                for (let i = 1; i <= totalPages; i++) {
                    pages.push(i);
                }
            } else {
                // Show partial page numbers for large page counts
                if (currentPage <= 3) {
                    // Current page is in first few pages
                    for (let i = 1; i <= 4; i++) {
                        pages.push(i);
                    }
                    pages.push('...');
                    pages.push(totalPages);
                } else if (currentPage >= totalPages - 2) {
                    // Current page is in last few pages
                    pages.push(1);
                    pages.push('...');
                    for (let i = totalPages - 3; i <= totalPages; i++) {
                        pages.push(i);
                    }
                } else {
                    // Current page is in middle
                    pages.push(1);
                    pages.push('...');
                    for (let i = currentPage - 1; i <= currentPage + 1; i++) {
                        pages.push(i);
                    }
                    pages.push('...');
                    pages.push(totalPages);
                }
            }
            
            return pages.map(page => {
                if (page === '...') {
                    return '<li class="page-item disabled"><span class="page-link">...</span></li>';
                } else {
                    return `<li class="page-item ${page === currentPage ? 'active' : ''}">
                                <a class="page-link" href="javascript:void(0)" onclick="changePage(${page})">${page}</a>
                            </li>`;
                }
            }).join('');
        }
        
        // Change page
        function changePage(page) {
            if (page < 1 || page > totalPages) return;
            
            currentPage = page;
            // Save current page to localStorage
            localStorage.setItem('tutor_currentPage', currentPage.toString());
            displayCurrentPage();
            addPaginationControls();
            
            // Remove automatic scrolling to prevent page jumping
            // Users can manually scroll if needed
        }
        
        // Update batch actions to work with pagination
        function updateBatchActions() {
            const checkboxes = document.querySelectorAll('.tutor-checkbox:checked');
            const batchActions = document.getElementById('batchActions');
            
            if (checkboxes.length > 0) {
                batchActions.style.display = 'block';
            } else {
                batchActions.style.display = 'none';
            }
        }
        
        // Select all tutors (current page only)
        function selectAllTutors() {
            const visibleCheckboxes = document.querySelectorAll('.tutor-row:not([style*="display: none"]) .tutor-checkbox');
            visibleCheckboxes.forEach(checkbox => {
                checkbox.checked = true;
            });
            updateBatchActions();
        }
        
        // Deselect all tutors
        function deselectAllTutors() {
            const allCheckboxes = document.querySelectorAll('.tutor-checkbox');
            allCheckboxes.forEach(checkbox => {
                checkbox.checked = false;
            });
            updateBatchActions();
        }
        
        // Toggle select all checkbox
        function toggleSelectAll(checkbox) {
            const visibleCheckboxes = document.querySelectorAll('.tutor-row:not([style*="display: none"]) .tutor-checkbox');
            visibleCheckboxes.forEach(cb => {
                cb.checked = checkbox.checked;
            });
            updateBatchActions();
        }
        
        // Update tutor data in the current view without refreshing
        function updateTutorInView(tutorId, updatedData) {
            // Find the tutor row in the current view
            const tutorRow = document.querySelector(`.tutor-row[data-tutor-id="${tutorId}"]`);
            if (!tutorRow) return;
            
            // Update the displayed data
            if (updatedData.firstName !== undefined) {
                tutorRow.cells[1].textContent = updatedData.firstName || "";
            }
            if (updatedData.lastName !== undefined) {
                tutorRow.cells[2].textContent = updatedData.lastName || "";
            }
            if (updatedData.email) {
                tutorRow.cells[3].textContent = updatedData.email;
            }
            
            // Update the stored data in allTutors array
            const tutorIndex = allTutors.findIndex(t => t.id === tutorId);
            if (tutorIndex !== -1) {
                allTutors[tutorIndex].firstName = updatedData.firstName;
                allTutors[tutorIndex].lastName = updatedData.lastName;
                allTutors[tutorIndex].email = updatedData.email;
            }
            
            // Show a subtle highlight effect
            tutorRow.style.backgroundColor = '#d4edda';
            setTimeout(() => {
                tutorRow.style.backgroundColor = '';
            }, 2000);
        }
    </script>
} 