@model IEnumerable<LOTA.Model.ApplicationUser>
@{
    ViewData["Title"] = "Tutor Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold text-dark mb-0">Manage Tutors</h2>
        <div class="d-flex gap-2">
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addTutorModal">
                <i class="fas fa-plus me-2"></i>
                Add Tutor
            </button>
            <button class="btn btn-outline-success" data-bs-toggle="modal" data-bs-target="#uploadExcelModal">
                <i class="fas fa-file-excel me-2"></i>
                Upload Excel
            </button>
        </div>
    </div>

    <!-- Tutor Table -->
    <div class="card border-0 shadow-sm">
        <div class="card-header bg-white border-0 py-3">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-users text-primary me-2"></i>
                        Tutor List
                        @if (Model != null && Model.Any())
                        {
                            <span class="badge bg-primary ms-2">@Model.Count()</span>
                        }
                    </h5>
                </div>
                <div class="col-md-6">
                    <div class="d-flex justify-content-md-end gap-2">
                        <div class="input-group input-group-sm" style="max-width: 300px;">
                            <span class="input-group-text bg-light border-end-0">
                                <i class="fas fa-search text-muted"></i>
                            </span>
                            <input type="text" class="form-control border-start-0" id="searchInput" placeholder="Search tutors...">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0 responsive-table">
                    <thead class="table-light">
                        <tr>
                            <th class="border-0 text-nowrap">ID</th>
                            <th class="border-0 text-nowrap">First Name</th>
                            <th class="border-0 text-nowrap">Last Name</th>
                            <th class="border-0 text-nowrap">Tutor No</th>
                            <th class="border-0 text-nowrap d-none d-lg-table-cell">Email</th>
                            <th class="border-0 text-nowrap d-none d-md-table-cell">Status</th>
                            <th class="border-0 text-nowrap d-none d-xl-table-cell">Assigned Courses</th>
                            <th class="border-0 text-nowrap">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Any())
                        {
                            int rowNumber = 1;
                            foreach (var tutor in Model)
                            {
                                <tr>
                                    <td class="text-nowrap">@rowNumber</td>
                                    <td class="text-nowrap">@(tutor.FirstName ?? "N/A")</td>
                                    <td class="text-nowrap">@(tutor.LastName ?? "N/A")</td>
                                    <td class="text-nowrap">@(tutor.TutorNo ?? "N/A")</td>
                                    <td class="text-nowrap d-none d-lg-table-cell">@(tutor.Email ?? "N/A")</td>
                                    <td class="text-nowrap d-none d-md-table-cell">
                                        @if (tutor.IsActive)
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inactive</span>
                                        }
                                    </td>
                                    <td class="d-none d-xl-table-cell">
                                        <div class="course-badges">
                                            <span class="text-muted small">Courses feature coming soon</span>
                                        </div>
                                    </td>
                                    <td class="text-nowrap">
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-success btn-sm" title="Edit" onclick="editTutor('@tutor.Id')">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-danger btn-sm" title="Delete" onclick="deleteTutor('@tutor.Id')">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                rowNumber++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center py-4">
                                    <div class="text-muted">
                                        <i class="fas fa-users fa-2x mb-3"></i>
                                        <p class="mb-0">No tutors found</p>
                                        <small>Click "Add Tutor" to create the first tutor</small>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add Tutor Modal -->
<div class="modal fade" id="addTutorModal" tabindex="-1" aria-labelledby="addTutorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="addTutorModalLabel">
                    <i class="fas fa-user-plus me-2"></i>
                    Add Tutor
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addTutorForm">
                    <div class="row g-3">
                        <div class="col-12 col-md-6">
                            <label for="firstName" class="form-label">First Name</label>
                            <input type="text" class="form-control" id="firstName" name="firstName" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="lastName" class="form-label">Last Name</label>
                            <input type="text" class="form-control" id="lastName" name="lastName" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="tutorNo" class="form-label">Tutor No</label>
                            <input type="text" class="form-control" id="tutorNo" name="tutorNo" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="email" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="password" name="password" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                        </div>
                        <div class="col-12">
                            <label for="courseSelect" class="form-label">Assigned Courses</label>
                            <select class="form-select" id="courseSelect">
                                <option value="">Select Course</option>
                                <option value="1">Programming Fundamentals</option>
                                <option value="2">Web Development</option>
                                <option value="3">Database Systems</option>
                                <option value="4">Software Engineering</option>
                                <option value="5">Computer Networks</option>
                                <option value="6">Cybersecurity</option>
                                <option value="7">Artificial Intelligence</option>
                                <option value="8">Data Science</option>
                            </select>
                            <div class="form-text">Select courses one by one</div>
                            
                            <!-- Selected Courses Display -->
                            <div id="selectedCoursesContainer" class="mt-3" style="display: none;">
                                <label class="form-label">Selected Courses:</label>
                                <div id="selectedCoursesList" class="d-flex flex-wrap gap-2">
                                    <!-- Selected courses will be displayed here -->
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer flex-column flex-sm-row gap-2">
                <button type="button" class="btn btn-secondary w-100 w-sm-auto" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success w-100 w-sm-auto" onclick="saveTutor()">
                    <i class="fas fa-save me-2"></i>
                    Add
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Upload Excel Modal -->
<div class="modal fade" id="uploadExcelModal" tabindex="-1" aria-labelledby="uploadExcelModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadExcelModalLabel">
                    <i class="fas fa-file-excel me-2"></i>
                    Upload Excel File
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="excelFile" class="form-label">Select Excel File</label>
                    <input type="file" class="form-control" id="excelFile" accept=".xlsx,.xls" required>
                    <div class="form-text">Supported formats: .xlsx, .xls</div>
                </div>
                <div class="alert alert-info">
                    <h6 class="alert-heading">
                        <i class="fas fa-info-circle me-2"></i>
                        Excel File Format Requirements
                    </h6>
                    <p class="mb-0">Your Excel file should contain the following columns:</p>
                    <ul class="mb-0 mt-2">
                        <li>First Name</li>
                        <li>Last Name</li>
                        <li>Tutor No</li>
                        <li>Email</li>
                        <li>Password</li>
                        <li>Assigned Courses (comma-separated)</li>
                    </ul>
                </div>
                <div class="mb-3">
                    <a href="#" class="btn btn-outline-primary btn-sm">
                        <i class="fas fa-download me-2"></i>
                        Download Template
                    </a>
                </div>
            </div>
            <div class="modal-footer flex-column flex-sm-row gap-2">
                <button type="button" class="btn btn-secondary w-100 w-sm-auto" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success w-100 w-sm-auto">
                    <i class="fas fa-upload me-2"></i>
                    Upload & Import
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    // Global variable to store selected courses
    let selectedCourses = [];
    
    // Course mapping
    const courseMapping = {
        '1': 'Programming Fundamentals',
        '2': 'Web Development',
        '3': 'Database Systems',
        '4': 'Software Engineering',
        '5': 'Computer Networks',
        '6': 'Cybersecurity',
        '7': 'Artificial Intelligence',
        '8': 'Data Science'
    };
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
        const courseSelect = document.getElementById('courseSelect');
        if (courseSelect) {
            courseSelect.addEventListener('change', handleCourseSelection);
        }
        
        const addTutorModal = document.getElementById('addTutorModal');
        if (addTutorModal) {
            addTutorModal.addEventListener('hidden.bs.modal', function() {
                // Reset selected courses
                selectedCourses = [];
                updateSelectedCoursesDisplay();
                
                // Reset dropdown
                if (courseSelect) {
                    courseSelect.value = '';
                }
            });
        }
        
                 // Search functionality
         const searchInput = document.getElementById('searchInput');
         if (searchInput) {
             searchInput.addEventListener('input', function() {
                 filterTable(this.value);
             });
         }
         
         // Initialize Bootstrap tooltips
         const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
         const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
             return new bootstrap.Tooltip(tooltipTriggerEl);
         });
     });
     
     // Table search filter function
     function filterTable(searchTerm) {
         const table = document.querySelector('.responsive-table');
         const rows = table.querySelectorAll('tbody tr');
         
         searchTerm = searchTerm.toLowerCase();
         
         rows.forEach(row => {
             const text = row.textContent.toLowerCase();
             if (text.includes(searchTerm)) {
                 row.style.display = '';
             } else {
                 row.style.display = 'none';
             }
         });
     }
    
    function handleCourseSelection() {
        const courseSelect = document.getElementById('courseSelect');
        const selectedValue = courseSelect.value;
        
        if (selectedValue && !selectedCourses.includes(selectedValue)) {
            // Add course to selected list
            selectedCourses.push(selectedValue);
            updateSelectedCoursesDisplay();
            
            // Reset dropdown to default
            courseSelect.value = '';
        }
    }
    
    function updateSelectedCoursesDisplay() {
        const container = document.getElementById('selectedCoursesContainer');
        const list = document.getElementById('selectedCoursesList');
        
        if (selectedCourses.length > 0) {
            container.style.display = 'block';
            list.innerHTML = '';
            
            selectedCourses.forEach(courseId => {
                const courseName = courseMapping[courseId];
                const courseBadge = document.createElement('div');
                courseBadge.className = 'badge bg-success d-flex align-items-center gap-1';
                courseBadge.innerHTML = `
                    ${courseName}
                    <button type="button" class="btn-close btn-close-white btn-sm" 
                            onclick="removeCourse('${courseId}')" 
                            style="font-size: 0.5rem; margin-left: 4px;">
                    </button>
                `;
                list.appendChild(courseBadge);
            });
        } else {
            container.style.display = 'none';
        }
    }
    
    function removeCourse(courseId) {
        const index = selectedCourses.indexOf(courseId);
        if (index > -1) {
            selectedCourses.splice(index, 1);
            updateSelectedCoursesDisplay();
        }
    }
    
    function saveTutor() {
        // Get form data
        const formData = new FormData(document.getElementById('addTutorForm'));
        
        // Add selected courses to form data
        formData.append('assignedCourses', selectedCourses.join(','));
        
        // Validate password
        const password = document.getElementById('password').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        
        if (password !== confirmPassword) {
            alert('Passwords do not match!');
            return;
        }
        
        // Here you can add AJAX request to save data
        console.log('Saving tutor:', Object.fromEntries(formData));
        console.log('Selected courses:', selectedCourses);
        
        // Close modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('addTutorModal'));
        modal.hide();
        
        // Reset selected courses
        selectedCourses = [];
        updateSelectedCoursesDisplay();
        
        // Refresh page or update table
        location.reload();
    }
    
    function editTutor(tutorId) {
        // Edit Tutor logic
        console.log('Editing tutor:', tutorId);
        // TODO: Implement edit functionality
        // You can redirect to edit page or open edit modal
        // window.location.href = `/Admin/Tutor/Edit/${tutorId}`;
    }
    
    function deleteTutor(tutorId) {
        if (confirm('Are you sure you want to delete this tutor?')) {
            // Delete Tutor logic
            console.log('Deleting tutor:', tutorId);
            // TODO: Implement delete functionality
            // You can make AJAX call to delete endpoint
            // fetch(`/Admin/Tutor/Delete/${tutorId}`, { method: 'DELETE' })
            //     .then(response => {
            //         if (response.ok) {
            //             location.reload();
            //         }
            //     });
        }
    }
</script>

<style>
    /* Custom styles for the tutor management page */
    .table th {
        font-weight: 600;
        color: #495057;
        border-bottom: 2px solid #dee2e6;
    }
    
    .table td {
        vertical-align: middle;
        border-bottom: 1px solid #f8f9fa;
    }
    
    .table tbody tr:hover {
        background-color: #f8f9fa;
    }
    
    .btn-group .btn {
        margin-right: 2px;
    }
    
    .btn-group .btn:last-child {
        margin-right: 0;
    }
    
    /* Modal enhancements */
    .modal-header.bg-success {
        border-bottom: none;
    }
    
    .modal-title {
        color: white;
    }
    
    /* Form styling */
    .form-label {
        font-weight: 500;
        color: #495057;
    }
    
    .form-control:focus,
    .form-select:focus {
        border-color: #198754;
        box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
    }
    
    /* Modal layout fixes */
    .modal {
        z-index: 1060;
    }
    
    .modal-backdrop {
        z-index: 1055;
    }
    
    /* Ensure page layout remains stable when modal is open */
    body.modal-open {
        overflow: hidden;
        padding-right: 0 !important;
    }
    
    /* Badge styling */
    .badge {
        font-size: 0.875rem;
        padding: 0.5rem 0.75rem;
        border-radius: 20px;
    }
    
    .badge .btn-close {
        opacity: 0.8;
        transition: opacity 0.2s ease-in-out;
    }
    
    .badge .btn-close:hover {
        opacity: 1;
    }
    
         /* Responsive table styles */
     .responsive-table {
         min-width: 800px; /* Ensure table has minimum width */
     }
     
     .course-badges {
         max-width: 200px;
     }
     
     .course-badges .badge {
         font-size: 0.75rem;
         padding: 0.25rem 0.5rem;
     }
     
     /* Table scrollbar styles */
     .table-responsive::-webkit-scrollbar {
         height: 8px;
     }
     
     .table-responsive::-webkit-scrollbar-track {
         background: #f1f1f1;
         border-radius: 4px;
     }
     
     .table-responsive::-webkit-scrollbar-thumb {
         background: #c1c1c1;
         border-radius: 4px;
     }
     
     .table-responsive::-webkit-scrollbar-thumb:hover {
         background: #a8a8a8;
     }
     
     /* Responsive breakpoint optimization */
     @@media (max-width: 1200px) {
         .responsive-table {
             min-width: 700px;
         }
         
         .course-badges {
             max-width: 150px;
         }
     }
     
     @@media (max-width: 992px) {
         .responsive-table {
             min-width: 600px;
         }
         
         .table-responsive {
             font-size: 0.875rem;
         }
         
         .btn-group .btn {
             padding: 0.25rem 0.5rem;
             font-size: 0.75rem;
         }
     }
     
     @@media (max-width: 768px) {
         .responsive-table {
             min-width: 500px;
         }
         
         .table-responsive {
             font-size: 0.8rem;
         }
         
         .btn-group .btn {
             padding: 0.2rem 0.4rem;
             font-size: 0.7rem;
         }
         
         .d-flex.gap-2 {
             flex-direction: column;
             gap: 0.5rem !important;
         }
         
         .d-flex.gap-2 .btn {
             width: 100%;
         }
         
         /* Search box takes full width on small screens */
         .input-group {
             max-width: 100% !important;
         }
     }
     
     @@media (max-width: 576px) {
         .responsive-table {
             min-width: 400px;
         }
         
         .table-responsive {
             font-size: 0.75rem;
         }
         
         .btn-group .btn {
             padding: 0.15rem 0.3rem;
             font-size: 0.65rem;
         }
         
         .card-header .row {
             flex-direction: column;
             gap: 1rem;
         }
         
              .card-header .col-md-6 {
         width: 100%;
     }
     
     /* Empty state styling */
     .text-muted .fas {
         opacity: 0.5;
     }
     
     /* Tooltip styling */
     .tooltip-inner {
         max-width: 300px;
         text-align: left;
     }
     }
</style> 