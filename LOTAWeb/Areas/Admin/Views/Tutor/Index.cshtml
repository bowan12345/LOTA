@model IEnumerable<LOTA.Model.ApplicationUser>
@{
    ViewData["Title"] = "Tutor Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    // Add anti-forgery token for AJAX requests
    var token = Html.AntiForgeryToken();
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold text-dark mb-0">Manage Tutors</h2>
        <div class="d-flex gap-2">
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addTutorModal">
                <i class="fas fa-plus me-2"></i>
                Add Tutor
            </button>
            <button class="btn btn-outline-success" data-bs-toggle="modal" data-bs-target="#uploadExcelModal">
                <i class="fas fa-file-excel me-2"></i>
                Upload Excel
            </button>
        </div>
    </div>

    <!-- Tutor Table -->
    <div class="card border-0 shadow-sm">
        <div class="card-header bg-white border-0 py-3">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-users text-primary me-2"></i>
                        Tutor List
                        @if (Model != null && Model.Any())
                        {
                            <span class="badge bg-primary ms-2">@Model.Count()</span>
                        }
                    </h5>
                </div>
                <div class="col-md-6">
                    <div class="d-flex justify-content-md-end gap-2">
                        <div class="input-group input-group-sm" style="max-width: 300px;">
                            <span class="input-group-text bg-light border-end-0">
                                <i class="fas fa-search text-muted"></i>
                            </span>
                            <input type="text" class="form-control border-start-0" id="searchInput" placeholder="Search tutors...">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0 responsive-table">
                    <thead class="table-light">
                        <tr>
                            <th class="border-0 text-nowrap">First Name</th>
                            <th class="border-0 text-nowrap">Last Name</th>
                            <th class="border-0 text-nowrap d-none d-lg-table-cell">Email</th>
                            <th class="border-0 text-nowrap d-none d-md-table-cell">Password</th>
                            <th class="border-0 text-nowrap d-none d-md-table-cell">Status</th>
                            <th class="border-0 text-nowrap d-none d-xl-table-cell">Assigned Courses</th>
                            <th class="border-0 text-nowrap">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Any())
                        {
                            foreach (var tutor in Model)
                            {
                                <tr>
                                    <td class="text-nowrap">@(tutor.FirstName ?? "N/A")</td>
                                    <td class="text-nowrap">@(tutor.LastName ?? "N/A")</td>
                                    <td class="text-nowrap d-none d-lg-table-cell">@(tutor.Email ?? "N/A")</td>
                                    <td class="text-nowrap d-none d-md-table-cell">
                                        <span class="text-muted">••••••••</span>
                                    </td>
                                    <td class="text-nowrap d-none d-md-table-cell">
                                        @if (tutor.IsActive)
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inactive</span>
                                        }
                                    </td>
                                                                         <td class="d-none d-xl-table-cell">
                                         <div class="course-badges">
                                             @if (tutor.TutorCourse != null && tutor.TutorCourse.Any())
                                             {
                                                 foreach (var tutorCourse in tutor.TutorCourse.Take(3))
                                                 {
                                                     <span class="badge bg-primary me-1 mb-1">
                                                         @(tutorCourse.Course?.CourseCode ?? "N/A")
                                                     </span>
                                                 }
                                                 @if (tutor.TutorCourse.Count > 3)
                                                 {
                                                     <span class="badge bg-secondary me-1 mb-1">
                                                         +@(tutor.TutorCourse.Count - 3) more
                                                     </span>
                                                 }
                                             }
                                             else
                                             {
                                                 <span class="text-muted small">No courses assigned</span>
                                             }
                                         </div>
                                     </td>
                                    <td class="text-nowrap">
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-success btn-sm" title="Edit" onclick="editTutor('@tutor.Id')">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-danger btn-sm" title="Delete" onclick="deleteTutor('@tutor.Id')">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center py-4">
                                    <div class="text-muted">
                                        <i class="fas fa-users fa-2x mb-3"></i>
                                        <p class="mb-0">No tutors found</p>
                                        <small>Click "Add Tutor" to create the first tutor</small>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add Tutor Modal -->
<div class="modal fade" id="addTutorModal" tabindex="-1" aria-labelledby="addTutorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="addTutorModalLabel">
                    <i class="fas fa-user-plus me-2"></i>
                    Add Tutor
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addTutorForm">
                    <div class="row g-3">
                        <div class="col-12 col-md-6">
                            <label for="firstName" class="form-label">First Name</label>
                            <input type="text" class="form-control" id="firstName" name="firstName" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="lastName" class="form-label">Last Name</label>
                            <input type="text" class="form-control" id="lastName" name="lastName" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="email" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="password" name="password" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                        </div>
                        <div class="col-12">
                            <label for="assignedCourses" class="form-label">Assigned Courses</label>
                            <select class="form-select" id="courseSelect" multiple size="6">
                                <option value="" disabled>Loading courses...</option>
                            </select>
                            <div class="form-text">
                                <i class="fas fa-info-circle me-1"></i>
                                Hold Ctrl (or Cmd on Mac) to select multiple courses
                            </div>
                        </div>
                    </div>
                </form>
                <div class="row g-3">
                    <div class="col-12">
                        <div class="d-flex justify-content-end gap-2 mt-4">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" onclick="saveTutor()">
                                <i class="fas fa-save me-2"></i>
                                Add
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Tutor Modal -->
<div class="modal fade" id="editTutorModal" tabindex="-1" aria-labelledby="editTutorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="editTutorModalLabel">
                    <i class="fas fa-user-edit me-2"></i>
                    Edit Tutor
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editTutorForm">
                    <input type="hidden" id="editTutorId" name="tutorId">
                    <div class="row g-3">
                        <div class="col-12 col-md-6">
                            <label for="editFirstName" class="form-label">First Name</label>
                            <input type="text" class="form-control" id="editFirstName" name="firstName" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editLastName" class="form-label">Last Name</label>
                            <input type="text" class="form-control" id="editLastName" name="lastName" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editEmail" class="form-label">Email</label>
                            <input type="email" class="form-control" id="editEmail" name="email" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editPassword" class="form-label">Password</label>
                            <input type="password" class="form-control" id="editPassword" name="password" placeholder="Leave blank to keep current password">
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editConfirmPassword" class="form-label">Confirm Password</label>
                            <input type="password" class="form-control" id="editConfirmPassword" name="confirmPassword" placeholder="Leave blank to keep current password">
                        </div>
                        <div class="col-12">
                            <label for="editCourseSelect" class="form-label">Assigned Courses</label>
                            <select class="form-select" id="editCourseSelect" multiple size="6">
                                <option value="" disabled>Loading courses...</option>
                            </select>
                            <div class="form-text">
                                <i class="fas fa-info-circle me-1"></i>
                                Hold Ctrl (or Cmd on Mac) to select multiple courses
                            </div>
                        </div>
                    </div>
                </form>
                <div class="row g-3">
                    <div class="col-12">
                        <div class="d-flex justify-content-end gap-2 mt-4">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" onclick="updateTutor()">
                                <i class="fas fa-save me-2"></i>
                                Update
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Upload Excel Modal -->
<div class="modal fade" id="uploadExcelModal" tabindex="-1" aria-labelledby="uploadExcelModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadExcelModalLabel">
                    <i class="fas fa-file-excel me-2"></i>
                    Upload Excel File
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="excelFile" class="form-label">Select Excel File</label>
                    <input type="file" class="form-control" id="excelFile" accept=".xlsx,.xls" required>
                    <div class="form-text">Supported formats: .xlsx, .xls</div>
                </div>
                <div class="alert alert-info">
                    <h6 class="alert-heading">
                        <i class="fas fa-info-circle me-2"></i>
                        Excel File Format Requirements
                    </h6>
                    <p class="mb-0">Your Excel file should contain the following columns:</p>
                    <ul class="mb-0 mt-2">
                        <li>First Name</li>
                        <li>Last Name</li>
                        <li>Tutor No</li>
                        <li>Email</li>
                        <li>Password</li>
                        <li>Assigned Courses (comma-separated)</li>
                    </ul>
                </div>
                <div class="mb-3">
                    <a href="#" class="btn btn-outline-primary btn-sm">
                        <i class="fas fa-download me-2"></i>
                        Download Template
                    </a>
                </div>
            </div>
            <div class="modal-footer flex-column flex-sm-row gap-2">
                <button type="button" class="btn btn-secondary w-100 w-sm-auto" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success w-100 w-sm-auto">
                    <i class="fas fa-upload me-2"></i>
                    Upload & Import
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    // Global variable to store selected courses
    let selectedCourses = [];
    let editSelectedCourses = [];

    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
        // Load courses for both modals
        loadCourses();
        
        // Modal event listeners
        const addTutorModal = document.getElementById('addTutorModal');
        if (addTutorModal) {
            addTutorModal.addEventListener('hidden.bs.modal', function() {
                // Reset selected courses
                selectedCourses = [];
                document.getElementById('courseSelect').selectedIndex = -1;
            });
        }
        
        // Edit Tutor Modal event listeners
        const editTutorModal = document.getElementById('editTutorModal');
        if (editTutorModal) {
            editTutorModal.addEventListener('hidden.bs.modal', function() {
                // Reset selected courses
                editSelectedCourses = [];
                document.getElementById('editCourseSelect').selectedIndex = -1;
            });
        }
        
        // Search functionality
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                filterTable(this.value);
            });
        }
        
        // Initialize Bootstrap tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });

    // Load courses from backend
    function loadCourses() {
        fetch('/Admin/Course/SearchCourses?courseSearchItem=')
            .then(response => response.json())
            .then(data => {
                if (data.success && data.data) {
                    populateCourseSelects(data.data);
                }
            })
            .catch(error => {
                console.error('Error loading courses:', error);
            });
    }

    // Populate course selects
    function populateCourseSelects(courses) {
        const courseSelect = document.getElementById('courseSelect');
        const editCourseSelect = document.getElementById('editCourseSelect');
        
        // Clear existing options
        courseSelect.innerHTML = '';
        editCourseSelect.innerHTML = '';
        
        // Add default option
        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = '-- Select courses --';
        defaultOption.disabled = true;
        defaultOption.selected = true;
        
        courseSelect.appendChild(defaultOption.cloneNode(true));
        editCourseSelect.appendChild(defaultOption);
        
        // Add course options
        courses.forEach(course => {
            const option = document.createElement('option');
            option.value = course.id || course.Id;
            option.textContent = `${course.courseName || course.CourseName} (${course.courseCode || course.CourseCode})`;
            
            courseSelect.appendChild(option.cloneNode(true));
            editCourseSelect.appendChild(option);
        });
        
        console.log(`Loaded ${courses.length} courses into dropdowns`);
    }

    // Table search filter function
    function filterTable(searchTerm) {
        const table = document.querySelector('.responsive-table');
        const rows = table.querySelectorAll('tbody tr');
        
        searchTerm = searchTerm.toLowerCase();
        
        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            if (text.includes(searchTerm)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }

    // Get selected courses from select element
    function getSelectedCourses(selectElement) {
        const selected = [];
        for (let i = 0; i < selectElement.options.length; i++) {
            if (selectElement.options[i].selected) {
                selected.push(selectElement.options[i].value);
            }
        }
        return selected;
    }

    function saveTutor() {
        // Get form data
        const firstName = document.getElementById('firstName').value;
        const lastName = document.getElementById('lastName').value;
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        
        // Get selected courses
        const courseSelect = document.getElementById('courseSelect');
        const selectedCourseIds = getSelectedCourses(courseSelect);
        
        // Validate required fields
        if (!firstName || !lastName || !email || !password) {
            alert('Please fill in all required fields!');
            return;
        }
        
        // Validate password
        if (password !== confirmPassword) {
            alert('Passwords do not match!');
            return;
        }
        
        // Validate password length
        if (password.length < 6) {
            alert('Password must be at least 6 characters long!');
            return;
        }
        
        // Create request data
        const requestData = {
            firstName: firstName,
            lastName: lastName,
            email: email,
            password: password,
            assignedCourses: selectedCourseIds
        };
        
        // Show loading state
        const saveButton = document.querySelector('#addTutorModal .btn-success');
        const originalText = saveButton.innerHTML;
        saveButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';
        saveButton.disabled = true;
        
        // Get anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        const tokenValue = token ? token.value : '';
        
        // Send AJAX request to backend
        fetch('/Admin/Tutor/Create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': tokenValue
            },
            body: JSON.stringify(requestData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                alert('Tutor created successfully!');
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addTutorModal'));
                modal.hide();
                
                // Reset form
                document.getElementById('addTutorForm').reset();
                document.getElementById('courseSelect').selectedIndex = -1;
                
                // Refresh page to show new tutor
                location.reload();
            } else {
                // Show error message
                alert('Error: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error creating tutor:', error);
            alert('An error occurred while creating the tutor. Please try again.');
        })
        .finally(() => {
            // Reset button state
            saveButton.innerHTML = originalText;
            saveButton.disabled = false;
        });
    }

    function editTutor(tutorId) {
        // Load tutor data and open edit modal
        console.log('Editing tutor:', tutorId);
        
        // TODO: Load tutor data from backend
        // For now, we'll just open the modal with the tutor ID
        document.getElementById('editTutorId').value = tutorId;
        
        // Open the edit modal
        const editModal = new bootstrap.Modal(document.getElementById('editTutorModal'));
        editModal.show();
    }

    function updateTutor() {
        // Get form data
        const formData = new FormData(document.getElementById('editTutorForm'));
        
        // Get selected courses
        const editCourseSelect = document.getElementById('editCourseSelect');
        const selectedCourseIds = getSelectedCourses(editCourseSelect);
        formData.append('assignedCourses', selectedCourseIds.join(','));
        
        // Validate password if provided
        const password = document.getElementById('editPassword').value;
        const confirmPassword = document.getElementById('editConfirmPassword').value;
        
        if (password && password !== confirmPassword) {
            alert('Passwords do not match!');
            return;
        }
        
        // Here you can add AJAX request to update data
        console.log('Updating tutor:', Object.fromEntries(formData));
        console.log('Selected courses:', selectedCourseIds);
        
        // Close modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('editTutorModal'));
        modal.hide();
        
        // Refresh page or update table
        location.reload();
    }

    function deleteTutor(tutorId) {
        if (confirm('Are you sure you want to delete this tutor?')) {
            // Delete Tutor logic
            console.log('Deleting tutor:', tutorId);
            // TODO: Implement delete functionality
            // You can make AJAX call to delete endpoint
            // fetch(`/Admin/Tutor/Delete/${tutorId}`, { method: 'DELETE' })
            //     .then(response => {
            //         if (response.ok) {
            //             location.reload();
            //         }
            //     });
        }
    }
</script>

<style>
    /* Custom styles for the tutor management page */
    .table th {
        font-weight: 600;
        color: #495057;
        border-bottom: 2px solid #dee2e6;
    }
    
    .table td {
        vertical-align: middle;
        border-bottom: 1px solid #f8f9fa;
    }
    
    .table tbody tr:hover {
        background-color: #f8f9fa;
    }
    
    .btn-group .btn {
        margin-right: 2px;
    }
    
    .btn-group .btn:last-child {
        margin-right: 0;
    }
    
    /* Modal enhancements */
    .modal-header.bg-success {
        border-bottom: none;
    }
    
    .modal-title {
        color: white;
    }
    
    /* Form styling */
    .form-label {
        font-weight: 500;
        color: #495057;
    }
    
    .form-control:focus,
    .form-select:focus {
        border-color: #198754;
        box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
    }
    
    /* Modal layout fixes */
    .modal {
        z-index: 1060;
    }
    
    .modal-backdrop {
        z-index: 1055;
    }
    
    /* Ensure page layout remains stable when modal is open */
    body.modal-open {
        overflow: hidden;
        padding-right: 0 !important;
    }
    
    /* Badge styling */
    .badge {
        font-size: 0.875rem;
        padding: 0.5rem 0.75rem;
        border-radius: 20px;
    }
    
    /* Responsive table styles */
    .responsive-table {
        min-width: 800px; /* Ensure table has minimum width */
    }
    
    .course-badges {
        max-width: 200px;
    }
    
    .course-badges .badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
    }
    
    /* Table scrollbar styles */
    .table-responsive::-webkit-scrollbar {
        height: 8px;
    }
    
    .table-responsive::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }
    
    .table-responsive::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 4px;
    }
    
    .table-responsive::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }
    
         /* Responsive breakpoint optimization */
     @@media (max-width: 1200px) {
         .responsive-table {
             min-width: 700px;
         }
         
         .course-badges {
             max-width: 150px;
         }
     }
     
     @@media (max-width: 992px) {
         .responsive-table {
             min-width: 600px;
         }
         
         .table-responsive {
             font-size: 0.875rem;
         }
         
         .btn-group .btn {
             padding: 0.25rem 0.5rem;
             font-size: 0.75rem;
         }
     }
     
     @@media (max-width: 768px) {
         .responsive-table {
             min-width: 500px;
         }
         
         .table-responsive {
             font-size: 0.8rem;
         }
         
         .btn-group .btn {
             padding: 0.2rem 0.4rem;
             font-size: 0.7rem;
         }
         
         .d-flex.gap-2 {
             flex-direction: column;
             gap: 0.5rem !important;
         }
         
         .d-flex.gap-2 .btn {
             width: 100%;
         }
         
         /* Search box takes full width on small screens */
         .input-group {
             max-width: 100% !important;
         }
     }
     
     @@media (max-width: 576px) {
         .responsive-table {
             min-width: 400px;
         }
         
         .table-responsive {
             font-size: 0.75rem;
         }
         
         .btn-group .btn {
             padding: 0.15rem 0.3rem;
             font-size: 0.65rem;
         }
         
         .card-header .row {
             flex-direction: column;
             gap: 1rem;
         }
         
         .card-header .col-md-6 {
             width: 100%;
         }
     }
    
    /* Empty state styling */
    .text-muted .fas {
        opacity: 0.5;
    }
    
         /* Tooltip styling */
     .tooltip-inner {
         max-width: 300px;
         text-align: left;
     }
     
     /* Enhanced dropdown styling */
     .form-select[multiple] {
         border: 1px solid #ced4da;
         border-radius: 0.375rem;
         padding: 0.5rem;
         background-color: #fff;
         transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
     }
     
     .form-select[multiple]:focus {
         border-color: #198754;
         box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
         outline: 0;
     }
     
     .form-select[multiple] option {
         padding: 0.5rem;
         border-bottom: 1px solid #f8f9fa;
     }
     
     .form-select[multiple] option:checked {
         background-color: #198754;
         color: white;
     }
     
     .form-select[multiple] option:hover {
         background-color: #f8f9fa;
     }
     
     .form-text {
         font-size: 0.875rem;
         color: #6c757d;
         margin-top: 0.25rem;
     }
</style> 