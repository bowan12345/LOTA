@model IEnumerable<LOTA.Model.DTO.Admin.StudentReturnDTO>
@{
    ViewData["Title"] = "Student Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    // Add anti-forgery token for AJAX requests
    var token = Html.AntiForgeryToken();
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold text-dark mb-0">Manage Students</h2>
        <div class="d-flex gap-2">
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addStudentModal">
                <i class="fas fa-plus me-2"></i>
                Add Student
            </button>
            <button class="btn btn-outline-success" data-bs-toggle="modal" data-bs-target="#uploadExcelModal">
                <i class="fas fa-file-excel me-2"></i>
                Upload Excel
            </button>
        </div>
    </div>

    <!-- Student Table -->
    <div class="card border-0 shadow-sm">
        <div class="card-header bg-white border-0 py-3">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-users text-primary me-2"></i>
                        Student List
                        @if (Model != null && Model.Any())
                        {
                            <span class="badge bg-primary ms-2">@Model.Count()</span>
                        }
                        @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
                        {
                            <span class="badge bg-info ms-2">
                                <i class="fas fa-search me-1"></i>
                                "@ViewBag.SearchTerm"
                            </span>
                        }
                    </h5>
                </div>
                <div class="col-md-6">
                    <div class="d-flex justify-content-md-end gap-2">
                        <form method="get" action="@Url.Action("Index", "Student", new { area = "Admin" })" class="d-flex" style="max-width: 300px;">
                            <div class="input-group input-group-sm">
                                <span class="input-group-text bg-light border-end-0">
                                    <i class="fas fa-search text-muted"></i>
                                </span>
                                <input type="text" class="form-control border-start-0" name="searchTerm" id="searchInput" 
                                       placeholder="ID, name or email..." value="@ViewBag.SearchTerm">
                                <button type="submit" class="btn btn-outline-secondary border-start-0" title="Search">
                                    <i class="fas fa-search"></i>
                                </button>
                                @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
                                {
                                    <a href="@Url.Action("Index", "Student", new { area = "Admin" })" 
                                       class="btn btn-outline-danger border-start-0" title="Clear Search">
                                        <i class="fas fa-times"></i>
                                    </a>
                                }
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Batch Actions -->
        <div class="card-body border-bottom py-2" id="batchActions" style="display: none;">
            <div class="d-flex align-items-center gap-3">
                <button type="button" class="btn btn-outline-primary btn-sm" onclick="selectAllStudents()">
                    <i class="fas fa-check-square me-1"></i>Select All
                </button>
                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="deselectAllStudents()">
                    <i class="fas fa-square me-1"></i>Deselect All
                </button>
                <div class="vr"></div>
                <button type="button" class="btn btn-danger btn-sm" onclick="deleteSelectedStudents()">
                    <i class="fas fa-trash me-1"></i>Delete Selected
                </button>
            </div>
        </div>
        
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0 responsive-table">
                    <thead class="table-light">
                        <tr>
                            <th class="border-0 text-nowrap" style="width: 40px;">
                                <input type="checkbox" class="form-check-input" id="selectAllCheckbox" onchange="toggleSelectAll(this)">
                            </th>
                            <th class="border-0 text-nowrap">Student ID</th>
                            <th class="border-0 text-nowrap d-none d-md-table-cell">Surname</th>
                            <th class="border-0 text-nowrap d-none d-md-table-cell">FirstName</th>
                            <th class="border-0 text-nowrap d-none d-lg-table-cell">Email</th>
                            <th class="border-0 text-nowrap">Password</th>
                            <th class="border-0 text-nowrap d-none d-md-table-cell">Status</th>
                            <th class="border-0 text-nowrap">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Any())
                        {
                            foreach (var student in Model)
                            {
                                <tr class="student-row">
                                    <td class="text-nowrap">
                                        <input type="checkbox" class="form-check-input student-checkbox" value="@student.Id" onchange="updateBatchActions()">
                                    </td>
                                    <td class="text-nowrap">@(student.StudentNo ?? "N/A")</td>
                                    <td class="text-nowrap d-none d-md-table-cell">@(student.LastName ?? "N/A")</td>
                                    <td class="text-nowrap d-none d-md-table-cell">@(student.FirstName ?? "N/A")</td>
                                    <td class="text-nowrap d-none d-lg-table-cell">@(student.Email ?? "N/A")</td>
                                    <td class="text-nowrap">
                                        <span class="text-muted">••••••••</span>
                                    </td>
                                    <td class="text-nowrap d-none d-md-table-cell">
                                        <span class="badge @(student.IsActive ? "bg-success" : "bg-secondary")">
                                            @(student.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </td>
                                    <td class="text-nowrap">
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-success btn-sm" title="Edit" onclick="editStudent('@student.Id')">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-danger btn-sm" title="Delete" onclick="deleteStudent('@student.Id')">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center py-4">
                                    <div class="text-muted">
                                        @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
                                        {
                                            <i class="fas fa-search fa-2x mb-3"></i>
                                            <p class="mb-0">No students found for "@ViewBag.SearchTerm"</p>
                                            <small>Try a different search term or <a href="@Url.Action("Index", "Student", new { area = "Admin" })" class="text-decoration-none">clear search</a></small>
                                        }
                                        else
                                        {
                                            <i class="fas fa-users fa-2x mb-3"></i>
                                            <p class="mb-0">No students found</p>
                                            <small>Click "Add Student" to create your first student</small>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                
                <!-- Pagination Controls -->
                <div id="paginationContainer" class="d-flex justify-content-between align-items-center p-3" style="display: none;">
                    <div class="text-muted small" id="paginationInfo">
                        <!-- Pagination info will be generated here -->
                    </div>
                    <nav aria-label="Student list pagination">
                        <ul class="pagination pagination-sm mb-0" id="paginationControls">
                            <!-- Pagination controls will be generated here -->
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Student Modal -->
<div class="modal fade" id="addStudentModal" tabindex="-1" aria-labelledby="addStudentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addStudentModalLabel">
                    <i class="fas fa-plus text-success me-2"></i>
                    Add New Student
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addStudentForm">
                <div class="modal-body">
                    @token
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="firstName" class="form-label">FirstName </label>
                            <input type="text" class="form-control" id="firstName" name="firstName" >
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="lastName" class="form-label">SurName </label>
                            <input type="text" class="form-control" id="lastName" name="lastName" >
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="email" class="form-label">Email <span class="text-danger">*</span></label>
                            <input type="email" class="form-control" id="email" name="email" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="studentNo" class="form-label">Student ID <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="studentNo" name="studentNo" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="password" class="form-label">Password <span class="text-danger">*</span></label>
                            <input type="password" class="form-control" id="password" name="password" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password <span class="text-danger">*</span></label>
                            <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                        </div>
                    </div>
                   @*  <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="isActive" name="isActive" checked>
                            <label class="form-check-label" for="isActive">
                                Active
                            </label>
                        </div>
                    </div> *@
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save me-2"></i>
                        Save Student
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Student Modal -->
<div class="modal fade" id="editStudentModal" tabindex="-1" aria-labelledby="editStudentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editStudentModalLabel">
                    <i class="fas fa-edit text-success me-2"></i>
                    Edit Student
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editStudentForm">
                <div class="modal-body">
                    @token
                    <input type="hidden" id="editStudentId" name="editStudentId">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="editFirstName" class="form-label">FirstName </label>
                            <input type="text" class="form-control" id="editFirstName" name="editFirstName" >
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="editLastName" class="form-label">SurName </label>
                            <input type="text" class="form-control" id="editLastName" name="editLastName" >
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="editEmail" class="form-label">Email <span class="text-danger">*</span></label>
                            <input type="email" class="form-control" id="editEmail" name="editEmail" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="editStudentNo" class="form-label">Student ID</label>
                            <input type="text" class="form-control" id="editStudentNo" name="editStudentNo" readonly>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="editPassword" class="form-label">New Password</label>
                            <input type="password" class="form-control" id="editPassword" name="editPassword" placeholder="Leave blank to keep current password">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="editConfirmPassword" class="form-label">Confirm New Password</label>
                            <input type="password" class="form-control" id="editConfirmPassword" name="editConfirmPassword" placeholder="Leave blank to keep current password">
                        </div>
                    </div>
                    @* <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="editIsActive" name="editIsActive">
                            <label class="form-check-label" for="editIsActive">
                                Active
                            </label>
                        </div>
                    </div> *@
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save me-2"></i>
                        Update Student
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Upload Excel Modal -->
<div class="modal fade" id="uploadExcelModal" tabindex="-1" aria-labelledby="uploadExcelModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadExcelModalLabel">
                    <i class="fas fa-file-excel text-success me-2"></i>
                    Upload Students from Excel
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="uploadExcelForm" enctype="multipart/form-data">
                <div class="modal-body">
                    @token
                    <div class="mb-3">
                        <label for="excelFile" class="form-label">Select Excel File</label>
                        <input type="file" class="form-control" id="excelFile" name="excelFile" accept=".xlsx,.xls" required>
                    </div>
                    <div class="alert alert-info">
                        <h6 class="alert-heading">Excel File Requirements:</h6>
                        <ul class="mb-0 mt-2">
                            <li><strong>FirstName</strong> (Optional)</li>
                            <li><strong>SurName</strong> (Optional)</li>
                            <li><strong>Email</strong> (Required)</li>
                            <li><strong>Student ID</strong> (Required)</li>
                        </ul>
                        <p class="mb-0 mt-2"><small><strong>Note:</strong> Password will be automatically generated as "Student123!"</small></p>
                    </div>
                    <div class="mb-3">
                        <a href="/Admin/Student/DownloadTemplate" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-download me-2"></i>
                            Download Template
                        </a>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-upload me-2"></i>
                        Upload Students
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/sweetalert-utils.js"></script>
    <script>
        // Pagination configuration
        const PAGE_SIZE = 10; // Number of students per page
        let currentPage = 1;
        let totalPages = 1;
        let allStudents = []; // Store all students for pagination

        // Form submission handlers
        document.getElementById('addStudentForm').addEventListener('submit', function(e) {
            e.preventDefault();
            saveStudent();
        });

        document.getElementById('editStudentForm').addEventListener('submit', function(e) {
            e.preventDefault();
            updateStudent();
        });

        document.getElementById('uploadExcelForm').addEventListener('submit', function(e) {
            e.preventDefault();
            console.log('Upload form submitted');
            uploadExcel();
        });

        // Initialize when document is ready
        document.addEventListener('DOMContentLoaded', function() {
            initializePagination();
        });

        // Initialize pagination
        function initializePagination() {
            console.log('Initializing pagination...');
            // Get all student rows
            const studentRows = document.querySelectorAll('.student-row');
            console.log('Found student rows:', studentRows.length);
            
            if (studentRows.length === 0) return;
            
            // Store all students data
            allStudents = Array.from(studentRows).map(row => {
                return {
                    element: row,
                    id: row.querySelector('.student-checkbox').value,
                    studentNo: row.cells[1].textContent,
                    lastName: row.cells[2].textContent,
                    firstName: row.cells[3].textContent,
                    email: row.cells[4].textContent,
                    password: row.cells[5].textContent,
                    status: row.cells[6].textContent,
                    actions: row.cells[7].innerHTML
                };
            });
            
            console.log('All students data:', allStudents.length);
            
            // Calculate total pages
            totalPages = Math.ceil(allStudents.length / PAGE_SIZE);
            console.log('Total pages:', totalPages);
            
            // Only show pagination if there are more than 12 students
            if (allStudents.length > 12) {
                console.log('Showing pagination for', allStudents.length, 'students');
                document.getElementById('paginationContainer').style.display = 'flex';
                document.getElementById('paginationContainer').classList.add('border-top');
                displayCurrentPage();
                addPaginationControls();
            } else {
                console.log('Hiding pagination for', allStudents.length, 'students');
                // If 12 or fewer students, hide pagination and show all results
                document.getElementById('paginationContainer').style.display = 'none';
                document.getElementById('paginationContainer').classList.remove('border-top');
                // Show all rows
                allStudents.forEach(student => {
                    student.element.style.display = '';
                });
            }
        }
        
        // Display current page
        function displayCurrentPage() {
            const startIndex = (currentPage - 1) * PAGE_SIZE;
            const endIndex = startIndex + PAGE_SIZE;
            const pageStudents = allStudents.slice(startIndex, endIndex);
            
            console.log('Displaying page', currentPage, 'with', pageStudents.length, 'students');
            
            // Hide all rows first
            allStudents.forEach(student => {
                student.element.style.display = 'none';
            });
            
            // Show only current page rows
            pageStudents.forEach(student => {
                student.element.style.display = '';
            });
            
            // Update pagination info
            updatePaginationInfo(startIndex, endIndex);
        }
        
        // Update pagination info
        function updatePaginationInfo(startIndex, endIndex) {
            const infoElement = document.getElementById('paginationInfo');
            infoElement.textContent = `Showing ${startIndex + 1} to ${Math.min(endIndex, allStudents.length)} of ${allStudents.length} results`;
        }
        
        // Add pagination controls
        function addPaginationControls() {
            const controlsContainer = document.getElementById('paginationControls');
            
            if (totalPages <= 1) {
                // If only one page, show simple info without navigation
                controlsContainer.innerHTML = '';
                return;
            }
            
            controlsContainer.innerHTML = `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="javascript:void(0)" onclick="changePage(${currentPage - 1})" ${currentPage === 1 ? 'tabindex="-1"' : ''}>
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </li>
                ${generatePageNumbers()}
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="javascript:void(0)" onclick="changePage(${currentPage + 1})" ${currentPage === totalPages ? 'tabindex="-1"' : ''}>
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            `;
        }
        
        // Generate page numbers
        function generatePageNumbers() {
            let pages = [];
            const maxVisiblePages = 5;
            
            if (totalPages <= maxVisiblePages) {
                // Show all page numbers if total pages is small
                for (let i = 1; i <= totalPages; i++) {
                    pages.push(i);
                }
            } else {
                // Show partial page numbers for large page counts
                if (currentPage <= 3) {
                    // Current page is in first few pages
                    for (let i = 1; i <= 4; i++) {
                        pages.push(i);
                    }
                    pages.push('...');
                    pages.push(totalPages);
                } else if (currentPage >= totalPages - 2) {
                    // Current page is in last few pages
                    pages.push(1);
                    pages.push('...');
                    for (let i = totalPages - 3; i <= totalPages; i++) {
                        pages.push(i);
                    }
                } else {
                    // Current page is in middle
                    pages.push(1);
                    pages.push('...');
                    for (let i = currentPage - 1; i <= currentPage + 1; i++) {
                        pages.push(i);
                    }
                    pages.push('...');
                    pages.push(totalPages);
                }
            }
            
            return pages.map(page => {
                if (page === '...') {
                    return '<li class="page-item disabled"><span class="page-link">...</span></li>';
                } else {
                    return `<li class="page-item ${page === currentPage ? 'active' : ''}">
                                <a class="page-link" href="javascript:void(0)" onclick="changePage(${page})">${page}</a>
                            </li>`;
                }
            }).join('');
        }
        
        // Change page
        function changePage(page) {
            if (page < 1 || page > totalPages) return;
            
            currentPage = page;
            displayCurrentPage();
            addPaginationControls();
            
            // Remove automatic scrolling to prevent page jumping
            // Users can manually scroll if needed
        }

        // Save student function
        function saveStudent() {
            const firstName = document.getElementById('firstName').value;
            const lastName = document.getElementById('lastName').value;
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            const studentNo = document.getElementById('studentNo').value;
            const isActive = true; // Default to true since the checkbox is commented out

            // Validate required fields
            if (!email || !password) {
                showError('Please fill in all required fields- email and password!');
                return;
            }

            // Validate password confirmation
            if (password !== confirmPassword) {
                showError('Password and Confirm Password do not match!');
                return;
            }

            // Create request data
            const requestData = {
                firstName: firstName,
                lastName: lastName,
                email: email,
                password: password,
                studentNo: studentNo,
                isActive: isActive
            };

            // Show loading state
            const saveButton = document.querySelector('#addStudentModal .btn-success');
            const originalText = saveButton.innerHTML;
            saveButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';
            saveButton.disabled = true;

            // Get anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            const tokenValue = token ? token.value : '';

            // Send AJAX request
            fetch('/Admin/Student/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': tokenValue
                },
                body: JSON.stringify(requestData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showSuccess('Student created successfully!');
                    
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addStudentModal'));
                    modal.hide();
                    
                    // Reset form
                    document.getElementById('addStudentForm').reset();
                    
                    // Refresh page after a short delay
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } else {
                    showError('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error creating student:', error);
                showError('An error occurred while creating the student. Please try again.');
            })
            .finally(() => {
                // Reset button state
                saveButton.innerHTML = originalText;
                saveButton.disabled = false;
            });
        }

        // Edit student function
        function editStudent(studentId) {
            console.log('Editing student:', studentId);
            
            // Show loading state
            const editModal = new bootstrap.Modal(document.getElementById('editStudentModal'));
            editModal.show();
            
            // Load student data from backend
            fetch(`/Admin/Student/GetStudentById/${studentId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.data) {
                        const student = data.data;
                        
                        // Populate form fields
                        document.getElementById('editStudentId').value = student.id;
                        document.getElementById('editFirstName').value = student.firstName || '';
                        document.getElementById('editLastName').value = student.lastName || '';
                        document.getElementById('editEmail').value = student.email || '';
                        document.getElementById('editStudentNo').value = student.studentNo || '';
                        document.getElementById('editPassword').value = ''; // Clear password fields
                        document.getElementById('editConfirmPassword').value = ''; // Clear confirm password field
                        //document.getElementById('editIsActive').checked = student.isActive;
                    } else {
                        showError('Failed to load student data');
                        editModal.hide();
                    }
                })
                .catch(error => {
                    console.error('Error loading student data:', error);
                    showError('An error occurred while loading student data');
                    editModal.hide();
                });
        }

        // Update student function
        function updateStudent() {
            const studentId = document.getElementById('editStudentId').value;
            const firstName = document.getElementById('editFirstName').value;
            const lastName = document.getElementById('editLastName').value;
            const email = document.getElementById('editEmail').value;
            const studentNo = document.getElementById('editStudentNo').value;
            const password = document.getElementById('editPassword').value;
            const confirmPassword = document.getElementById('editConfirmPassword').value;
            //const isActive = document.getElementById('editIsActive').checked;

            // Validate required fields
            if (!email) {
                showError('Please fill in required email!');
                return;
            }

            // Validate password confirmation if password is provided
            if (password && password !== confirmPassword) {
                showError('Password and Confirm Password do not match!');
                return;
            }

            // Create request data
            const requestData = {
                id: studentId,
                firstName: firstName,
                lastName: lastName,
                email: email,
                studentNo: studentNo || null,
                password: password || null, // Only send password if provided
                confirmPassword: confirmPassword || null, // Only send confirm password if provided
                //isActive: isActive
            };

            // Show loading state
            const updateButton = document.querySelector('#editStudentModal .btn-success');
            const originalText = updateButton.innerHTML;
            updateButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Updating...';
            updateButton.disabled = true;

            // Get anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            const tokenValue = token ? token.value : '';

            // Send AJAX request
            fetch('/Admin/Student/Update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': tokenValue
                },
                body: JSON.stringify(requestData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showSuccess('Student updated successfully!');
                    
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editStudentModal'));
                    modal.hide();
                    
                    // Refresh page after a short delay
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } else {
                    showError('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error updating student:', error);
                showError('An error occurred while updating the student. Please try again.');
            })
            .finally(() => {
                // Reset button state
                updateButton.innerHTML = originalText;
                updateButton.disabled = false;
            });
        }

        // Delete student function
        function deleteStudent(studentId) {
            showConfirm(
                'Are you sure you want to delete this student?',
                () => confirmDeleteStudent(studentId),
                null,
                'Delete Student'
            );
        }

        function confirmDeleteStudent(studentId) {
            const loadingToast = showLoading('Deleting student...');
            
            // Get anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            const tokenValue = token ? token.value : '';

            // Send AJAX request to delete student
            fetch(`/Admin/Student/Delete/${studentId}`, {
                method: 'DELETE',
                headers: {
                    'RequestVerificationToken': tokenValue
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showSuccess('Student deleted successfully!');
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } else {
                    showError('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error deleting student:', error);
                showError('An error occurred while deleting the student. Please try again.');
            });
        }

        // Upload Excel function
        function uploadExcel() {
            console.log('uploadExcel function called');
            const fileInput = document.getElementById('excelFile');
            console.log('File input element:', fileInput);
            
            if (!fileInput) {
                showError('File input element not found');
                return;
            }
            
            console.log('File input files:', fileInput.files);
            console.log('File input files length:', fileInput.files.length);
            const file = fileInput.files[0];
            console.log('Selected file:', file);
            console.log('File name:', file ? file.name : 'No file');
            console.log('File size:', file ? file.size : 'No file');
            console.log('File type:', file ? file.type : 'No file');

            if (!file) {
                showError('Please select a file to upload');
                return;
            }

            const formData = new FormData();
            formData.append('excelFile', file);

            // Get anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            const tokenValue = token ? token.value : '';
            formData.append('__RequestVerificationToken', tokenValue);

            // Show loading state
            const uploadButton = document.querySelector('#uploadExcelModal .btn-success');
            const originalText = uploadButton.innerHTML;
            uploadButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Uploading...';
            uploadButton.disabled = true;

            // Send AJAX request
            fetch('/Admin/Student/UploadExcel', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                console.log('Student Upload Response:', data);
                console.log('Data structure:', {
                    success: data.success,
                    hasData: !!data.data,
                    hasErrors: !!(data.data && data.data.errors),
                    errorCount: data.data ? data.data.errorCount : 'undefined',
                    successCount: data.data ? data.data.successCount : 'undefined'
                });
                
                if (data.success) {
                    // Check if there are any errors to display
                    if (data.data && data.data.errors && data.data.errors.length > 0) {
                        console.log('Showing errors with SweetAlert');
                        // Show errors using SweetAlert
                        showUploadResultWithErrors(data.data.errors, data.data.successCount, data.data.errorCount);
                        
                        // Close modal after showing errors
                        const modal = bootstrap.Modal.getInstance(document.getElementById('uploadExcelModal'));
                        modal.hide();
                        
                        // Reset form
                        document.getElementById('uploadExcelForm').reset();
                    } else {
                        console.log('Showing success with SweetAlert');
                        // No errors, show success using SweetAlert
                        showUploadSuccess(data.data.successCount);
                        
                        // Close modal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('uploadExcelModal'));
                        modal.hide();
                        
                        // Reset form
                        document.getElementById('uploadExcelForm').reset();
                }
                } else {
                    console.log('Upload failed:', data.message);
                    showError('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error uploading Excel:', error);
                showError('An error occurred while uploading the file. Please try again.');
            })
            .finally(() => {
                // Reset button state
                uploadButton.innerHTML = originalText;
                uploadButton.disabled = false;
            });
        }

        // Function to show upload success using SweetAlert
        function showUploadSuccess(successCount) {
            console.log('showUploadSuccess called with successCount:', successCount);
            console.log('SweetAlert available:', typeof Swal !== 'undefined');
            if (typeof Swal === 'undefined') {
                console.error('SweetAlert is not loaded!');
                alert('Upload successful! ' + successCount + ' students imported. SweetAlert not available.');
                return;
            }
            Swal.fire({
                icon: 'success',
                title: 'Upload Successful!',
                html: `
                    <div class="text-center">
                        <div class="mb-2">
                            <i class="fas fa-check-circle text-success" style="font-size: 2rem;"></i>
                        </div>
                        <h6 class="text-success mb-2">Students imported successfully!</h6>
                        <div class="alert alert-success py-2">
                            <strong>${successCount}</strong> students have been imported to the system.
                        </div>
                        <p class="text-muted mt-2 mb-0">
                            <small>The page will refresh after you click OK.</small>
                        </p>
                    </div>
                `,
                showConfirmButton: true,
                confirmButtonText: 'OK',
                confirmButtonColor: '#28a745',
                width: '400px',
                customClass: {
                    popup: 'swal-small',
                    title: 'text-success'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    // Refresh page after clicking OK
                    location.reload();
                }
            });
        }

        // Function to show upload result with errors using SweetAlert
        function showUploadResultWithErrors(errors, successCount, errorCount) {
            console.log('showUploadResultWithErrors called with:', { errors, successCount, errorCount });
            console.log('SweetAlert available:', typeof Swal !== 'undefined');
            if (typeof Swal === 'undefined') {
                console.error('SweetAlert is not loaded!');
                alert('Upload completed with errors. ' + successCount + ' students imported, ' + errorCount + ' errors found. SweetAlert not available.');
                return;
            }
            // Create error list HTML
            let errorListHtml = '';
            errors.forEach((error, index) => {
                errorListHtml += `
                    <div class="text-start mb-1 p-1 bg-light rounded">
                        <i class="fas fa-times-circle text-danger me-1"></i>
                        <span class="text-danger small">${error}</span>
                    </div>
                `;
            });

            // Add note about error limit if there are more than 10 errors
            if (errorCount > 10) {
                errorListHtml += `
                    <div class="alert alert-info mt-2 py-1">
                        <i class="fas fa-info-circle me-1"></i>
                        <small><strong>Note:</strong> Showing first 10 errors. Total errors: ${errorCount}</small>
                    </div>
                `;
            }

            Swal.fire({
                icon: 'warning',
                title: 'Upload Completed with Errors',
                html: `
                    <div class="text-center">
                        <div class="mb-2">
                            <i class="fas fa-exclamation-triangle text-warning" style="font-size: 2rem;"></i>
                        </div>
                        
                        <div class="row mb-2">
                            <div class="col-6">
                                <div class="alert alert-success mb-0 py-1">
                                    <i class="fas fa-check-circle me-1"></i>
                                    <small><strong>${successCount}</strong> students imported</small>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="alert alert-danger mb-0 py-1">
                                    <i class="fas fa-times-circle me-1"></i>
                                    <small><strong>${errorCount}</strong> errors found</small>
                                </div>
                            </div>
                        </div>
                        
                        <div class="text-start">
                            <h6 class="text-danger mb-1">Error Details:</h6>
                            <div class="error-list" style="max-height: 150px; overflow-y: auto;">
                                ${errorListHtml}
                            </div>
                        </div>
                        
                        <p class="text-muted mt-2 mb-0">
                            <small>The page will refresh after you click OK.</small>
                        </p>
                    </div>
                `,
                showConfirmButton: true,
                confirmButtonText: 'OK',
                confirmButtonColor: '#ffc107',
                width: '450px',
                customClass: {
                    popup: 'swal-small',
                    title: 'text-warning'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    // Refresh page after clicking OK
                    location.reload();
                }
            });
        }

        // Batch selection functions
        function toggleSelectAll(checkbox) {
            const checkboxes = document.querySelectorAll('.student-checkbox');
            checkboxes.forEach(cb => {
                cb.checked = checkbox.checked;
            });
            updateBatchActions();
        }

        function selectAllStudents() {
            const selectAllCheckbox = document.getElementById('selectAllCheckbox');
            const checkboxes = document.querySelectorAll('.student-checkbox');
            checkboxes.forEach(cb => {
                cb.checked = true;
            });
            selectAllCheckbox.checked = true;
            selectAllCheckbox.indeterminate = false;
            updateBatchActions();
        }

        function deselectAllStudents() {
            const selectAllCheckbox = document.getElementById('selectAllCheckbox');
            const checkboxes = document.querySelectorAll('.student-checkbox');
            checkboxes.forEach(cb => {
                cb.checked = false;
            });
            selectAllCheckbox.checked = false;
            selectAllCheckbox.indeterminate = false;
            updateBatchActions();
        }

        function updateBatchActions() {
            const checkboxes = document.querySelectorAll('.student-checkbox');
            const selectAllCheckbox = document.getElementById('selectAllCheckbox');
            const selectedCount = document.getElementById('selectedCount');

            let allChecked = true;
            let noneChecked = true;

            checkboxes.forEach(cb => {
                if (cb.checked) {
                    noneChecked = false;
                } else {
                    allChecked = false;
                }
            });

            selectAllCheckbox.checked = allChecked;
            selectAllCheckbox.indeterminate = !allChecked && !noneChecked;

            const batchActionsDiv = document.getElementById('batchActions');
            if (checkboxes.length > 0) {
                batchActionsDiv.style.display = 'flex';
                selectedCount.textContent = checkboxes.filter(cb => cb.checked).length;
            } else {
                batchActionsDiv.style.display = 'none';
                selectedCount.textContent = '0';
            }
        }

        function deleteSelectedStudents() {
            const selectedStudentIds = Array.from(document.querySelectorAll('.student-checkbox:checked')).map(cb => cb.value);
            if (selectedStudentIds.length === 0) {
                showError('Please select at least one student to delete.');
                return;
            }

            showConfirm(
                `Are you sure you want to delete ${selectedStudentIds.length} selected student(s)? This action cannot be undone.`,
                () => confirmDeleteSelectedStudents(selectedStudentIds),
                null,
                'Delete Selected Students'
            );
        }

        function confirmDeleteSelectedStudents(selectedStudentIds) {
            const loadingToast = showLoading('Deleting selected students...');
            
            // Get anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            const tokenValue = token ? token.value : '';

            // Send AJAX request to delete selected students
            fetch('/Admin/Student/DeleteSelected', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': tokenValue
                },
                body: JSON.stringify({ Ids: selectedStudentIds })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showSuccess(`${selectedStudentIds.length} students deleted successfully!`);
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } else {
                    showError('Error: ' + data.message);
                    loadingToast.hide();
                }
            })
            .catch(error => {
                console.error('Error deleting selected students:', error);
                showError('An error occurred while deleting the selected students. Please try again.');
                loadingToast.hide();
            });
        }
    </script>

    <style>
        /* Responsive table styles */
        .responsive-table {
            min-width: 800px; /* Ensure table has minimum width */
        }
        
        /* Table scrollbar styles */
        .table-responsive::-webkit-scrollbar {
            height: 8px;
        }
        
        .table-responsive::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }
        
        .table-responsive::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 4px;
        }
        
        .table-responsive::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
        
        /* Responsive breakpoint optimization */
        @@media (max-width: 1200px) {
            .responsive-table {
                min-width: 700px;
            }
        }
        
        @@media (max-width: 992px) {
            .responsive-table {
                min-width: 600px;
            }
            
            .table-responsive {
                font-size: 0.875rem;
            }
            
            .btn-group .btn {
                padding: 0.25rem 0.5rem;
                font-size: 0.75rem;
            }
        }
        
        @@media (max-width: 768px) {
            .responsive-table {
                min-width: 500px;
            }
            
            .table-responsive {
                font-size: 0.8rem;
            }
            
            .btn-group .btn {
                padding: 0.2rem 0.4rem;
                font-size: 0.7rem;
            }
            
            .d-flex.gap-2 {
                flex-direction: column;
                gap: 0.5rem !important;
            }
            
            .d-flex.gap-2 .btn {
                width: 100%;
            }
            
            /* Search box takes full width on small screens */
            .input-group {
                max-width: 100% !important;
            }
        }
        
        @@media (max-width: 576px) {
            .responsive-table {
                min-width: 400px;
            }
            
            .table-responsive {
                font-size: 0.75rem;
            }
            
            .btn-group .btn {
                padding: 0.15rem 0.3rem;
                font-size: 0.65rem;
            }
            
            .card-header {
                padding: 0.75rem;
            }
            
            .card-title {
                font-size: 1rem;
            }
            
            .badge {
                font-size: 0.7rem;
            }
        }
        
        /* Modal responsiveness */
        @@media (max-width: 768px) {
            .modal-dialog {
                margin: 0.5rem;
            }
            
            .modal-body {
                padding: 1rem;
            }
            
            .form-label {
                font-size: 0.9rem;
            }
            
            .form-control {
                font-size: 0.9rem;
            }
        }
        
        /* Button group improvements */
        .btn-group .btn {
            border-radius: 0;
        }
        
        .btn-group .btn:first-child {
            border-top-left-radius: 0.375rem;
            border-bottom-left-radius: 0.375rem;
        }
        
        .btn-group .btn:last-child {
            border-top-right-radius: 0.375rem;
            border-bottom-right-radius: 0.375rem;
        }
        
        /* Custom styles for the student management page - consistent with tutor page */
        .table th {
            font-weight: 600;
            color: #495057;
            border-bottom: 2px solid #dee2e6;
        }
        
        .table td {
            vertical-align: middle;
            border-bottom: 1px solid #f8f9fa;
        }
        
        .table tbody tr:hover {
            background-color: #f8f9fa;
        }
        
        /* Badge improvements */
        .badge {
            font-weight: 500;
        }
        
        /* Search input improvements */
        .input-group .form-control:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        /* Readonly input styling */
        .form-control[readonly] {
            background-color: #f8f9fa;
            color: #6c757d;
            cursor: not-allowed;
        }
        
        .form-control[readonly]:focus {
            border-color: #ced4da;
            box-shadow: none;
        }
        

        
        /* SweetAlert custom styling */
        .swal-wide {
            max-width: 600px !important;
        }
        
        .swal-wide .swal2-html {
            text-align: left;
        }
        
        .swal-wide .error-list {
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 0.5rem;
            background-color: #f8f9fa;
        }
        
        .swal-wide .error-list::-webkit-scrollbar {
            width: 6px;
        }
        
        .swal-wide .error-list::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 3px;
        }
        
        .swal-wide .error-list::-webkit-scrollbar-thumb {
            background: #6c757d;
            border-radius: 3px;
        }
        
        .swal-wide .error-list::-webkit-scrollbar-thumb:hover {
            background: #495057;
        }
        
        .swal-wide .alert {
            margin-bottom: 0.5rem;
            padding: 0.5rem 0.75rem;
            border-radius: 0.375rem;
            font-size: 0.875rem;
        }
        
        .swal-wide .bg-light {
            background-color: #f8f9fa !important;
        }
        
        .swal-wide .text-start {
            text-align: left !important;
        }
        
        /* Small SweetAlert styling */
        .swal-small {
            max-width: 450px !important;
        }
        
        .swal-small .swal2-html {
            text-align: left;
        }
        
        .swal-small .error-list {
            max-height: 150px;
            overflow-y: auto;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 0.25rem;
            background-color: #f8f9fa;
        }
        
        .swal-small .error-list::-webkit-scrollbar {
            width: 4px;
        }
        
        .swal-small .error-list::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 2px;
        }
        
        .swal-small .error-list::-webkit-scrollbar-thumb {
            background: #6c757d;
            border-radius: 2px;
        }
        
        .swal-small .error-list::-webkit-scrollbar-thumb:hover {
            background: #495057;
        }
        
        .swal-small .alert {
            margin-bottom: 0.25rem;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.8rem;
        }
        
        .swal-small .bg-light {
            background-color: #f8f9fa !important;
        }
        
        .swal-small .text-start {
            text-align: left !important;
        }
        
        .swal-small .small {
            font-size: 0.8rem !important;
        }
        
        /* Pagination improvements to prevent page jumping */
        .pagination .page-link {
            text-decoration: none;
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }
        
        .pagination .page-link:focus {
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
            outline: none;
        }
        
        .pagination .page-link:hover {
            text-decoration: none;
        }
        
        /* Ensure pagination container doesn't cause layout shifts */
        #paginationContainer {
            position: relative;
            z-index: 1;
        }
    </style>
}
