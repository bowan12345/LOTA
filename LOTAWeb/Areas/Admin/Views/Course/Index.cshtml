
@model IEnumerable<LOTA.Model.DTO.Admin.CourseReturnDTO>
@{
    ViewData["Title"] = "Course Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    // Add anti-forgery token for AJAX requests
    var token = Html.AntiForgeryToken();
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold text-dark mb-0">Manage Courses</h2>
        <div class="d-flex gap-2">
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addCourseModal" id="addCourseBtn">
                <i class="fas fa-plus me-2"></i>
                Add Course
            </button>
            <button class="btn btn-outline-success" data-bs-toggle="modal" data-bs-target="#uploadExcelModal" id="uploadExcelBtn">
                <i class="fas fa-file-excel me-2"></i>
                Upload Excel
            </button>
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addQualificationModal" id="addQualificationBtn" style="display: none;">
                <i class="fas fa-plus me-2"></i>
                Add Qualification
            </button>
        </div>
    </div>

    <!-- Tab Navigation -->
    <div class="card border-0 shadow-sm mb-4">
        <div class="card-header bg-white border-0 py-3">
            <ul class="nav nav-tabs card-header-tabs" id="managementTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="courses-tab" data-bs-toggle="tab" data-bs-target="#courses" type="button" role="tab" aria-controls="courses" aria-selected="true">
                        <i class="fas fa-graduation-cap me-2"></i>
                        Courses
                       
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="qualifications-tab" data-bs-toggle="tab" data-bs-target="#qualifications" type="button" role="tab" aria-controls="qualifications" aria-selected="false">
                        <i class="fas fa-certificate me-2"></i>
                        Qualifications
                    </button>
                </li>
            </ul>
        </div>
    </div>

    <!-- Tab Content -->
    <div class="tab-content" id="managementTabsContent">
        <!-- Courses Tab -->
        <div class="tab-pane fade show active" id="courses" role="tabpanel" aria-labelledby="courses-tab">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-0 py-3">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <h5 class="card-title mb-0 fw-bold">
                                <i class="fas fa-graduation-cap text-primary me-2"></i>
                                Course List
                                @if (Model != null && Model.Any())
                                {
                                    <span class="badge bg-primary ms-2">@Model.Count()</span>
                                }
                                @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
                                {
                                    <span class="badge bg-info ms-2">
                                        <i class="fas fa-search me-1"></i>
                                        "@ViewBag.SearchTerm"
                                    </span>
                                }
                            </h5>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex justify-content-md-end gap-2">
                                <form method="get" action="@Url.Action("Index", "Course", new { area = "Admin" })" class="d-flex" style="max-width: 300px;">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text bg-light border-end-0">
                                            <i class="fas fa-search text-muted"></i>
                                        </span>
                                        <input type="text" class="form-control border-start-0" name="searchTerm" id="searchInput" 
                                               placeholder="Search courses..." value="@ViewBag.SearchTerm">
                                        <button type="submit" class="btn btn-outline-secondary border-start-0" title="Search">
                                            <i class="fas fa-search"></i>
                                        </button>
                                        @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
                                        {
                                            <a href="@Url.Action("Index", "Course", new { area = "Admin" })" 
                                               class="btn btn-outline-danger border-start-0" title="Clear Search">
                                                <i class="fas fa-times"></i>
                                            </a>
                                        }
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0 responsive-table">
                            <thead class="table-light">
                                <tr>
                                    <th class="border-0 text-nowrap">Course Name</th>
                                    <th class="border-0 text-nowrap">Course Code</th>
                                    <th class="border-0 text-nowrap d-none d-md-table-cell">Level</th>
                                    <th class="border-0 text-nowrap d-none d-lg-table-cell">Qualification</th>
                                    <th class="border-0 text-nowrap d-none d-xl-table-cell">Description</th>
                                    <th class="border-0 text-nowrap d-none d-xxl-table-cell">Learning Outcomes</th>
                                    <th class="border-0 text-nowrap">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model != null && Model.Any())
                                {
                                    foreach (var course in Model)
                                    {
                                        <tr>
                                            <td class="text-nowrap">@(course.CourseName ?? "N/A")</td>
                                            <td class="text-nowrap">@(course.CourseCode ?? "N/A")</td>
                                            <td class="text-nowrap d-none d-md-table-cell">
                                                <span class="badge bg-info">@(course.Level == 0 ? "N/A" : course.Level.ToString())</span>
                                            </td>
                                            <td class="text-nowrap d-none d-lg-table-cell">
                                                @if (!string.IsNullOrEmpty(course.QualificationName))
                                                {
                                                    <div>
                                                        <div class="fw-semibold">@course.QualificationName</div>
                                                        @if (!string.IsNullOrEmpty(course.QualificationType))
                                                        {
                                                            <small class="text-muted">@course.QualificationType</small>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">No qualification</span>
                                                }
                                            </td>
                                            <td class="text-nowrap d-none d-xl-table-cell">
                                                @if (!string.IsNullOrEmpty(course.Description))
                                                {
                                                    <span title="@course.Description">
                                                        @(course.Description.Length > 50 ? course.Description.Substring(0, 50) + "..." : course.Description)
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">No description</span>
                                                }
                                            </td>
                                            <td class="d-none d-xxl-table-cell">
                                                @if (course.LearningOutcomes != null && course.LearningOutcomes.Any())
                                                {
                                                    <span title="@string.Join(", ", course.LearningOutcomes.Select(lo => lo.LOName))">
                                                        @{
                                                            var loNames = string.Join(", ", course.LearningOutcomes.Select(lo => lo.LOName));
                                                            var displayText = loNames.Length > 60 ? loNames.Substring(0, 60) + "..." : loNames;
                                                        }
                                                        @displayText
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">No learning outcomes</span>
                                                }
                                            </td>

                                            <td class="text-nowrap">
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-success btn-sm" title="Edit" onclick="editCourse('@course.Id')">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-danger btn-sm" title="Delete" onclick="deleteCourse('@course.Id')">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="7" class="text-center py-4">
                                            <div class="text-muted">
                                                @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
                                                {
                                                    <i class="fas fa-search fa-2x mb-3"></i>
                                                    <p class="mb-0">No courses found for "@ViewBag.SearchTerm"</p>
                                                    <small>Try a different search term or <a href="@Url.Action("Index", "Course", new { area = "Admin" })" class="text-decoration-none">clear search</a></small>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-graduation-cap fa-2x mb-3"></i>
                                                    <p class="mb-0">No courses found</p>
                                                    <small>Click "Add Course" to create the first course</small>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Qualifications Tab -->
        <div class="tab-pane fade" id="qualifications" role="tabpanel" aria-labelledby="qualifications-tab">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-0 py-3">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <h5 class="card-title mb-0 fw-bold">
                                <i class="fas fa-certificate text-primary me-2"></i>
                                Qualification List
                                <span class="badge bg-primary ms-2" id="qualificationListCount">0</span>
                            </h5>
                        </div>
                        @* <div class="col-md-6">
                            <div class="d-flex justify-content-md-end gap-2">
                                <div class="input-group input-group-sm" style="max-width: 300px;">
                                    <span class="input-group-text bg-light border-end-0">
                                        <i class="fas fa-search text-muted"></i>
                                    </span>
                                    <input type="text" class="form-control border-start-0" id="qualificationSearchInput" 
                                           placeholder="Search qualifications...">
                                    <button type="button" class="btn btn-outline-secondary border-start-0" title="Search" onclick="searchQualifications()">
                                        <i class="fas fa-search"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-danger border-start-0" title="Clear Search" onclick="clearQualificationSearch()" style="display: none;" id="clearQualificationSearchBtn">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        </div> *@
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0 responsive-table">
                            <thead class="table-light">
                                <tr>
                                    <th class="border-0 text-nowrap">Qualification Name</th>
                                    <th class="border-0 text-nowrap">Qualification Type</th>
                                    <th class="border-0 text-nowrap d-none d-md-table-cell">Level</th>
                                    <th class="border-0 text-nowrap d-none d-xl-table-cell">Status</th>
                                    <th class="border-0 text-nowrap">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="qualificationTableBody">
                                <tr>
                                    <td colspan="6" class="text-center py-4">
                                        <div class="text-muted">
                                            <i class="fas fa-spinner fa-spin fa-2x mb-3"></i>
                                            <p class="mb-0">Loading qualifications...</p>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Course Modal -->
<div class="modal fade" id="addCourseModal" tabindex="-1" aria-labelledby="addCourseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="addCourseModalLabel">
                    <i class="fas fa-plus me-2"></i>
                    Add Course
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addCourseForm">
                    <div class="row g-3">
                        <div class="col-12 col-md-6">
                            <label for="courseName" class="form-label">Course Name</label>
                            <input type="text" class="form-control" id="courseName" name="courseName" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="courseCode" class="form-label">Course Code</label>
                            <input type="text" class="form-control" id="courseCode" name="courseCode" required>
                        </div>

                        <div class="col-12">
                            <label for="qualificationId" class="form-label">Qualification</label>
                            <select class="form-select" id="qualificationId" name="qualificationId">
                                <option value="">Select Qualification (Optional)</option>
                                <!-- Qualifications will be loaded dynamically -->
                            </select>
                        </div>
                        <div class="col-12">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" rows="3" placeholder="Enter course description..."></textarea>
                        </div>
                                                 <div class="col-12">
                             <label class="form-label">Learning Outcomes</label>
                             <div id="learningOutcomesContainer">
                                 <!-- Learning outcomes will be added here dynamically -->
                             </div>
                             <button type="button" class="btn btn-success btn-sm mt-2" onclick="addLearningOutcome()">
                                 <i class="fas fa-plus me-2"></i>
                                 Add Learning Outcome
                             </button>
                         </div>

                    </div>
                </form>
                <div class="row g-3">
                    <div class="col-12">
                        <div class="d-flex justify-content-end gap-2 mt-4">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" onclick="saveCourse()">
                                <i class="fas fa-save me-2"></i>
                                Add
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Course Modal -->
<div class="modal fade" id="editCourseModal" tabindex="-1" aria-labelledby="editCourseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="editCourseModalLabel">
                    <i class="fas fa-edit me-2"></i>
                    Edit Course
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editCourseForm">
                    <input type="hidden" id="editCourseId" name="courseId">
                    <div class="row g-3">
                        <div class="col-12 col-md-6">
                            <label for="editCourseName" class="form-label">Course Name</label>
                            <input type="text" class="form-control" id="editCourseName" name="courseName" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editCourseCode" class="form-label">Course Code</label>
                            <input type="text" class="form-control" id="editCourseCode" name="courseCode" required>
                        </div>

                        <div class="col-12">
                            <label for="editQualificationId" class="form-label">Qualification</label>
                            <select class="form-select" id="editQualificationId" name="qualificationId">
                                <option value="">Select Qualification (Optional)</option>
                                <!-- Qualifications will be loaded dynamically -->
                            </select>
                        </div>
                        <div class="col-12">
                            <label for="editDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="editDescription" name="description" rows="3" placeholder="Enter course description..."></textarea>
                        </div>
                                                 <div class="col-12">
                             <label class="form-label">Learning Outcomes</label>
                             <div id="editLearningOutcomesContainer">
                                 <!-- Learning outcomes will be added here dynamically -->
                             </div>
                             <button type="button" class="btn btn-success btn-sm mt-2" onclick="addEditLearningOutcome()">
                                 <i class="fas fa-plus me-2"></i>
                                 Add Learning Outcome
                             </button>
                         </div>

                    </div>
                </form>
                <div class="row g-3">
                    <div class="col-12">
                        <div class="d-flex justify-content-end gap-2 mt-4">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" onclick="updateCourse()">
                                <i class="fas fa-save me-2"></i>
                                Update
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Upload Excel Modal -->
<div class="modal fade" id="uploadExcelModal" tabindex="-1" aria-labelledby="uploadExcelModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadExcelModalLabel">
                    <i class="fas fa-file-excel me-2"></i>
                    Upload Excel File
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="excelFile" class="form-label">Select Excel File</label>
                    <input type="file" class="form-control" id="excelFile" accept=".xlsx,.xls" required>
                    <div class="form-text">Supported formats: .xlsx, .xls</div>
                </div>
                <div class="alert alert-info">
                    <h6 class="alert-heading">
                        <i class="fas fa-info-circle me-2"></i>
                        Excel File Format Requirements
                    </h6>
                    <p class="mb-0">Your Excel file should contain the following columns:</p>
                    <ul class="mb-0 mt-2">
                        <li><strong>CourseName</strong> (Required)</li>
                        <li><strong>CourseCode</strong> (Required)</li>
                    </ul>
                    <div class="mt-3">
                        <small class="text-muted">
                            <i class="fas fa-exclamation-triangle me-1"></i>
                            <strong>Note:</strong> Column headers are case-sensitive. Make sure your Excel file has exactly these column names in the first row.
                        </small>
                    </div>
                </div>
                <div class="mb-3">
                    <a href="@Url.Action("DownloadTemplate", "Course", new { area = "Admin" })" class="btn btn-outline-primary btn-sm">
                        <i class="fas fa-download me-2"></i>
                        Download Template
                    </a>
                </div>
            </div>
            <div class="modal-footer flex-column flex-sm-row gap-2">
                <button type="button" class="btn btn-secondary w-100 w-sm-auto" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success w-100 w-sm-auto" onclick="uploadExcel()">
                    <i class="fas fa-upload me-2"></i>
                    Upload & Import
                </button>
            </div>
        </div>
    </div>
</div>

<script>
         // Global variables for learning outcomes
     let loCounter = 0;
     let editLoCounter = 0;
     
         // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
        // Load qualification types from database
        loadQualificationTypes();
        
        // Load qualifications for course modals
        loadQualificationsForCourse();
        
        // Modal event listeners
        const addCourseModal = document.getElementById('addCourseModal');
                 if (addCourseModal) {
             addCourseModal.addEventListener('hidden.bs.modal', function() {
                 // Reset form
                 document.getElementById('addCourseForm').reset();
                 // Clear learning outcomes
                 clearLearningOutcomes();
             });
         }
        
        // Edit Course Modal event listeners
        const editCourseModal = document.getElementById('editCourseModal');
                 if (editCourseModal) {
             editCourseModal.addEventListener('hidden.bs.modal', function() {
                 // Reset form
                 document.getElementById('editCourseForm').reset();
                 // Clear learning outcomes
                 clearEditLearningOutcomes();
             });
         }
        
        // Search functionality - Add enter key support and auto-submit
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    this.closest('form').submit();
                }
            });
            
            // Auto-submit after 500ms of no typing (debounced search)
            let searchTimeout;
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    if (this.value.length >= 2 || this.value.length === 0) {
                        this.closest('form').submit();
                    }
                }, 500);
            });
        }
        
        // Initialize Bootstrap tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
        
        // Tab switching functionality
        const tabs = document.querySelectorAll('[data-bs-toggle="tab"]');
        tabs.forEach(tab => {
            tab.addEventListener('shown.bs.tab', function(event) {
                const target = event.target.getAttribute('data-bs-target');
                
                // Show/hide appropriate buttons based on active tab
                if (target === '#courses') {
                    document.getElementById('addCourseBtn').style.display = 'inline-block';
                    document.getElementById('uploadExcelBtn').style.display = 'inline-block';
                    document.getElementById('addQualificationBtn').style.display = 'none';
                    
                    // Refresh the page to get updated course data with latest qualification information
                    location.reload();
                } else if (target === '#qualifications') {
                    document.getElementById('addCourseBtn').style.display = 'none';
                    document.getElementById('uploadExcelBtn').style.display = 'none';
                    document.getElementById('addQualificationBtn').style.display = 'inline-block';
                    
                    // Load qualifications when tab is shown
                    loadQualifications();
                }
            });
        });
        
        // Initialize qualification search functionality
        const qualificationSearchInput = document.getElementById('qualificationSearchInput');
        if (qualificationSearchInput) {
            qualificationSearchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    searchQualifications();
                }
            });
            
            // Auto-search after typing
            let searchTimeout;
            qualificationSearchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    if (this.value.length >= 2 || this.value.length === 0) {
                        searchQualifications();
                    }
                }, 500);
            });
        }
    });
 
     // Learning Outcomes Functions
     function addLearningOutcome() {
         loCounter++;
         const container = document.getElementById('learningOutcomesContainer');
         
         // Create table if it doesn't exist
         if (!container.querySelector('.lo-table')) {
             const table = document.createElement('table');
             table.className = 'lo-table';
             table.innerHTML = `
                 <thead>
                     <tr>
                         <th style="width: 30%;">LO Name</th>
                         <th style="width: 60%;">Description</th>
                         <th style="width: 10%;">Actions</th>
                     </tr>
                 </thead>
                 <tbody></tbody>
             `;
             container.appendChild(table);
         }
         
         const tbody = container.querySelector('.lo-table tbody');
         const row = document.createElement('tr');
         row.innerHTML = `
             <td>
                 <input type="text" class="form-control" name="loName_${loCounter}" placeholder="LO Name (e.g., LO1)" required>
             </td>
             <td>
                 <input type="text" class="form-control" name="loDescription_${loCounter}" placeholder="LO Description" required>
             </td>
             <td>
                 <button type="button" class="btn btn-danger btn-sm" onclick="removeLearningOutcome(this)">
                     <i class="fas fa-trash"></i>
                 </button>
             </td>
         `;
         tbody.appendChild(row);
     }
     
           function addEditLearningOutcome() {
          editLoCounter++;
          const container = document.getElementById('editLearningOutcomesContainer');
          
          // Create table if it doesn't exist
          if (!container.querySelector('.lo-table')) {
              const table = document.createElement('table');
              table.className = 'lo-table';
              table.innerHTML = `
                  <thead>
                      <tr>
                          <th style="width: 30%;">LO Name</th>
                          <th style="width: 60%;">Description</th>
                          <th style="width: 10%;">Actions</th>
                      </tr>
                  </thead>
                  <tbody></tbody>
              `;
              container.appendChild(table);
          }
          
          const tbody = container.querySelector('.lo-table tbody');
          const row = document.createElement('tr');
          row.innerHTML = `
              <td>
                  <input type="hidden" name="editLoId_${editLoCounter}" value="">
                  <input type="text" class="form-control" name="editLoName_${editLoCounter}" placeholder="LO Name (e.g., LO1)" required>
              </td>
              <td>
                  <input type="text" class="form-control" name="editLoDescription_${editLoCounter}" placeholder="LO Description" required>
              </td>
              <td>
                  <button type="button" class="btn btn-danger btn-sm" onclick="removeEditLearningOutcome(this)">
                      <i class="fas fa-trash"></i>
                  </button>
              </td>
          `;
          tbody.appendChild(row);
      }
     
     function removeLearningOutcome(button) {
         const row = button.closest('tr');
         row.remove();
         
         // Remove table if no rows left
         const container = document.getElementById('learningOutcomesContainer');
         const table = container.querySelector('.lo-table');
         if (table && table.querySelector('tbody').children.length === 0) {
             table.remove();
         }
     }
     
     function removeEditLearningOutcome(button) {
         const row = button.closest('tr');
         row.remove();
         
         // Remove table if no rows left
         const container = document.getElementById('editLearningOutcomesContainer');
         const table = container.querySelector('.lo-table');
         if (table && table.querySelector('tbody').children.length === 0) {
             table.remove();
         }
     }
     
     function clearLearningOutcomes() {
         const container = document.getElementById('learningOutcomesContainer');
         container.innerHTML = '';
         loCounter = 0;
     }
     
     function clearEditLearningOutcomes() {
         const container = document.getElementById('editLearningOutcomesContainer');
         container.innerHTML = '';
         editLoCounter = 0;
     }
     
           function getLearningOutcomesData(containerId) {
          const container = document.getElementById(containerId);
          const table = container.querySelector('.lo-table');
          if (!table) return [];
          
          const rows = table.querySelectorAll('tbody tr');
          const learningOutcomes = [];
          
          rows.forEach(row => {
              const nameInput = row.querySelector('input[name^="loName_"], input[name^="editLoName_"]');
              const descriptionInput = row.querySelector('input[name^="loDescription_"], input[name^="editLoDescription_"]');
              const idInput = row.querySelector('input[name^="loId_"], input[name^="editLoId_"]');
              
              if (nameInput && descriptionInput && nameInput.value.trim() && descriptionInput.value.trim()) {
                  learningOutcomes.push({
                      id: idInput ? idInput.value.trim() : '',
                      name: nameInput.value.trim(),
                      description: descriptionInput.value.trim()
                  });
              }
          });
          
          return learningOutcomes;
      }
 
     function saveCourse() {
                         // Get form data
        const courseName = document.getElementById('courseName').value;
        const courseCode = document.getElementById('courseCode').value;
        const qualificationId = document.getElementById('qualificationId').value;
        const description = document.getElementById('description').value;
        const learningOutcomes = getLearningOutcomesData('learningOutcomesContainer');
       
       // Validate required fields
       if (!courseName || !courseCode) {
           showError('Please fill in all required fields!');
           return;
       }
       
       // Create request data - adapt to backend DTO format
       const requestData = {
           courseName: courseName,
           courseCode: courseCode,
           qualificationId: qualificationId || null,
           description: description,
           learningOutcomes: learningOutcomes.map(lo => ({
               LOName: lo.name,
               description: lo.description
           }))
       };
        
        // Show loading state
        const saveButton = document.querySelector('#addCourseModal .btn-success');
        const originalText = saveButton.innerHTML;
        saveButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';
        saveButton.disabled = true;
        
        // Get anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        const tokenValue = token ? token.value : '';
        
        // Send AJAX request to backend
        fetch('/Admin/Course/Create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': tokenValue
            },
            body: JSON.stringify(requestData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                showSuccess('Course created successfully!');
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addCourseModal'));
                modal.hide();
                
                // Reset form
                document.getElementById('addCourseForm').reset();
                
                // Refresh page to show new course after a short delay
                setTimeout(() => {
                    location.reload();
                }, 2000);
            } else {
                // Show error message
                showError('Error: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error creating course:', error);
            showError('An error occurred while creating the course. Please try again.');
        })
        .finally(() => {
            // Reset button state
            saveButton.innerHTML = originalText;
            saveButton.disabled = false;
        });
    }

    function editCourse(courseId) {
        // Load course data and open edit modal
        console.log('Editing course:', courseId);
        
        // Show loading state
        const editModal = new bootstrap.Modal(document.getElementById('editCourseModal'));
        editModal.show();
        
        // Load course data from backend
        fetch(`/Admin/Course/GetCourseById/${courseId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.data) {
                    const course = data.data;
                    
                                         // Populate form fields
                     document.getElementById('editCourseId').value = course.id;
                     document.getElementById('editCourseName').value = course.courseName || '';
                     document.getElementById('editCourseCode').value = course.courseCode || '';
                     document.getElementById('editQualificationId').value = course.qualificationId || '';
                     document.getElementById('editDescription').value = course.description || '';
                     
                                           // Load learning outcomes
                      clearEditLearningOutcomes();
                      if (course.learningOutcomes && course.learningOutcomes.length > 0) {
                          course.learningOutcomes.forEach(lo => {
                              addEditLearningOutcome();
                              const tbody = document.querySelector('#editLearningOutcomesContainer .lo-table tbody');
                              const lastRow = tbody.lastElementChild;
                              if (lastRow) {
                                  const idInput = lastRow.querySelector('input[name^="editLoId_"]');
                                  const nameInput = lastRow.querySelector('input[name^="editLoName_"]');
                                  const descriptionInput = lastRow.querySelector('input[name^="editLoDescription_"]');
                                  if (idInput && nameInput && descriptionInput) {
                                      idInput.value = lo.id || '';
                                      nameInput.value = lo.loName || '';
                                      descriptionInput.value = lo.description || '';
                                  }
                              }
                          });
                      }
                    

                    
                    console.log('Course data loaded:', course);
                } else {
                    showError('Error loading course data: ' + (data.message || 'Unknown error'));
                    editModal.hide();
                }
            })
            .catch(error => {
                console.error('Error loading course data:', error);
                showError('An error occurred while loading course data. Please try again.');
                editModal.hide();
            });
    }

    function updateCourse() {
                         // Get form data
        const courseId = document.getElementById('editCourseId').value;
        const courseName = document.getElementById('editCourseName').value;
        const courseCode = document.getElementById('editCourseCode').value;
        const qualificationId = document.getElementById('editQualificationId').value;
        const description = document.getElementById('editDescription').value;
        const learningOutcomes = getLearningOutcomesData('editLearningOutcomesContainer');
       
       // Validate required fields
       if (!courseName || !courseCode) {
           showError('Please fill in all required fields!');
           return;
       }
       
                // Create request data - adapt to backend DTO format
        const requestData = {
            id: courseId,
            courseName: courseName,
            courseCode: courseCode,
            qualificationId: qualificationId || null,
            description: description,
            learningOutcomes: learningOutcomes.map(lo => ({
                id: lo.id,
                LOName: lo.name,
                description: lo.description
            }))
        };
        
        // Show loading state
        const updateButton = document.querySelector('#editCourseModal .btn-success');
        const originalText = updateButton.innerHTML;
        updateButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Updating...';
        updateButton.disabled = true;
        
        // Get anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        const tokenValue = token ? token.value : '';
        
        // Send AJAX request to backend
        fetch('/Admin/Course/Update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': tokenValue
            },
            body: JSON.stringify(requestData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                showSuccess('Course updated successfully!');
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('editCourseModal'));
                modal.hide();
                
                // Refresh page to show updated course after a short delay
                setTimeout(() => {
                    location.reload();
                }, 2000);
            } else {
                // Show error message
                showError('Error: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error updating course:', error);
            showError('An error occurred while updating the course. Please try again.');
        })
        .finally(() => {
            // Reset button state
            updateButton.innerHTML = originalText;
            updateButton.disabled = false;
        });
    }

    function deleteCourse(courseId) {
        // Show confirmation dialog using SweetAlert2
        showConfirm(
            'Are you sure you want to delete this course?',
            () => confirmDeleteCourse(courseId),
            null, // No cancel callback needed with SweetAlert2
            'Delete Course'
        );
    }

    function confirmDeleteCourse(courseId) {
        // Show loading message
        const loadingToast = showLoading('Deleting course...');
        
        // Get anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        const tokenValue = token ? token.value : '';
        
        // Send AJAX request to delete course
        fetch(`/Admin/Course/Delete/${courseId}`, {
            method: 'DELETE',
            headers: {
                'RequestVerificationToken': tokenValue
            }
        })
        .then(response => response.json())
        .then(data => {
            // Clear loading toast
            clearAllToasts();
            
            if (data.success) {
                showSuccess('Course deleted successfully!');
                // Reload the page after a short delay
                setTimeout(() => {
                    location.reload();
                }, 2000);
            } else {
                showError('Error: ' + data.message);
            }
        })
        .catch(error => {
            // Clear loading toast
            clearAllToasts();
            showAjaxError(error, 'An error occurred while deleting the course. Please try again.');
        });
    }

    function uploadExcel() {
        const fileInput = document.getElementById('excelFile');
        const file = fileInput.files[0];
        
        if (!file) {
            showError('Please select a file to upload');
            return;
        }
        
        // Validate file extension
        const allowedExtensions = ['.xlsx', '.xls'];
        const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));
        if (!allowedExtensions.includes(fileExtension)) {
            showError('Please select a valid Excel file (.xlsx or .xls)');
            return;
        }
        
        // Show loading state
        const uploadButton = document.querySelector('#uploadExcelModal .btn-success');
        const originalText = uploadButton.innerHTML;
        uploadButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Uploading...';
        uploadButton.disabled = true;
        
        // Create FormData
        const formData = new FormData();
        formData.append('file', file);
        
        // Get anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        const tokenValue = token ? token.value : '';
        
        // Send AJAX request
        fetch('/Admin/Course/UploadExcel', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': tokenValue
            },
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message with details
                let message = data.message;
                if (data.data && data.data.errors && data.data.errors.length > 0) {
                    message += '\n\nFirst few errors:\n' + data.data.errors.join('\n');
                }
                
                showSuccess(message);
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('uploadExcelModal'));
                modal.hide();
                
                // Reset file input
                fileInput.value = '';
                
                // Refresh page to show new courses after a short delay
                setTimeout(() => {
                    location.reload();
                }, 2000);
            } else {
                showError('Error: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error uploading Excel file:', error);
            showError('An error occurred while uploading the Excel file. Please try again.');
        })
        .finally(() => {
            // Reset button state
            uploadButton.innerHTML = originalText;
            uploadButton.disabled = false;
        });
    }

    // Load qualifications data
    function loadQualifications() {
        const tbody = document.getElementById('qualificationTableBody');
        tbody.innerHTML = `
            <tr>
                <td colspan="6" class="text-center py-4">
                    <div class="text-muted">
                        <i class="fas fa-spinner fa-spin fa-2x mb-3"></i>
                        <p class="mb-0">Loading qualifications...</p>
                    </div>
                </td>
            </tr>
        `;
        
        // Call actual API endpoint
        fetch('/Admin/Qualification/GetQualifications')
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    displayQualifications(result.data);
                    updateQualificationCount(result.data.length);
                } else {
                    showError(result.message || 'Failed to load qualifications');
                    displayQualifications([]);
                }
            })
            .catch(error => {
                console.error('Error loading qualifications:', error);
                showError('Failed to load qualifications');
                displayQualifications([]);
            });
    }

    // Load qualification types from database
    function loadQualificationTypes() {
        fetch('/Admin/Qualification/GetQualificationTypes')
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    populateQualificationTypeDropdowns(result.data);
                } else {
                    console.error('Failed to load qualification types:', result.message);
                    // Fallback to default options if API fails
                    populateQualificationTypeDropdowns([
                        'Bachelor', 'Diploma', 'Certificate', 'Master', 
                        'PhD', 'Graduate Diploma', 'Postgraduate Certificate'
                    ]);
                }
            })
            .catch(error => {
                console.error('Error loading qualification types:', error);
                // Fallback to default options if API fails
                populateQualificationTypeDropdowns([
                    'Bachelor', 'Diploma', 'Certificate', 'Master', 
                    'PhD', 'Graduate Diploma', 'Postgraduate Certificate'
                ]);
            });
    }

    // Load qualifications for course modals
    function loadQualificationsForCourse() {
        fetch('/Admin/Qualification/GetQualifications')
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    populateQualificationDropdowns(result.data);
                } else {
                    console.error('Failed to load qualifications:', result.message);
                }
            })
            .catch(error => {
                console.error('Error loading qualifications:', error);
            });
    }

    // Populate qualification dropdowns for course modals
    function populateQualificationDropdowns(qualifications) {
        const addDropdown = document.getElementById('qualificationId');
        const editDropdown = document.getElementById('editQualificationId');
        
        // Clear existing options except the first "Select Qualification" option
        if (addDropdown) {
            addDropdown.innerHTML = '<option value="">Select Qualification (Optional)</option>';
            qualifications.forEach(qual => {
                const option = document.createElement('option');
                option.value = qual.id;
                option.textContent = `Level ${qual.level} -- ${qual.qualificationType} (${qual.qualificationName})`;
                addDropdown.appendChild(option);
            });
        }
        
        if (editDropdown) {
            editDropdown.innerHTML = '<option value="">Select Qualification (Optional)</option>';
            qualifications.forEach(qual => {
                const option = document.createElement('option');
                option.value = qual.id;
                option.textContent = `Level ${qual.level} -- ${qual.qualificationType} (${qual.qualificationName})`;
                editDropdown.appendChild(option);
            });
        }
    }

    // Populate qualification type dropdowns
    function populateQualificationTypeDropdowns(types) {
        const addDropdown = document.getElementById('qualificationType');
        const editDropdown = document.getElementById('editQualificationType');
        
        // Clear existing options except the first "Select Type" option
        if (addDropdown) {
            addDropdown.innerHTML = '<option value="">Select Type</option>';
            types.forEach(type => {
                const option = document.createElement('option');
                option.value = type;
                option.textContent = type;
                addDropdown.appendChild(option);
            });
        }
        
        if (editDropdown) {
            editDropdown.innerHTML = '<option value="">Select Type</option>';
            types.forEach(type => {
                const option = document.createElement('option');
                option.value = type;
                option.textContent = type;
                editDropdown.appendChild(option);
            });
        }
    }

    // Display qualifications in table
    function displayQualifications(qualifications) {
        const tbody = document.getElementById('qualificationTableBody');
        
        if (!qualifications || qualifications.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="6" class="text-center py-4">
                        <div class="text-muted">
                            <i class="fas fa-certificate fa-2x mb-3"></i>
                            <p class="mb-0">No qualifications found</p>
                            <small>Click "Add Qualification" to create the first qualification</small>
                        </div>
                    </td>
                </tr>
            `;
            return;
        }
        
        tbody.innerHTML = qualifications.map(qual => `
            <tr>
                <td class="text-nowrap">${qual.qualificationName || 'N/A'}</td>
                <td class="text-nowrap">${qual.qualificationType || 'N/A'}</td>
                <td class="text-nowrap d-none d-md-table-cell">
                    <span class="badge bg-info">${qual.level || 'N/A'}</span>
                </td>
                <td class="text-nowrap d-none d-xl-table-cell">
                    <span class="badge ${qual.isActive ? 'bg-success' : 'bg-secondary'}">
                        ${qual.isActive ? 'Active' : 'Inactive'}
                    </span>
                </td>
                <td class="text-nowrap">
                    <div class="btn-group" role="group">
                        <button class="btn btn-success btn-sm" title="Edit" onclick="editQualification('${qual.id}')">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-danger btn-sm" title="Delete" onclick="deleteQualification('${qual.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');
    }

    // Update qualification count
    function updateQualificationCount(count) {
        document.getElementById('qualificationListCount').textContent = count;
    }

    // Search qualifications
    function searchQualifications() {
        const searchTerm = document.getElementById('qualificationSearchInput').value.trim();
        const clearBtn = document.getElementById('clearQualificationSearchBtn');
        
        if (searchTerm) {
            clearBtn.style.display = 'inline-block';
            // For now, just reload all and filter client-side
            // TODO: Implement server-side search
            loadQualifications();
        } else {
            clearBtn.style.display = 'none';
            loadQualifications();
        }
    }

    // Clear qualification search
    function clearQualificationSearch() {
        document.getElementById('qualificationSearchInput').value = '';
        document.getElementById('clearQualificationSearchBtn').style.display = 'none';
        loadQualifications();
    }

    // Save qualification
    function saveQualification() {
        const form = document.getElementById('addQualificationForm');
        const formData = new FormData(form);
        
        // Validate required fields
        const name = formData.get('qualificationName');
        const type = formData.get('qualificationType');
        const level = formData.get('level');
        
        if (!name || !type || !level) {
            showError('Please fill in all required fields!');
            return;
        }
        
        // Show loading state
        const saveButton = document.querySelector('#addQualificationModal .btn-success');
        const originalText = saveButton.innerHTML;
        saveButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';
        saveButton.disabled = true;
        
        // Prepare data for API call
        const qualificationData = {
            qualificationName: name,
            qualificationType: type,
            level: parseInt(level),
            isActive: formData.get('isActive') === 'on'
        };
        
        // Call API
        fetch('/Admin/Qualification/CreateQualification', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(qualificationData)
        })
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                showSuccess(result.message || 'Qualification created successfully!');
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addQualificationModal'));
                modal.hide();
                
                // Reset form
                form.reset();
                
                // Reload qualifications
                loadQualifications();
            } else {
                showError(result.message || 'Failed to create qualification');
            }
        })
        .catch(error => {
            console.error('Error creating qualification:', error);
            showError('Failed to create qualification');
        })
        .finally(() => {
            // Reset button state
            saveButton.innerHTML = originalText;
            saveButton.disabled = false;
        });
    }

    // Edit qualification
    function editQualification(qualificationId) {
        // Show loading state
        const editModal = new bootstrap.Modal(document.getElementById('editQualificationModal'));
        editModal.show();
        
        // Load qualification data
        fetch(`/Admin/Qualification/GetQualification?id=${qualificationId}`)
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    const qualification = result.data;
                    
                    // Populate form fields
                    document.getElementById('editQualificationHiddenId').value = qualification.id;
                    document.getElementById('editQualificationName').value = qualification.qualificationName;
                    document.getElementById('editQualificationType').value = qualification.qualificationType;
                    document.getElementById('editQualificationLevel').value = qualification.level || '';
                    document.getElementById('editQualificationIsActive').checked = qualification.isActive;
                } else {
                    showError(result.message || 'Failed to load qualification data');
                    editModal.hide();
                }
            })
            .catch(error => {
                console.error('Error loading qualification:', error);
                showError('Failed to load qualification data');
                editModal.hide();
            });
    }

    // Update qualification
    function updateQualification() {
        const form = document.getElementById('editQualificationForm');
        const formData = new FormData(form);
        
        // Validate required fields
        const name = formData.get('qualificationName');
        const type = formData.get('qualificationType');
        const level = formData.get('level');
        
        if (!name || !type || !level) {
            showError('Please fill in all required fields!');
            return;
        }
        
        // Show loading state
        const updateButton = document.querySelector('#editQualificationModal .btn-success');
        const originalText = updateButton.innerHTML;
        updateButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Updating...';
        updateButton.disabled = true;
        
        // Prepare data for API call
        const qualificationData = {
            id: formData.get('id'),
            qualificationName: name,
            qualificationType: type,
            level: parseInt(level),
            isActive: formData.get('isActive') === 'on'
        };
        
        // Call API
        fetch('/Admin/Qualification/UpdateQualification', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(qualificationData)
        })
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                showSuccess(result.message || 'Qualification updated successfully!');
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('editQualificationModal'));
                modal.hide();
                
                // Reset form
                form.reset();
                
                // Reload qualifications
                loadQualifications();
            } else {
                showError(result.message || 'Failed to update qualification');
            }
        })
        .catch(error => {
            console.error('Error updating qualification:', error);
            showError('Failed to update qualification');
        })
        .finally(() => {
            // Reset button state
            updateButton.innerHTML = originalText;
            updateButton.disabled = false;
        });
    }

    // Delete qualification
    function deleteQualification(qualificationId) {
        showConfirm(
            'Are you sure you want to delete this qualification?',
            () => {
                // Show loading message
                const loadingToast = showLoading('Deleting qualification...');
                
                // Call API
                fetch(`/Admin/Qualification/DeleteQualification?id=${qualificationId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(result => {
                    // Clear loading toast
                    clearAllToasts();
                    
                    if (result.success) {
                        showSuccess(result.message || 'Qualification deleted successfully!');
                        // Reload the page after a short delay
                        setTimeout(() => {
                            location.reload();
                        }, 2000);
                    } else {
                        showError(result.message || 'Failed to delete qualification');
                    }
                })
                .catch(error => {
                    console.error('Error deleting qualification:', error);
                    clearAllToasts();
                    showError('Failed to delete qualification');
                });
            },
            null,
            'Delete Qualification'
        );
    }
</script>

<style>
    /* Custom styles for the course management page */
    .table th {
        font-weight: 600;
        color: #495057;
        border-bottom: 2px solid #dee2e6;
    }
    
    .table td {
        vertical-align: middle;
        border-bottom: 1px solid #f8f9fa;
    }
    
    .table tbody tr:hover {
        background-color: #f8f9fa;
    }
    
    .btn-group .btn {
        margin-right: 2px;
    }
    
    .btn-group .btn:last-child {
        margin-right: 0;
    }
    
    /* Modal enhancements */
    .modal-header.bg-success {
        border-bottom: none;
    }
    
    .modal-title {
        color: white;
    }
    
    /* Form styling */
    .form-label {
        font-weight: 500;
        color: #495057;
    }
    
    .form-control:focus,
    .form-select:focus {
        border-color: #198754;
        box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
    }
    
    /* Modal layout fixes */
    .modal {
        z-index: 1060;
    }
    
    .modal-backdrop {
        z-index: 1055;
    }
    
    /* Ensure page layout remains stable when modal is open */
    body.modal-open {
        overflow: hidden;
        padding-right: 0 !important;
    }
    
    /* Badge styling */
    .badge {
        font-size: 0.875rem;
        padding: 0.5rem 0.75rem;
        border-radius: 20px;
    }
    
    /* Responsive table styles */
    .responsive-table {
        min-width: 800px; /* Ensure table has minimum width */
    }
    
    .tutor-badges {
        max-width: 200px;
    }
    
    .tutor-badges .badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
    }
    
    /* Table scrollbar styles */
    .table-responsive::-webkit-scrollbar {
        height: 8px;
    }
    
    .table-responsive::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }
    
    .table-responsive::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 4px;
    }
    
    .table-responsive::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }
    
    /* Responsive breakpoint optimization */
    @@media (max-width: 1200px) {
        .responsive-table {
            min-width: 700px;
        }
        
        .tutor-badges {
            max-width: 150px;
        }
    }
    
    @@media (max-width: 992px) {
        .responsive-table {
            min-width: 600px;
        }
        
        .table-responsive {
            font-size: 0.875rem;
        }
        
        .btn-group .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }
    }
    
    @@media (max-width: 768px) {
        .responsive-table {
            min-width: 500px;
        }
        
        .table-responsive {
            font-size: 0.8rem;
        }
        
        .btn-group .btn {
            padding: 0.2rem 0.4rem;
            font-size: 0.7rem;
        }
        
        .d-flex.gap-2 {
            flex-direction: column;
            gap: 0.5rem !important;
        }
        
        .d-flex.gap-2 .btn {
            width: 100%;
        }
        
        /* Search box takes full width on small screens */
        .input-group {
            max-width: 100% !important;
        }
    }
    
    @@media (max-width: 576px) {
        .responsive-table {
            min-width: 400px;
        }
        
        .table-responsive {
            font-size: 0.75rem;
        }
        
        .btn-group .btn {
            padding: 0.15rem 0.3rem;
            font-size: 0.65rem;
        }
        
        .card-header .row {
            flex-direction: column;
            gap: 1rem;
        }
        
        .card-header .col-md-6 {
            width: 100%;
        }
    }
    
    /* Empty state styling */
    .text-muted .fas {
        opacity: 0.5;
    }
    
    /* Tooltip styling */
    .tooltip-inner {
        max-width: 300px;
        text-align: left;
    }
    
    /* Enhanced dropdown styling */
    .form-select[multiple] {
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        padding: 0.5rem;
        background-color: #fff;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }
    
    .form-select[multiple]:focus {
        border-color: #198754;
        box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
        outline: 0;
    }
    
    .form-select[multiple] option {
        padding: 0.5rem;
        border-bottom: 1px solid #f8f9fa;
    }
    
    .form-select[multiple] option:checked {
        background-color: #198754;
        color: white;
    }
    
    .form-select[multiple] option:hover {
        background-color: #f8f9fa;
    }
    
         .form-text {
         font-size: 0.875rem;
         color: #6c757d;
         margin-top: 0.25rem;
     }
     
     /* Learning Outcomes Table Styles */
     .lo-table {
         width: 100%;
         border: 1px solid #dee2e6;
         border-radius: 0.375rem;
         overflow: hidden;
         margin-bottom: 0.5rem;
     }
     
     .lo-table thead th {
         background-color: #f8f9fa;
         border-bottom: 1px solid #dee2e6;
         padding: 0.75rem;
         font-weight: 600;
         color: #495057;
         font-size: 0.875rem;
     }
     
     .lo-table tbody td {
         padding: 0.75rem;
         border-bottom: 1px solid #f8f9fa;
         vertical-align: middle;
     }
     
     .lo-table tbody tr:last-child td {
         border-bottom: none;
     }
     
     .lo-table .form-control {
         border: 1px solid #ced4da;
         border-radius: 0.25rem;
         padding: 0.375rem 0.75rem;
         font-size: 0.875rem;
     }
     
     .lo-table .form-control:focus {
         border-color: #198754;
         box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
     }
     
     .lo-table .btn-danger {
         padding: 0.375rem 0.75rem;
         font-size: 0.875rem;
     }
     
     .lo-table .btn-danger i {
         font-size: 0.75rem;
     }
     
     /* Tab styling */
     .nav-tabs .nav-link {
         border: none;
         color: #6c757d;
         font-weight: 500;
         padding: 0.75rem 1.5rem;
         transition: all 0.2s ease-in-out;
     }
     
     .nav-tabs .nav-link:hover {
         border: none;
         color: #495057;
         background-color: #f8f9fa;
     }
     
     .nav-tabs .nav-link.active {
         border: none;
         color: #0d6efd;
         background-color: #fff;
         border-bottom: 3px solid #0d6efd;
     }
     
     .nav-tabs .nav-link .badge {
         font-size: 0.75rem;
         padding: 0.25rem 0.5rem;
     }
</style>

<!-- Add Qualification Modal -->
<div class="modal fade" id="addQualificationModal" tabindex="-1" aria-labelledby="addQualificationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="addQualificationModalLabel">
                    <i class="fas fa-plus me-2"></i>
                    Add Qualification
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addQualificationForm">
                    <div class="row g-3">
                        <div class="col-12 col-md-6">
                            <label for="qualificationName" class="form-label">Qualification Name</label>
                            <input type="text" class="form-control" id="qualificationName" name="qualificationName" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="qualificationType" class="form-label">Qualification Type</label>
                            <select class="form-select" id="qualificationType" name="qualificationType" required>
                                <option value="">Select Type</option>
                            </select>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="qualificationLevel" class="form-label">Level</label>
                            <select class="form-select" id="qualificationLevel" name="level" required>
                                <option value="">Select Level</option>
                                <option value="1">Level 1</option>
                                <option value="2">Level 2</option>
                                <option value="3">Level 3</option>
                                <option value="4">Level 4</option>
                                <option value="5">Level 5</option>
                                <option value="6">Level 6</option>
                                <option value="7">Level 7</option>
                                <option value="8">Level 8</option>
                                <option value="9">Level 9</option>
                                <option value="10">Level 10</option>
                            </select>
                        </div>
                        <div class="col-12">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="qualificationIsActive" name="isActive" checked>
                                <label class="form-check-label" for="qualificationIsActive">
                                    Active
                                </label>
                            </div>
                        </div>
                    </div>
                </form>
                <div class="row g-3">
                    <div class="col-12">
                        <div class="d-flex justify-content-end gap-2 mt-4">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" onclick="saveQualification()">
                                <i class="fas fa-save me-2"></i>
                                Add
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Qualification Modal -->
<div class="modal fade" id="editQualificationModal" tabindex="-1" aria-labelledby="editQualificationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="editQualificationModalLabel">
                    <i class="fas fa-edit me-2"></i>
                    Edit Qualification
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editQualificationForm">
                    <input type="hidden" id="editQualificationHiddenId" name="id">
                    <div class="row g-3">
                        <div class="col-12 col-md-6">
                            <label for="editQualificationName" class="form-label">Qualification Name</label>
                            <input type="text" class="form-control" id="editQualificationName" name="qualificationName" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editQualificationType" class="form-label">Qualification Type</label>
                            <select class="form-select" id="editQualificationType" name="qualificationType" required>
                                <option value="">Select Type</option>
                            </select>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editQualificationLevel" class="form-label">Level</label>
                            <select class="form-select" id="editQualificationLevel" name="level" required>
                                <option value="">Select Level</option>
                                <option value="1">Level 1</option>
                                <option value="2">Level 2</option>
                                <option value="3">Level 3</option>
                                <option value="4">Level 4</option>
                                <option value="5">Level 5</option>
                                <option value="6">Level 6</option>
                                <option value="7">Level 7</option>
                                <option value="8">Level 8</option>
                                <option value="9">Level 9</option>
                                <option value="10">Level 10</option>
                            </select>
                        </div>
                        <div class="col-12">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="editQualificationIsActive" name="isActive">
                                <label class="form-check-label" for="editQualificationIsActive">
                                    Active
                                </label>
                            </div>
                        </div>
                    </div>
                </form>
                <div class="row g-3">
                    <div class="col-12">
                        <div class="d-flex justify-content-end gap-2 mt-4">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" onclick="updateQualification()">
                                <i class="fas fa-save me-2"></i>
                                Update
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
