@model LOTA.Model.DTO.Admin.CourseReturnDTO
@{
    ViewData["Title"] = "Course Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    // Add anti-forgery token for AJAX requests
    var token = Html.AntiForgeryToken();
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="fw-bold text-dark mb-0">Course Details</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item"><a href="/Admin/Course">Courses</a></li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.CourseName</li>
                </ol>
            </nav>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addStudentToCourseModal">
                <i class="fas fa-user-plus me-2"></i>
                Add Students
            </button>
            <a href="/Admin/Course" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-2"></i>
                Back to Courses
            </a>
        </div>
    </div>

    <!-- Course Information Card -->
    <div class="row">
        <div class="col-lg-8">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-graduation-cap text-primary me-2"></i>
                        Course Information
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label fw-semibold text-muted">Course Name</label>
                            <p class="mb-0">@Model.CourseName</p>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label fw-semibold text-muted">Course Code</label>
                            <p class="mb-0">@Model.CourseCode</p>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label fw-semibold text-muted">Level</label>
                            <p class="mb-0">
                                @if (Model.Level > 0)
                                {
                                    <span class="badge bg-info">@Model.Level</span>
                                }
                                else
                                {
                                    <span class="text-muted">N/A</span>
                                }
                            </p>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label fw-semibold text-muted">Status</label>
                            <p class="mb-0">
                                <span class="badge @(Model.IsActive ? "bg-success" : "bg-secondary")">
                                    @(Model.IsActive ? "Active" : "Inactive")
                                </span>
                            </p>
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label fw-semibold text-muted">Qualification</label>
                            <p class="mb-0">
                                @if (!string.IsNullOrEmpty(Model.QualificationName))
                                {
                                    <div>
                                        <div class="fw-semibold">@Model.QualificationName</div>
                                        @if (!string.IsNullOrEmpty(Model.QualificationType))
                                        {
                                            <small class="text-muted">@Model.QualificationType</small>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <span class="text-muted">No qualification assigned</span>
                                }
                            </p>
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label fw-semibold text-muted">Description</label>
                            <p class="mb-0">
                                @if (!string.IsNullOrEmpty(Model.Description))
                                {
                                    @Model.Description
                                }
                                else
                                {
                                    <span class="text-muted">No description available</span>
                                }
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Learning Outcomes Card -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-target text-primary me-2"></i>
                        Learning Outcomes
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.LearningOutcomes != null && Model.LearningOutcomes.Any())
                    {
                        <div class="row">
                            @foreach (var lo in Model.LearningOutcomes)
                            {
                                <div class="col-12 mb-3">
                                    <div class="border rounded p-3">
                                        <h6 class="fw-semibold mb-2">@lo.LOName</h6>
                                        <p class="mb-0 text-muted">@lo.Description</p>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-target fa-2x text-muted mb-3"></i>
                            <p class="text-muted mb-0">No learning outcomes defined for this course</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Enrolled Students Card -->
        <div class="col-lg-4">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-users text-primary me-2"></i>
                        Enrolled Students
                        <span class="badge bg-primary ms-2" id="enrolledStudentsCount">0</span>
                    </h5>
                </div>
                <div class="card-body">
                    <div id="enrolledStudentsList">
                        <div class="text-center py-4">
                            <i class="fas fa-users fa-2x text-muted mb-3"></i>
                            <p class="text-muted mb-0">No students enrolled yet</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Students to Course Modal -->
<div class="modal fade" id="addStudentToCourseModal" tabindex="-1" aria-labelledby="addStudentToCourseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addStudentToCourseModalLabel">
                    <i class="fas fa-user-plus text-success me-2"></i>
                    Add Students to Course
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addStudentsToCourseForm">
                <div class="modal-body">
                    @token
                    <input type="hidden" id="courseId" value="@Model.Id">
                    <div class="mb-3">
                        <label for="studentSearch" class="form-label">Search Students</label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="studentSearch" placeholder="Search by name, email, or student ID...">
                            <button type="button" class="btn btn-outline-secondary" onclick="searchStudents()">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Available Students</label>
                        <div id="availableStudentsList" class="border rounded p-3" style="max-height: 300px; overflow-y: auto;">
                            <div class="text-center py-4">
                                <i class="fas fa-search fa-2x text-muted mb-3"></i>
                                <p class="text-muted mb-0">Search for students to add to this course</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save me-2"></i>
                        Add Selected Students
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/sweetalert-utils.js"></script>
    <script>
        // Load enrolled students when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadEnrolledStudents();
        });

        // Load enrolled students for this course
        async function loadEnrolledStudents() {
            try {
                const response = await fetch(`/Admin/Course/GetEnrolledStudents/${@Model.Id}`);
                const data = await response.json();

                if (data.success) {
                    displayEnrolledStudents(data.data);
                } else {
                    console.error('Error loading enrolled students:', data.message);
                }
            } catch (error) {
                console.error('Error loading enrolled students:', error);
            }
        }

        // Display enrolled students in the list
        function displayEnrolledStudents(students) {
            const container = document.getElementById('enrolledStudentsList');
            const countElement = document.getElementById('enrolledStudentsCount');

            if (students && students.length > 0) {
                countElement.textContent = students.length;
                container.innerHTML = students.map(student => `
                    <div class="d-flex align-items-center mb-3 p-2 border rounded">
                        <div class="flex-grow-1">
                            <div class="fw-semibold">${student.firstName || ''} ${student.lastName || ''}</div>
                            <small class="text-muted">${student.studentNo || 'N/A'}</small>
                        </div>
                        <button class="btn btn-outline-danger btn-sm" onclick="removeStudentFromCourse('${student.id}')" title="Remove from course">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `).join('');
            } else {
                countElement.textContent = '0';
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-users fa-2x text-muted mb-3"></i>
                        <p class="text-muted mb-0">No students enrolled yet</p>
                    </div>
                `;
            }
        }

        // Search for available students
        async function searchStudents() {
            const searchTerm = document.getElementById('studentSearch').value.trim();
            const container = document.getElementById('availableStudentsList');

            if (!searchTerm) {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-search fa-2x text-muted mb-3"></i>
                        <p class="text-muted mb-0">Enter a search term to find students</p>
                    </div>
                `;
                return;
            }

            try {
                const response = await fetch(`/Admin/Student/SearchStudents?searchTerm=${encodeURIComponent(searchTerm)}`);
                const data = await response.json();

                if (data.success) {
                    displayAvailableStudents(data.data);
                } else {
                    container.innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-exclamation-triangle fa-2x text-warning mb-3"></i>
                            <p class="text-muted mb-0">Error: ${data.message}</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error searching students:', error);
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-exclamation-triangle fa-2x text-warning mb-3"></i>
                        <p class="text-muted mb-0">Error searching for students</p>
                    </div>
                `;
            }
        }

        // Display available students in the modal
        function displayAvailableStudents(students) {
            const container = document.getElementById('availableStudentsList');

            if (students && students.length > 0) {
                container.innerHTML = students.map(student => `
                    <div class="form-check mb-2">
                        <input class="form-check-input" type="checkbox" value="${student.id}" id="student_${student.id}">
                        <label class="form-check-label" for="student_${student.id}">
                            <div class="fw-semibold">${student.firstName || ''} ${student.lastName || ''}</div>
                            <small class="text-muted">${student.studentNo || 'N/A'} • ${student.email || 'N/A'}</small>
                        </label>
                    </div>
                `).join('');
            } else {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-search fa-2x text-muted mb-3"></i>
                        <p class="text-muted mb-0">No students found</p>
                    </div>
                `;
            }
        }

        // Add students to course form submission
        document.getElementById('addStudentsToCourseForm').addEventListener('submit', function(e) {
            e.preventDefault();
            addStudentsToCourse();
        });

        // Add selected students to the course
        async function addStudentsToCourse() {
            const courseId = document.getElementById('courseId').value;
            const selectedStudents = Array.from(document.querySelectorAll('#availableStudentsList input[type="checkbox"]:checked'))
                .map(checkbox => checkbox.value);

            if (selectedStudents.length === 0) {
                showError('Please select at least one student to add to the course.');
                return;
            }

            try {
                const response = await fetch('/Admin/Course/AddStudentsToCourse', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        courseId: courseId,
                        studentIds: selectedStudents
                    })
                });

                const data = await response.json();

                if (data.success) {
                    showSuccess('Students added to course successfully!');
                    
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addStudentToCourseModal'));
                    modal.hide();
                    
                    // Reset form
                    document.getElementById('addStudentsToCourseForm').reset();
                    document.getElementById('availableStudentsList').innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-search fa-2x text-muted mb-3"></i>
                            <p class="text-muted mb-0">Search for students to add to this course</p>
                        </div>
                    `;
                    
                    // Reload enrolled students
                    loadEnrolledStudents();
                } else {
                    showError('Error: ' + data.message);
                }
            } catch (error) {
                console.error('Error adding students to course:', error);
                showError('An error occurred while adding students to the course.');
            }
        }

        // Remove student from course
        async function removeStudentFromCourse(studentId) {
            const courseId = document.getElementById('courseId').value;

            showConfirm(
                'Are you sure you want to remove this student from the course?',
                async () => {
                    try {
                        const response = await fetch('/Admin/Course/RemoveStudentFromCourse', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({
                                courseId: courseId,
                                studentId: studentId
                            })
                        });

                        const data = await response.json();

                        if (data.success) {
                            showSuccess('Student removed from course successfully!');
                            loadEnrolledStudents();
                        } else {
                            showError('Error: ' + data.message);
                        }
                    } catch (error) {
                        console.error('Error removing student from course:', error);
                        showError('An error occurred while removing the student from the course.');
                    }
                },
                null,
                'Remove Student'
            );
        }
    </script>
}
