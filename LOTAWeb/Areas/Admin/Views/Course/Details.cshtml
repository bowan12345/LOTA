@model LOTA.Model.DTO.Admin.CourseReturnDTO
@{
    ViewData["Title"] = "Course Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    // Add anti-forgery token for AJAX requests
    var token = Html.AntiForgeryToken();
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="fw-bold text-dark mb-0">Course Details</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item"><a href="/Admin/Course">Courses</a></li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.CourseName</li>
                </ol>
            </nav>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addStudentToCourseModal">
                <i class="fas fa-user-plus me-2"></i>
                Add Students
            </button>
            <button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#uploadExcelModal">
                <i class="fas fa-file-excel me-2"></i>
                Upload Excel
            </button>
            <a href="/Admin/Course" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-2"></i>
                Back to Courses
            </a>
        </div>
    </div>

    <!-- Course Information Card -->
    <div class="row">
        <div class="col-lg-8">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-graduation-cap text-primary me-2"></i>
                        Course Information
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label fw-semibold text-muted">Course Name</label>
                            <p class="mb-0">@Model.CourseName</p>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label fw-semibold text-muted">Course Code</label>
                            <p class="mb-0">@Model.CourseCode</p>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label fw-semibold text-muted">Level</label>
                            <p class="mb-0">
                                @if (Model.Level > 0)
                                {
                                    <span class="badge bg-info">@Model.Level</span>
                                }
                                else
                                {
                                    <span class="text-muted">N/A</span>
                                }
                            </p>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label fw-semibold text-muted">Status</label>
                            <p class="mb-0">
                                <span class="badge @(Model.IsActive ? "bg-success" : "bg-secondary")">
                                    @(Model.IsActive ? "Active" : "Inactive")
                                </span>
                            </p>
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label fw-semibold text-muted">Qualification</label>
                            <p class="mb-0">
                                @if (!string.IsNullOrEmpty(Model.QualificationName))
                                {
                                    <div>
                                        <div class="fw-semibold">@Model.QualificationName</div>
                                        @if (!string.IsNullOrEmpty(Model.QualificationType))
                                        {
                                            <small class="text-muted">@Model.QualificationType</small>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <span class="text-muted">No qualification assigned</span>
                                }
                            </p>
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label fw-semibold text-muted">Description</label>
                            <p class="mb-0">
                                @if (!string.IsNullOrEmpty(Model.Description))
                                {
                                    @Model.Description
                                }
                                else
                                {
                                    <span class="text-muted">No description available</span>
                                }
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Learning Outcomes Card -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-target text-primary me-2"></i>
                        Learning Outcomes
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.LearningOutcomes != null && Model.LearningOutcomes.Any())
                    {
                        <div class="row">
                            @foreach (var lo in Model.LearningOutcomes)
                            {
                                <div class="col-12 mb-3">
                                    <div class="border rounded p-3">
                                        <h6 class="fw-semibold mb-2">@lo.LOName</h6>
                                        <p class="mb-0 text-muted">@lo.Description</p>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-target fa-2x text-muted mb-3"></i>
                            <p class="text-muted mb-0">No learning outcomes defined for this course</p>
                            <small class="text-muted">Learning outcomes help define what students will learn</small>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Enrolled Students Card -->
        <div class="col-lg-4">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-users text-primary me-2"></i>
                        Enrolled Students
                        <span class="badge bg-primary ms-2" id="enrolledStudentsCount">0</span>
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Filter Controls -->
                    <div class="mb-3">
                        <div class="row g-2">
                            <div class="col-6">
                                <label for="filterAcademicYear" class="form-label small text-muted">Academic Year</label>
                                <select class="form-select form-select-sm" id="filterAcademicYear" onchange="filterEnrolledStudents();">
                                    <option value="">Select Academic Year</option>
                                </select>
                            </div>
                            <div class="col-6">
                                <label for="filterTrimester" class="form-label small text-muted">Trimester</label>
                                <select class="form-select form-select-sm" id="filterTrimester" onchange="filterEnrolledStudents();">
                                    <option value="">Select Trimester</option>
                                </select>
                            </div>
                        </div>
                        <div class="mt-2">
                            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="clearFilters()">
                                <i class="fas fa-times me-1"></i>Clear
                            </button>
                        </div>
                    </div>
                    
                    <div id="enrolledStudentsList" class="enrolled-students-list">
                        <div class="text-center py-4">
                            <i class="fas fa-users fa-2x text-muted mb-3"></i>
                            <p class="text-muted mb-0">No students enrolled yet</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Students to Course Modal -->
<div class="modal fade" id="addStudentToCourseModal" tabindex="-1" aria-labelledby="addStudentToCourseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addStudentToCourseModalLabel">
                    <i class="fas fa-user-plus text-success me-2"></i>
                    Add Students to Course
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addStudentsToCourseForm">
                <div class="modal-body">
                    @token
                    <input type="hidden" id="courseId" value="@Model.Id">
                    
                    <!-- Academic Year and Trimester Selection -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="academicYear" class="form-label">Academic Year</label>
                            <select class="form-select" id="academicYear" required>
                                <option value="">Select Academic Year</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="trimesterNumber" class="form-label">Trimester</label>
                            <select class="form-select" id="trimesterNumber" required>
                                <option value="">Select Trimester</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="studentSearch" class="form-label">Search Students</label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="studentSearch" placeholder="Search by name, email, or student ID..." oninput="searchStudents()">
                            <button type="button" class="btn btn-outline-secondary" onclick="searchStudents()">
                                <i class="fas fa-search"></i>
                            </button>
                            <button type="button" class="btn btn-outline-info" onclick="clearStudentSearch()">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>

                    </div>
                    <div class="mb-3">
                        <label class="form-label">Available Students</label>
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="text-muted small" id="selectedStudentsCount">0 student(s) selected</span>
                        </div>
                        <div id="availableStudentsList" class="border rounded p-3 student-search-results">
                            <div class="text-center py-4">
                                <i class="fas fa-search fa-2x text-muted mb-3"></i>
                                <p class="text-muted mb-0">Search for students to add to this course</p>
                                <small class="text-muted">Search by name, email, or student ID</small>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save me-2"></i>
                        Add Selected Students
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Upload Excel Modal -->
<div class="modal fade" id="uploadExcelModal" tabindex="-1" aria-labelledby="uploadExcelModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadExcelModalLabel">
                    <i class="fas fa-file-excel text-info me-2"></i>
                    Upload Students Excel
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="uploadExcelForm" enctype="multipart/form-data">
                <div class="modal-body">
                    @token
                    <input type="hidden" id="excelCourseId" value="@Model.Id">
                    
                    <!-- Academic Year and Trimester Selection -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="excelAcademicYear" class="form-label">Academic Year</label>
                            <select class="form-select" id="excelAcademicYear" required>
                                <option value="">Select Academic Year</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="excelTrimesterNumber" class="form-label">Trimester</label>
                            <select class="form-select" id="excelTrimesterNumber" required>
                                <option value="">Select Trimester</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="excelFile" class="form-label">Excel File</label>
                        <input type="file" class="form-control" id="excelFile" accept=".xlsx,.xls,.csv" required>
                        <div class="form-text">
                            <strong>Required format:</strong> Excel file with columns: Student ID (A) and Email (B)<br>
                        </div>
                    </div>
                    
                    <div class="alert alert-info">
                        <h6><i class="fas fa-info-circle me-2"></i>Instructions:</h6>
                        <ul class="mb-0">
                            <li>First column (A) should contain Student ID</li>
                            <li>Second column (B) should contain Email</li>
                            <li>Students will be verified by Student ID or Email</li>
                            <li>Only existing students can be added to the course</li>
                        </ul>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-info">
                        <i class="fas fa-upload me-2"></i>
                        Upload and Import
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .student-card {
            transition: all 0.2s ease-in-out;
        }
        
        .student-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .form-check-input:checked + .form-check-label {
            background-color: #e7f3ff;
            border-color: #0d6efd;
        }
        
        .form-check-input:checked + .form-check-label .fw-semibold {
            color: #0d6efd !important;
        }
        
        .loading-spinner {
            animation: spin 1s linear infinite;
        }
        
        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .modal-body {
            max-height: 70vh;
            overflow-y: auto;
        }
        
        .student-search-results {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .enrolled-students-list {
            max-height: 500px;
            overflow-y: auto;
        }
    </style>
}

@section Scripts {
    <script src="~/js/sweetalert-utils.js"></script>
    <script>
        // Flag to prevent duplicate loading of trimesters
        let trimestersLoaded = false;
        
        // Load enrolled students when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Load academic years for the filter dropdown
            loadTrimesters();
            
            // Auto-load current trimester students after a short delay
            setTimeout(() => {
                autoLoadCurrentTrimesterStudents();
            }, 500);
            
            // Add modal event listeners to load data when modals are opened
            const addStudentModal = document.getElementById('addStudentToCourseModal');
            if (addStudentModal) {
                addStudentModal.addEventListener('show.bs.modal', function() {
                    // Only load trimesters if not already loaded
                    if (!trimestersLoaded) {
                        loadTrimesters();
                    }
                    setupFormEventListeners(); // Setup form event listeners
                });
            }
            
            const uploadExcelModal = document.getElementById('uploadExcelModal');
            if (uploadExcelModal) {
                uploadExcelModal.addEventListener('show.bs.modal', function() {
                    // Only load trimesters if not already loaded
                    if (!trimestersLoaded) {
                        loadTrimesters();
                    }
                    setupFormEventListeners(); // Setup form event listeners
                });
            }
        });

        // Auto-load students for current trimester
        async function autoLoadCurrentTrimesterStudents() {
            try {
                const response = await fetch('/Admin/Trimester/GetActiveTrimesters');
                const data = await response.json();

                if (data.success && data.data.length > 0) {
                    const trimesters = data.data;
                    
                    // Find current trimester (most recent or current date)
                    const currentDate = new Date();
                    const currentYear = currentDate.getFullYear();
                    
                    // Try to find current year's trimester, fallback to most recent
                    let currentTrimester = trimesters.find(t => t.academicYear === currentYear);
                    if (!currentTrimester) {
                        currentTrimester = trimesters[0]; // Use first available trimester
                    }
                    
                    if (currentTrimester) {
                        // Set filter values
                        document.getElementById('filterAcademicYear').value = currentTrimester.academicYear;
                        
                        // Populate trimester dropdown for the selected academic year
                        const filterTrimesterSelect = document.getElementById('filterTrimester');
                        populateFilterTrimesterByYear(currentTrimester.academicYear, filterTrimesterSelect);
                        
                        // Set trimester value
                        document.getElementById('filterTrimester').value = currentTrimester.trimesterNumber;
                        
                        // Load students for current trimester
                        loadEnrolledStudents(currentTrimester.academicYear, currentTrimester.trimesterNumber);
                    } else {
                        // No trimesters available, show filter message
                        showFilterMessage();
                    }
                } else {
                    showFilterMessage();
                }
            } catch (error) {
                console.error('Error auto-loading current trimester:', error);
                showFilterMessage();
            }
        }

        // Show filter message when no data is available
        function showFilterMessage() {
            const container = document.getElementById('enrolledStudentsList');
            const countElement = document.getElementById('enrolledStudentsCount');
            
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-filter fa-2x text-muted mb-3"></i>
                    <p class="text-muted mb-0">Please select Academic Year and Trimester to view enrolled students</p>
                    <small class="text-muted">Use the filters above to search for students</small>
                </div>
            `;
            countElement.textContent = '0';
        }



        // Load enrolled students for this course
        async function loadEnrolledStudents(academicYear = null, trimesterNumber = null) {
            
            const container = document.getElementById('enrolledStudentsList');
            const countElement = document.getElementById('enrolledStudentsCount');
            
            // Show loading state
            container.innerHTML = `
                <div class="text-center py-4">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted mb-0">Loading enrolled students...</p>
                </div>
            `;
            
            try {
                let url = `/Admin/Student/GetEnrolledStudents/${document.getElementById('courseId').value}`;
                const params = new URLSearchParams();
                
                // Only append parameters if they are valid numbers
                if (academicYear && !isNaN(academicYear)) {
                    params.append('academicYear', academicYear.toString());
                }
                if (trimesterNumber && !isNaN(trimesterNumber)) {
                    params.append('trimesterNumber', trimesterNumber.toString());
                }
                
                if (params.toString()) {
                    url += '?' + params.toString();
                }
                
                const response = await fetch(url);
                const data = await response.json();
                
                if (data.success) {
                    const students = data.data;
                    
                    if (students && students.length > 0) {
                        // Display enrolled students in the list
                        displayEnrolledStudents(students);
                        countElement.textContent = students.length;
                    } else {
                        container.innerHTML = `
                            <div class="text-center py-4">
                                <i class="fas fa-users fa-2x text-muted mb-3"></i>
                                <p class="text-muted mb-0">No students enrolled for the selected criteria</p>
                                <small class="text-muted">Try changing the filters or adding students to this course</small>
                            </div>
                        `;
                        countElement.textContent = '0';
                    }
                } else {
                    console.error('Error loading enrolled students:', data.message);
                    container.innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-exclamation-triangle fa-2x text-warning mb-3"></i>
                            <p class="text-muted mb-0">Error loading enrolled students</p>
                            <small class="text-danger">${data.message}</small>
                        </div>
                    `;
                    countElement.textContent = '0';
                }
            } catch (error) {
                console.error('Error loading enrolled students:', error);
                container.innerHTML = `
                     <div class="text-center py-4">
                         <i class="fas fa-exclamation-triangle fa-2x text-warning mb-3"></i>
                         <p class="text-muted mb-0">Error loading enrolled students</p>
                         <small class="text-danger">${error.message}</small>
                     </div>
                 `;
                 countElement.textContent = '0';
             }
             
         }

        // Filter enrolled students based on selected criteria
        function filterEnrolledStudents() {
            
            const academicYear = document.getElementById('filterAcademicYear').value;
            const trimester = document.getElementById('filterTrimester').value;
            
            // Only load students if both filters are selected
            if (academicYear && trimester) {
                // Convert to integers for backend
                const academicYearParam = parseInt(academicYear);
                const trimesterParam = parseInt(trimester);
                
                loadEnrolledStudents(academicYearParam, trimesterParam);
            } else {
                // Show message that both filters are required
                const container = document.getElementById('enrolledStudentsList');
                const countElement = document.getElementById('enrolledStudentsCount');
                
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-filter fa-2x text-muted mb-3"></i>
                        <p class="text-muted mb-0">Please select both Academic Year and Trimester to view enrolled students</p>
                        <small class="text-muted">Use the filters above to search for students</small>
                    </div>
                `;
                countElement.textContent = '0';
            }
        }



        // Clear all filters
        function clearFilters() {
            document.getElementById('filterAcademicYear').value = '';
            document.getElementById('filterTrimester').value = '';
            
            // Reset trimester dropdown to show "Please select Academic Year first" message
            const filterTrimesterSelect = document.getElementById('filterTrimester');
            filterTrimesterSelect.innerHTML = '<option value="">Please select Academic Year first</option>';
            
            // Try to auto-load current trimester students
            autoLoadCurrentTrimesterStudents();
        }

        // Load trimesters for academic year and trimester selection
        async function loadTrimesters() {
            try {
                const response = await fetch('/Admin/Trimester/GetActiveTrimesters');
                const data = await response.json();

                if (data.success) {
                    const trimesters = data.data;
                    
                    // Populate academic year dropdowns
                    const academicYearSelect = document.getElementById('academicYear');           // Add Students Modal
                    const excelAcademicYearSelect = document.getElementById('excelAcademicYear'); // Upload Excel Modal
                    const filterAcademicYearSelect = document.getElementById('filterAcademicYear'); // Filter dropdown
                    
                    // Clear existing options
                    academicYearSelect.innerHTML = '<option value="">Select Academic Year</option>';
                    excelAcademicYearSelect.innerHTML = '<option value="">Select Academic Year</option>';
                    filterAcademicYearSelect.innerHTML = '<option value="">Select Year</option>';
                    
                    // Get unique academic years
                    const uniqueYears = [...new Set(trimesters.map(t => t.academicYear))].sort();
                    
                    uniqueYears.forEach(year => {
                        // Add to add students modal
                        const option1 = document.createElement('option');
                        option1.value = year;
                        option1.textContent = year;
                        academicYearSelect.appendChild(option1);
                        
                        // Add to upload excel modal
                        const option2 = document.createElement('option');
                        option2.value = year;
                        option2.textContent = year;
                        excelAcademicYearSelect.appendChild(option2);
                        
                        // Add to filter dropdown
                        const option3 = document.createElement('option');
                        option3.value = year;
                        option3.textContent = year;
                        filterAcademicYearSelect.appendChild(option3);
                    });
                    
                    // Populate trimester dropdowns for modals (these will be populated when academic year is selected)
                    const trimesterSelect = document.getElementById('trimesterNumber');           // Add Students Modal
                    const excelTrimesterSelect = document.getElementById('excelTrimesterNumber'); // Upload Excel Modal
                    
                    // Clear existing options
                    trimesterSelect.innerHTML = '<option value="">Select Trimester</option>';
                    excelTrimesterSelect.innerHTML = '<option value="">Select Trimester</option>';
                    
                    // For the filter dropdown, initially show "Please select Academic Year first"
                    const filterTrimesterSelect = document.getElementById('filterTrimester');
                    filterTrimesterSelect.innerHTML = '<option value="">Please select Academic Year first</option>';
                    
                    // Store trimesters data globally for later use
                    window.availableTrimesters = trimesters;
                    
                    // Set flag to prevent duplicate loading
                    trimestersLoaded = true;
                    
                } else {
                    console.error('Error loading trimesters:', data.message);
                }
            } catch (error) {
                console.error('Error loading trimesters:', error);
            }
        }

        // Setup form event listeners for academic year and trimester linkage
        function setupFormEventListeners() {
            // Add Students Modal - Academic Year change event
            const addStudentAcademicYear = document.getElementById('academicYear');
            if (addStudentAcademicYear) {
                addStudentAcademicYear.addEventListener('change', function() {
                    const selectedYear = this.value;
                    const trimesterSelect = document.getElementById('trimesterNumber');
                    populateTrimesterNumbersByYear(selectedYear, trimesterSelect);
                });
            }
            
            // Upload Excel Modal - Academic Year change event
            const excelAcademicYear = document.getElementById('excelAcademicYear');
            if (excelAcademicYear) {
                excelAcademicYear.addEventListener('change', function() {
                    const selectedYear = this.value;
                    const trimesterSelect = document.getElementById('excelTrimesterNumber');
                    populateTrimesterNumbersByYear(selectedYear, trimesterSelect);
                });
            }
            
            // Filter dropdown - Academic Year change event
            const filterAcademicYear = document.getElementById('filterAcademicYear');
            if (filterAcademicYear) {
                filterAcademicYear.addEventListener('change', function() {
                    const selectedYear = this.value;
                    const filterTrimesterSelect = document.getElementById('filterTrimester');
                    populateFilterTrimesterByYear(selectedYear, filterTrimesterSelect);
                });
            }
        }
        
        // Populate trimester numbers based on selected academic year for modals
        function populateTrimesterNumbersByYear(academicYear, trimesterSelect) {
            trimesterSelect.innerHTML = '<option value="">Select Trimester</option>';
            
            if (!academicYear) return;
            
            // Get trimesters from the stored data
            if (window.availableTrimesters) {
                const yearTrimesters = window.availableTrimesters.filter(t => t.academicYear == academicYear);
                yearTrimesters.forEach(trimester => {
                    const option = new Option(`Trimester ${trimester.trimesterNumber}`, trimester.trimesterNumber);
                    trimesterSelect.add(option);
                });
            }
        }
        
        // Populate filter trimester dropdown based on selected academic year
        function populateFilterTrimesterByYear(academicYear, filterTrimesterSelect) {
            filterTrimesterSelect.innerHTML = '<option value="">Select Trimester</option>';
            
            if (!academicYear) {
                filterTrimesterSelect.innerHTML = '<option value="">Please select Academic Year first</option>';
                return;
            }
            
            // Get trimesters from the stored data
            if (window.availableTrimesters) {
                const yearTrimesters = window.availableTrimesters.filter(t => t.academicYear == academicYear);
                yearTrimesters.forEach(trimester => {
                    const option = new Option(`Trimester ${trimester.trimesterNumber}`, trimester.trimesterNumber);
                    filterTrimesterSelect.add(option);
                });
            }
        }
        
        // Legacy function for backward compatibility
        function populateTrimesterNumbers(academicYear, trimesterSelect) {
            populateTrimesterNumbersByYear(academicYear, trimesterSelect);
        }

        // Get trimester ID based on academic year and trimester number
        async function getTrimesterId(academicYear, trimesterNumber) {
            try {
                const response = await fetch('/Admin/Trimester/GetActiveTrimesters');
                const data = await response.json();
                
                if (data.success) {
                    const trimester = data.data.find(t => 
                        t.academicYear === academicYear && t.trimesterNumber === trimesterNumber
                    );
                    return trimester ? trimester.id : null;
                }
            } catch (error) {
                console.error('Error getting trimester ID:', error);
            }
            return null;
        }

        // Display enrolled students in the list
        function displayEnrolledStudents(students) {
            const container = document.getElementById('enrolledStudentsList');
            const countElement = document.getElementById('enrolledStudentsCount');

            if (students && students.length > 0) {
                countElement.textContent = students.length;
                container.innerHTML = `
                    <div class="mb-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="text-muted small">Total enrolled: ${students.length}</span>
                        </div>
                    </div>
                    ${students.map(student => `
                        <div class="d-flex align-items-center mb-3 p-3 border rounded bg-light student-card">
                            <div class="flex-grow-1">
                                <div class="d-flex align-items-center mb-1">
                                    <div class="fw-semibold text-dark me-2">${student.firstName || ''} ${student.lastName || ''}</div>
                                    <span class="badge ${student.isActive ? 'bg-success' : 'bg-secondary'} small">
                                        ${student.isActive ? 'Active' : 'Inactive'}
                                    </span>
                                </div>
                                <div class="text-muted small">
                                    <i class="fas fa-id-card me-1"></i>${student.studentNo || 'N/A'}
                                </div>
                                <div class="text-muted small">
                                    <i class="fas fa-envelope me-1"></i>${student.email || 'N/A'}
                                </div>
                            </div>
                            <div class="ms-2">
                                <button class="btn btn-outline-danger btn-sm" onclick="removeStudentFromCourse('${student.id}')" title="Remove from course">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                    `).join('')}
                `;
            } else {
                countElement.textContent = '0';
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-users fa-2x text-muted mb-3"></i>
                        <p class="text-muted mb-0">No students enrolled yet</p>
                        <small class="text-muted">Use the "Add Students" button above to enroll students</small>
                        <div class="mt-2">
                            <button class="btn btn-outline-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addStudentToCourseModal">
                                <i class="fas fa-user-plus me-1"></i>Add Students Now
                            </button>
                        </div>
                    </div>
                `;
            }
        }

        // Search timeout for debouncing
        let searchTimeout;

        // Search for available students
        async function searchStudents() {
            const searchTerm = document.getElementById('studentSearch').value.trim();
            const container = document.getElementById('availableStudentsList');

            if (!searchTerm) {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-search fa-2x text-muted mb-3"></i>
                        <p class="text-muted mb-0">Enter a search term to find students</p>
                    </div>
                `;
                return;
            }

            // Show typing indicator for better UX
            if (searchTerm.length < 3) {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-keyboard fa-2x text-muted mb-3"></i>
                        <p class="text-muted mb-0">Type at least 3 characters to search</p>
                    </div>
                `;
                return;
            }

            // Clear previous timeout
            if (searchTimeout) {
                clearTimeout(searchTimeout);
            }

            // Set new timeout for debounced search
            searchTimeout = setTimeout(async () => {
                await performStudentSearch(searchTerm, container);
            }, 300);
        }

        // Perform the actual student search
        async function performStudentSearch(searchTerm, container) {

            // Show loading state
            container.innerHTML = `
                <div class="text-center py-4">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted mb-0">Searching for students...</p>
                </div>
            `;

            try {
                const response = await fetch(`/Admin/Student/SearchStudents?searchTerm=${encodeURIComponent(searchTerm)}`);
                const data = await response.json();

                if (data.success) {
                    displayAvailableStudents(data.data);
                } else {
                    container.innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-exclamation-triangle fa-2x text-warning mb-3"></i>
                            <p class="text-muted mb-0">Error: ${data.message}</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error searching students:', error);
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-exclamation-triangle fa-2x text-warning mb-3"></i>
                        <p class="text-muted mb-0">Error searching for students</p>
                    </div>
                `;
            }
        }

        // Display available students in the modal
        function displayAvailableStudents(students) {
            const container = document.getElementById('availableStudentsList');

            if (students && students.length > 0) {
                container.innerHTML = `
                    <div class="mb-3">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="text-muted small">Found ${students.length} student(s)</span>
                            <div>
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="selectAllStudents()">
                                    <i class="fas fa-check-double me-1"></i>Select All
                                </button>
                                <button type="button" class="btn btn-outline-secondary btn-sm ms-1" onclick="deselectAllStudents()">
                                    <i class="fas fa-times me-1"></i>Deselect All
                                </button>
                            </div>
                        </div>
                    </div>
                                            ${students.map(student => `
                            <div class="form-check mb-3 p-3 border rounded student-card">
                                <input class="form-check-input" type="checkbox" value="${student.id}" id="student_${student.id}" onchange="updateSelectedStudentsCount()">
                                <label class="form-check-label w-100" for="student_${student.id}">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <div class="fw-semibold text-dark">${student.firstName || ''} ${student.lastName || ''}</div>
                                            <div class="text-muted small">
                                                <i class="fas fa-id-card me-1"></i>${student.studentNo || 'N/A'}
                                            </div>
                                            <div class="text-muted small">
                                                <i class="fas fa-envelope me-1"></i>${student.email || 'N/A'}
                                            </div>
                                        </div>
                                        <div class="ms-2">
                                            <span class="badge ${student.isActive ? 'bg-success' : 'bg-secondary'}">
                                                ${student.isActive ? 'Active' : 'Inactive'}
                                            </span>
                                        </div>
                                    </div>
                                </label>
                            </div>
                        `).join('')}
                `;
            } else {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-search fa-2x text-muted mb-3"></i>
                        <p class="text-muted mb-0">No students found</p>
                        <small class="text-muted">Try different search terms or check spelling</small>
                    </div>
                `;
            }
        }

        // Add students to course form submission
        document.getElementById('addStudentsToCourseForm').addEventListener('submit', function(e) {
            e.preventDefault();
            addStudentsToCourse();
        });

        // Add selected students to the course
        async function addStudentsToCourse() {
            const courseId = document.getElementById('courseId').value;
            const academicYear = document.getElementById('academicYear').value;
            const trimesterNumber = document.getElementById('trimesterNumber').value;
            const selectedStudents = Array.from(document.querySelectorAll('#availableStudentsList input[type="checkbox"]:checked'))
                .map(checkbox => checkbox.value);

            if (!academicYear || !trimesterNumber) {
                showError('Please select both Academic Year and Trimester.');
                return;
            }

            // Get trimester ID based on selected academic year and trimester number
            const trimesterId = await getTrimesterId(parseInt(academicYear), parseInt(trimesterNumber));
            if (!trimesterId) {
                showError('Invalid trimester selection. Please try again.');
                return;
            }

            if (selectedStudents.length === 0) {
                showError('Please select at least one student to add to the course.');
                return;
            }

            // Show confirmation dialog for large number of students
            if (selectedStudents.length > 10) {
                showConfirm(
                    `Are you sure you want to add ${selectedStudents.length} students to this course?`,
                    () => performAddStudentsToCourse(courseId, selectedStudents, parseInt(academicYear), parseInt(trimesterNumber), trimesterId),
                    null,
                    'Confirm Bulk Add'
                );
                return;
            }

            await performAddStudentsToCourse(courseId, selectedStudents, parseInt(academicYear), parseInt(trimesterNumber), trimesterId);
        }

        // Perform the actual add students operation
        async function performAddStudentsToCourse(courseId, selectedStudents, academicYear, trimesterNumber, trimesterId) {

            // Show loading state
            const submitBtn = document.querySelector('#addStudentsToCourseForm button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Adding Students...';

            try {
                const response = await fetch('/Admin/Course/AddStudentsToCourse', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        courseId: courseId,
                        studentIds: selectedStudents,
                        academicYear: academicYear,
                        trimesterNumber: trimesterNumber,
                        trimesterId: trimesterId
                    })
                });

                const data = await response.json();

                if (data.success) {
                    showSuccess(`Successfully added ${selectedStudents.length} student(s) to the course!`);
                    
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addStudentToCourseModal'));
                    modal.hide();
                    
                    // Reset form and search
                    document.getElementById('addStudentsToCourseForm').reset();
                    document.getElementById('studentSearch').value = '';
                    document.getElementById('availableStudentsList').innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-search fa-2x text-muted mb-3"></i>
                            <p class="text-muted mb-0">Search for students to add to this course</p>
                        </div>
                    `;
                    
                    // Reload enrolled students if filters are selected, otherwise show filter message
                    const academicYear = document.getElementById('filterAcademicYear').value;
                    const trimester = document.getElementById('filterTrimester').value;
                    
                    if (academicYear && trimester) {
                        loadEnrolledStudents(parseInt(academicYear), parseInt(trimester));
                    } else {
                        // Show message that filters need to be selected
                        const container = document.getElementById('enrolledStudentsList');
                        const countElement = document.getElementById('enrolledStudentsCount');
                        
                        container.innerHTML = `
                            <div class="text-center py-4">
                                <i class="fas fa-filter fa-2x text-muted mb-3"></i>
                                <p class="text-muted mb-0">Please select Academic Year and Trimester to view enrolled students</p>
                                <small class="text-muted">Use the filters above to search for students</small>
                            </div>
                        `;
                        countElement.textContent = '0';
                    }
                } else {
                    if (data.errors && Array.isArray(data.errors)) {
                        showValidationErrors(data.errors);
                    } else {
                        showError('Error: ' + data.message);
                    }
                }
            } catch (error) {
                console.error('Error adding students to course:', error);
                showError('An error occurred while adding students to the course.');
            } finally {
                // Reset button state
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            }
        }

        // Remove student from course
        async function removeStudentFromCourse(studentId) {
            const courseId = document.getElementById('courseId').value;
            
            // Get student name for better confirmation
            const studentElement = document.querySelector(`[onclick="removeStudentFromCourse('${studentId}')"]`).closest('.student-card');
            const studentName = studentElement ? studentElement.querySelector('.fw-semibold').textContent.trim() : 'this student';

            showConfirm(
                `Are you sure you want to remove ${studentName} from the course?`,
                async () => {
                    try {
                        const response = await fetch('/Admin/Course/RemoveStudentFromCourse', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({
                                courseId: courseId,
                                studentId: studentId
                            })
                        });

                        const data = await response.json();

                        if (data.success) {
                            showSuccess('Student removed from course successfully!');
                            
                            // Reload enrolled students if filters are selected, otherwise show filter message
                            const academicYear = document.getElementById('filterAcademicYear').value;
                            const trimester = document.getElementById('filterTrimester').value;
                            
                            if (academicYear && trimester) {
                                loadEnrolledStudents(parseInt(academicYear), parseInt(trimester));
                            } else {
                                // Show message that filters need to be selected
                                const container = document.getElementById('enrolledStudentsList');
                                const countElement = document.getElementById('enrolledStudentsCount');
                                
                                container.innerHTML = `
                                    <div class="text-center py-4">
                                        <i class="fas fa-filter fa-2x text-muted mb-3"></i>
                                        <p class="text-muted mb-0">Please select Academic Year and Trimester to view enrolled students</p>
                                        <small class="text-muted">Use the filters above to search for students</small>
                                    </div>
                                `;
                                countElement.textContent = '0';
                            }
                        } else {
                            showError('Error: ' + data.message);
                        }
                    } catch (error) {
                        console.error('Error removing student from course:', error);
                        showError('An error occurred while removing the student from the course.');
                    }
                },
                null,
                'Remove Student'
            );
        }

        // Excel upload form submission
        document.getElementById('uploadExcelForm').addEventListener('submit', function(e) {
            e.preventDefault();
            uploadStudentsExcel();
        });

        // Upload students Excel file
        async function uploadStudentsExcel() {
            const courseId = document.getElementById('excelCourseId').value;
            const academicYear = document.getElementById('excelAcademicYear').value;
            const trimesterNumber = document.getElementById('excelTrimesterNumber').value;
            const fileInput = document.getElementById('excelFile');

            if (!academicYear || !trimesterNumber) {
                showError('Please select both Academic Year and Trimester.');
                return;
            }

            // Get trimester ID based on selected academic year and trimester number
            const trimesterId = await getTrimesterId(parseInt(academicYear), parseInt(trimesterNumber));
            if (!trimesterId) {
                showError('Invalid trimester selection. Please try again.');
                return;
            }

            if (!fileInput.files || fileInput.files.length === 0) {
                showError('Please select a file to upload.');
                return;
            }

            // Validate file type
            const file = fileInput.files[0];
            const allowedTypes = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel', 'text/csv'];
            if (!allowedTypes.includes(file.type)) {
                showError('Please select a valid Excel or CSV file.');
                return;
            }

            // Validate file size (max 5MB)
            if (file.size > 5 * 1024 * 1024) {
                showError('File size must be less than 5MB.');
                return;
            }

            // Show loading state
            const submitBtn = document.querySelector('#uploadExcelForm button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Uploading...';

            const formData = new FormData();
            formData.append('file', fileInput.files[0]);
            formData.append('courseId', courseId);
            // formData.append('academicYear', academicYear);
            // formData.append('trimesterNumber', trimesterNumber);
            formData.append('trimesterId', trimesterId);

            try {
                const response = await fetch('/Admin/Course/UploadStudentsExcel', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();

                if (data.success) {
                    const successMessage = data.message;
                    const resultData = data.data;
                    
                    if (resultData && resultData.errors && resultData.errors.length > 0) {
                        // Show success with warnings about errors
                        Swal.fire({
                            title: 'Import Completed with Warnings',
                            html: `
                                <div class="text-start">
                                    <p class="text-success"><i class="fas fa-check-circle me-2"></i>${successMessage}</p>
                                    <div class="mt-3">
                                        <h6 class="text-warning"><i class="fas fa-exclamation-triangle me-2"></i>Errors Found:</h6>
                                        <div class="text-start" style="max-height: 200px; overflow-y: auto;">
                                            ${resultData.errors.map(error => `<div class="text-danger small mb-2"></i>${error}</div>`).join('')}
                                        </div>
                                    </div>
                                </div>
                            `,
                            icon: 'warning',
                            confirmButtonColor: '#ffc107'
                        });
                    } else {
                        showSuccess(successMessage);
                    }
                    
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('uploadExcelModal'));
                    modal.hide();
                    
                    // Reset form and file input
                    document.getElementById('uploadExcelForm').reset();
                    document.getElementById('excelFile').value = '';
                    
                    // Reload enrolled students if filters are selected, otherwise show filter message
                    const academicYear = document.getElementById('filterAcademicYear').value;
                    const trimester = document.getElementById('filterTrimester').value;
                    
                    if (academicYear && trimester) {
                        loadEnrolledStudents(parseInt(academicYear), parseInt(trimester));
                    } else {
                        // Show message that filters need to be selected
                        const container = document.getElementById('enrolledStudentsList');
                        const countElement = document.getElementById('enrolledStudentsCount');
                        
                        container.innerHTML = `
                            <div class="text-center py-4">
                                <i class="fas fa-filter fa-2x text-muted mb-3"></i>
                                <p class="text-muted mb-0">Please select Academic Year and Trimester to view enrolled students</p>
                                <small class="text-muted">Use the filters above to search for students</small>
                            </div>
                        `;
                        countElement.textContent = '0';
                    }
                } else {
                    showError('Error: ' + data.message);
                }
            } catch (error) {
                console.error('Error uploading Excel file:', error);
                showError('An error occurred while uploading the Excel file.');
            } finally {
                // Reset button state
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            }
        }

        // Clear student search
        function clearStudentSearch() {
            document.getElementById('studentSearch').value = '';
            document.getElementById('availableStudentsList').innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-search fa-2x text-muted mb-3"></i>
                    <p class="text-muted mb-0">Search for students to add to this course</p>
                </div>
            `;
        }

        // Select all students
        function selectAllStudents() {
            const checkboxes = document.querySelectorAll('#availableStudentsList input[type="checkbox"]');
            checkboxes.forEach(checkbox => {
                checkbox.checked = true;
            });
            updateSelectedStudentsCount();
        }

        // Deselect all students
        function deselectAllStudents() {
            const checkboxes = document.querySelectorAll('#availableStudentsList input[type="checkbox"]');
            checkboxes.forEach(checkbox => {
                checkbox.checked = false;
            });
            updateSelectedStudentsCount();
        }

        // Update selected students count
        function updateSelectedStudentsCount() {
            const selectedCount = document.querySelectorAll('#availableStudentsList input[type="checkbox"]:checked').length;
            const countElement = document.getElementById('selectedStudentsCount');
            if (countElement) {
                countElement.textContent = `${selectedCount} student(s) selected`;
            }
        }

    </script>
}

