@*
    Add Course Offering - Bulk create course offerings for a trimester
*@
@{
    ViewData["Title"] = "Add Course Offerings";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center">
            <h2 class="fw-bold text-dark mb-0">
                <i class="fas fa-plus text-success me-2"></i>
                Add Course Offerings
            </h2>
        </div>
        <div class="d-flex gap-2">
            <a href="@Url.Action("CourseOffering", "Course", new { area = "Admin" })" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-2"></i>
                Back to Course Offerings
            </a>
        </div>
    </div>

    <!-- Trimester Selection -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-calendar text-primary me-2"></i>
                        Step 1: Select Trimester
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="trimesterSelection" class="form-label">Trimester <span class="text-danger">*</span></label>
                            <select class="form-select" id="trimesterSelection" onchange="onTrimesterChange()">
                                <option value="">Select Trimester</option>
                            </select>
                        </div>
                        <div class="col-md-6 d-flex align-items-end">
                            <button type="button" class="btn btn-success" onclick="loadCoursesForTrimester()" id="loadCoursesBtn" disabled>
                                <i class="fas fa-search me-2"></i>
                                Load Courses
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Course List by Qualification -->
    <div class="row" id="courseListSection" style="display: none;">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-0 py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0 fw-bold">
                            <i class="fas fa-list text-primary me-2"></i>
                            Step 2: Select Courses and Assign Tutors
                        </h5>
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="selectAllCourses()">
                                <i class="fas fa-check-double me-1"></i>
                                Select All
                            </button>
                            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="deselectAllCourses()">
                                <i class="fas fa-times me-1"></i>
                                Deselect All
                            </button>
                            <button type="button" class="btn btn-success" onclick="saveAllCourseOfferings()" id="saveAllBtn">
                                <i class="fas fa-save me-2"></i>
                                Save All
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div id="courseListContainer">
                        <!-- Course list will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .qualification-section {
        border: 1px solid #e9ecef;
        border-radius: 8px;
        margin-bottom: 20px;
        overflow: hidden;
    }
    
         .qualification-header-left {
         background: linear-gradient(135deg, #ffffff 0%, #ffffff 70%, #f0f8f0 100%);
         color: #2e7d32;
         padding: 20px;
         font-weight: 600;
         font-size: 1.1rem;
         border-radius: 8px;
         height: 120px;
         width: 100%;
         display: flex;
         flex-direction: column;
         justify-content: center;
         align-items: center;
         text-align: center;
         transition: all 0.3s ease;
         user-select: none;
         border: 1px solid #e8f5e8;
     }
     
     .qualification-header-left:hover {
         background: linear-gradient(135deg, #ffffff 0%, #ffffff 60%, #e8f5e8 100%);
         transform: translateY(-2px);
         box-shadow: 0 4px 12px rgba(46, 125, 50, 0.12);
         border-color: #c8e6c9;
     }
     
     .qualification-count {
         margin-top: 10px;
     }
     
     .qualification-count .badge {
         background-color: #4caf50 !important;
         color: white;
         font-size: 0.8rem;
         padding: 4px 8px;
         border: 1px solid #4caf50;
     }
    
    .course-row {
        padding: 15px 20px;
        border-bottom: 1px solid #f8f9fa;
        transition: background-color 0.2s ease;
    }
    
    .course-row:hover {
        background-color: #f8f9fa;
    }
    
         .course-row:last-child {
         border-bottom: none;
     }
     
     .courses-container {
         padding: 0 20px;
         transition: all 0.3s ease;
         overflow: hidden;
     }
     
     .courses-container.collapsed {
         max-height: 0;
         padding: 0 20px;
         opacity: 0;
     }
     
     .qualification-section .row {
         align-items: stretch;
     }
     
     .qualification-section .col-md-3 {
         display: flex;
         align-items: stretch;
     }
     
     .qualification-section .col-md-9 {
         background-color: #f8f9fa;
         border-radius: 8px;
         padding: 20px 0;
     }
    
    .course-info {
        display: flex;
        align-items: center;
        gap: 15px;
        flex-wrap: wrap;
    }
    
    .course-checkbox {
        transform: scale(1.2);
        margin-right: 10px;
    }
    
    .tutor-selector-container {
        position: relative;
        min-width: 600px;
        width: 100%;
        max-width: 600px;
    }
    
    /* Responsive Layout Adjustments */
    @@media (max-width: 1200px) {
        .tutor-selector-container {
            min-width: 500px;
            max-width: 500px;
        }
    }
    
    @@media (max-width: 992px) {
        .tutor-selector-container {
            min-width: 400px;
            max-width: 400px;
        }
        
        .course-info {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }
        
        .tutor-selector-container {
            align-self: stretch;
            width: 100%;
            max-width: none;
        }
    }
    
    @@media (max-width: 768px) {
        .tutor-selector-container {
            min-width: 100%;
            max-width: 100%;
        }
        
        .qualification-section .row {
            flex-direction: column;
        }
        
        .qualification-section .col-md-3,
        .qualification-section .col-md-9 {
            width: 100%;
            margin-bottom: 15px;
        }
        
        .qualification-header-left {
            height: auto;
            min-height: 100px;
        }
    }
    
    .tutor-search-input {
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }
    
    .tutor-search-input:focus {
        border-color: #86b7fe;
        outline: 0;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    .tutor-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        z-index: 9999;
        max-height: 200px;
        overflow-y: auto;
        /* Initial positioning, will be overridden by JavaScript */
        display: none;
    }
    
    .tutor-dropdown-list {
        padding: 0;
        margin: 0;
    }
    
    .tutor-option {
        padding: 0.5rem 0.75rem;
        cursor: pointer;
        border-bottom: 1px solid #f8f9fa;
        transition: background-color 0.15s ease-in-out;
        font-size: 0.875rem;
    }
    
    .tutor-option:hover {
        background-color: #f8f9fa;
    }
    
    .tutor-option.selected {
        background-color: #e7f3ff;
        color: #0d6efd;
        font-weight: 500;
    }
    
    .tutor-option:last-child {
        border-bottom: none;
    }
    
    .tutor-hidden-input {
        display: none;
    }
    
    .course-name {
        font-weight: 500;
        color: #495057;
        flex-grow: 1;
    }
    
    .course-code {
        color: #6c757d;
        font-size: 0.9rem;
        font-family: monospace;
    }
    
    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #3498db;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
    
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .modal-body {
        max-height: 70vh;
        overflow-y: auto;
    }
    
    /* Additional Responsive Optimizations */
    @@media (max-width: 576px) {
        .container-fluid {
            padding: 10px;
        }
        
        .card-header {
            padding: 15px 10px !important;
        }
        
        .card-body {
            padding: 15px 10px !important;
        }
        
        .btn {
            font-size: 0.875rem;
            padding: 0.375rem 0.75rem;
        }
        
        .course-row {
            padding: 10px 15px;
        }
        
        .qualification-header-left {
            padding: 15px;
            font-size: 1rem;
        }
    }
    
    /* Fixed positioning styles for dropdown */
    .tutor-dropdown[style*="position: fixed"] {
        position: fixed !important;
        z-index: 10000 !important;
        background: white;
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        max-height: 200px;
        overflow-y: auto;
    }
</style>

@section Scripts {
    <script>
        // Global variables
        let availableTrimesters = [];
        let availableCourses = [];
        let availableTutors = [];
        let selectedTrimester = null;
        let existingOfferings = [];
        
        // Initialize when document is ready
        document.addEventListener('DOMContentLoaded', function() {
            loadTrimesterOptions();
            loadTutorOptions();
        });

        // Load trimester options
        function loadTrimesterOptions() {
            fetch('/Admin/Trimester/GetActiveTrimesters')
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        availableTrimesters = result.data;
                        populateTrimesterDropdown(result.data);
                    } else {
                        showError('Failed to load trimester options');
                    }
                })
                .catch(error => {
                    showError('Failed to load trimester options');
                });
        }

        // Load tutor options
        function loadTutorOptions() {
            fetch('/Admin/Tutor/GetTutors')
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        availableTutors = result.data;
                    } else {
                        showError('Failed to load tutor options');
                    }
                })
                .catch(error => {
                    showError('Failed to load tutor options');
                });
        }

        // Populate trimester dropdown
        function populateTrimesterDropdown(trimesters) {
            const dropdown = document.getElementById('trimesterSelection');
            const options = trimesters.map(trimester => 
                `<option value="${trimester.id}">${trimester.academicYear} T${trimester.trimesterNumber}</option>`
            ).join('');
            
            dropdown.innerHTML = '<option value="">Select Trimester</option>' + options;
        }

        // Handle trimester selection change
        function onTrimesterChange() {
            const trimesterId = document.getElementById('trimesterSelection').value;
            const loadBtn = document.getElementById('loadCoursesBtn');
            
            if (trimesterId) {
                selectedTrimester = availableTrimesters.find(t => t.id == trimesterId);
                loadBtn.disabled = false;
            } else {
                selectedTrimester = null;
                loadBtn.disabled = true;
                document.getElementById('courseListSection').style.display = 'none';
            }
        }

        // Load courses for selected trimester
        function loadCoursesForTrimester() {
            if (!selectedTrimester) {
                showError('Please select a trimester first');
                return;
            }

            const container = document.getElementById('courseListContainer');
            container.innerHTML = `
                <div class="text-center py-4">
                    <div class="text-muted">
                        <i class="fas fa-spinner fa-spin fa-2x mb-3"></i>
                        <p class="mb-0">Loading courses...</p>
                    </div>
                </div>
            `;

            // Show the course list section
            document.getElementById('courseListSection').style.display = 'block';

            // Load all courses
            fetch('/Admin/Course/SearchCourses')
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        availableCourses = result.data;
                        // Load existing offerings for this trimester to check which courses are already offered
                        loadExistingOfferingsForTrimester(selectedTrimester.id, result.data);
                    } else {
                        showError('Failed to load courses');
                    }
                })
                .catch(error => {
                    showError('Failed to load courses');
                });
        }

        // Load existing offerings for the selected trimester
        function loadExistingOfferingsForTrimester(trimesterId, courses) {
            fetch('/Admin/Course/GetCourseOfferings')
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        existingOfferings = result.data.filter(o => o.trimesterId == trimesterId);
                        displayCoursesByQualification(courses);
                    } else {
                        existingOfferings = [];
                        displayCoursesByQualification(courses);
                    }
                })
                .catch(error => {
                    existingOfferings = [];
                    displayCoursesByQualification(courses);
                });
        }

        // Display courses grouped by qualification
        function displayCoursesByQualification(courses) {
            const container = document.getElementById('courseListContainer');
            
            console.log('=== Starting displayCoursesByQualification ===');
            console.log('Total courses received:', courses.length);
            
            // Group courses by qualification
            const qualificationGroups = {};
            courses.forEach(course => {
                const qualificationName = course.qualificationName || 'Uncategorized';
                if (!qualificationGroups[qualificationName]) {
                    qualificationGroups[qualificationName] = [];
                }
                qualificationGroups[qualificationName].push(course);
            });

            console.log('Qualification groups:', qualificationGroups);
            console.log('Number of qualification groups:', Object.keys(qualificationGroups).length);

            // Generate HTML for each qualification group
            let html = '';
            Object.keys(qualificationGroups).sort().forEach((qualificationName, index) => {
                const qualificationId = `qualification_${index}`;
                const coursesInGroup = qualificationGroups[qualificationName];
                
                console.log(`Processing qualification ${qualificationName}:`, {
                    qualificationId,
                    coursesCount: coursesInGroup.length,
                });
                
                html += `
                    <div class="qualification-section">
                        <div class="row">
                            <!-- Left side: Qualification header (clickable) -->
                            <div class="col-md-3">
                                <div class="qualification-header-left" 
                                     onclick="toggleQualificationCourses('${qualificationId}')" 
                                     style="cursor: pointer;">
                                    <i class="fas fa-chevron-down me-2" id="icon_${qualificationId}"></i>
                                    <strong>${qualificationName}</strong>
                                    <div class="qualification-count">
                                        <span class="badge bg-primary">${coursesInGroup.length} courses</span>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Right side: Courses and tutor selection -->
                            <div class="col-md-9">
                                <div class="courses-container" id="${qualificationId}">
                                    <div class="courses-list" id="courses_list_${qualificationId}">
                                        <!-- Course rows will be displayed here -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });

            container.innerHTML = html;
            console.log('HTML generated and inserted into container');
            
            // Display courses for each qualification group
            Object.keys(qualificationGroups).sort().forEach((qualificationName, index) => {
                const qualificationId = `qualification_${index}`;
                const coursesInGroup = qualificationGroups[qualificationName];
                
                console.log(`Displaying courses for ${qualificationId} with ${coursesInGroup.length} courses`);
                displayCoursesForQualification(qualificationId, coursesInGroup);
            });
            
            console.log('=== Finished displayCoursesByQualification ===');
        }

        // Display courses for a specific qualification
        function displayCoursesForQualification(qualificationId, courses) {
            const coursesListContainer = document.getElementById(`courses_list_${qualificationId}`);
            
            console.log(`Displaying courses for ${qualificationId}:`, courses);
            
            // Display all courses for this qualification
            coursesListContainer.innerHTML = courses.map(course => {
                const existingOffering = existingOfferings.find(o => 
                    o.courseId == course.id && o.trimesterId == selectedTrimester.id
                );
                
                return `
                    <div class="course-row">
                        <div class="course-info">
                            <input type="checkbox" 
                                   class="form-check-input course-checkbox" 
                                   id="course_${course.id}" 
                                   value="${course.id}"
                                   ${existingOffering ? 'checked disabled' : ''}
                                   onchange="onCourseSelectionChange('${course.id}')">
                            
                            <div class="course-name">
                                <strong>${course.courseName}</strong>
                                <div class="course-code">${course.courseCode}</div>
                            </div>
                            
                            <div class="tutor-selector-container">
                                <input type="text" 
                                       class="form-control tutor-search-input" 
                                       id="tutor_search_${course.id}" 
                                       placeholder="Search tutor by name..."
                                       ${existingOffering ? 'disabled' : ''}
                                       oninput="searchTutors('${course.id}')"
                                       onfocus="showTutorDropdown('${course.id}')"
                                       onblur="hideTutorDropdown('${course.id}')">
                                <input type="hidden" 
                                       class="tutor-hidden-input" 
                                       id="tutor_${course.id}" 
                                       value="${existingOffering?.tutorId || ''}">
                                <div class="tutor-dropdown" id="tutor_dropdown_${course.id}" style="display: none;">
                                    <div class="tutor-dropdown-list" id="tutor_list_${course.id}">
                                        ${availableTutors.map(tutor => 
                                            `<div class="tutor-option ${existingOffering?.tutorId == tutor.id ? 'selected' : ''}" 
                                                 data-value="${tutor.id}" 
                                                 data-name="${tutor.firstName} ${tutor.lastName}"
                                                 onclick="selectTutor('${course.id}', '${tutor.id}', '${tutor.firstName} ${tutor.lastName} (${tutor.email})')">
                                                ${tutor.firstName} ${tutor.lastName} (${tutor.email})
                                            </div>`
                                        ).join('')}
                                    </div>
                                </div>
                            </div>
                            
                            ${existingOffering ? `
                                <span class="badge bg-success">Already Offered</span>
                            ` : ''}
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Toggle qualification courses visibility
        function toggleQualificationCourses(qualificationId) {
            const coursesContainer = document.getElementById(qualificationId);
            const icon = document.getElementById(`icon_${qualificationId}`);
            
            if (coursesContainer.style.display === 'none') {
                // Show courses
                coursesContainer.style.display = 'block';
                icon.className = 'fas fa-chevron-down me-2';
                coursesContainer.classList.remove('collapsed');
            } else {
                // Hide courses
                coursesContainer.style.display = 'none';
                icon.className = 'fas fa-chevron-right me-2';
                coursesContainer.classList.add('collapsed');
            }
        }

        // Handle course selection change
        function onCourseSelectionChange(courseId) {
            const checkbox = document.getElementById(`course_${courseId}`);
            const tutorSearchInput = document.getElementById(`tutor_search_${courseId}`);
            const tutorHiddenInput = document.getElementById(`tutor_${courseId}`);
            
            if (checkbox.checked) {
                tutorSearchInput.disabled = false;
                tutorSearchInput.required = true;
            } else {
                // Don't disable the input, just clear the values and make it not required
                tutorSearchInput.disabled = false;
                tutorSearchInput.required = false;
                tutorSearchInput.value = '';
                tutorHiddenInput.value = '';
            }
        }

        // Search tutors by name
        function searchTutors(courseId) {
            const searchInput = document.getElementById(`tutor_search_${courseId}`);
            const searchTerm = searchInput.value.toLowerCase();
            const tutorList = document.getElementById(`tutor_list_${courseId}`);
            const tutorOptions = tutorList.querySelectorAll('.tutor-option');
            
            tutorOptions.forEach(option => {
                const tutorName = option.getAttribute('data-name').toLowerCase();
                if (tutorName.includes(searchTerm)) {
                    option.style.display = 'block';
                } else {
                    option.style.display = 'none';
                }
            });
        }
        
        // Show tutor dropdown
        function showTutorDropdown(courseId) {
            const dropdown = document.getElementById(`tutor_dropdown_${courseId}`);
            const searchInput = document.getElementById(`tutor_search_${courseId}`);
            
            // Calculate position for fixed positioning
            const rect = searchInput.getBoundingClientRect();
            
            // Position dropdown below the input
            dropdown.style.position = 'fixed';
            dropdown.style.top = rect.bottom + 'px';
            dropdown.style.left = rect.left + 'px';
            dropdown.style.width = rect.width + 'px';
            dropdown.style.zIndex = '10000';
            
            // Check if dropdown would go below viewport
            const dropdownHeight = Math.min(200, availableTutors.length * 40); // Approximate height
            const spaceBelow = window.innerHeight - rect.bottom;
            
            if (spaceBelow < dropdownHeight) {
                // Position above the input if not enough space below
                dropdown.style.top = (rect.top - dropdownHeight) + 'px';
            }
            
            dropdown.style.display = 'block';
        }
        
        // Hide tutor dropdown
        function hideTutorDropdown(courseId) {
            // Use setTimeout to allow click events to fire first
            setTimeout(() => {
                const dropdown = document.getElementById(`tutor_dropdown_${courseId}`);
                dropdown.style.display = 'none';
            }, 200);
        }
        
        // Select a tutor
        function selectTutor(courseId, tutorId, tutorDisplayName) {
            const searchInput = document.getElementById(`tutor_search_${courseId}`);
            const hiddenInput = document.getElementById(`tutor_${courseId}`);
            const dropdown = document.getElementById(`tutor_dropdown_${courseId}`);
            
            // Update the display
            searchInput.value = tutorDisplayName;
            hiddenInput.value = tutorId;
            
            // Hide dropdown
            dropdown.style.display = 'none';
            
            // Update selected state in dropdown
            const tutorOptions = document.querySelectorAll(`#tutor_list_${courseId} .tutor-option`);
            tutorOptions.forEach(option => {
                option.classList.remove('selected');
                if (option.getAttribute('data-value') === tutorId) {
                    option.classList.add('selected');
                }
            });
            
            // Check the course checkbox
            const checkbox = document.getElementById(`course_${courseId}`);
            checkbox.checked = true;
        }

                // Select all courses
        function selectAllCourses() {
            const checkboxes = document.querySelectorAll('.course-checkbox:not(:disabled)');
            const tutorSearchInputs = document.querySelectorAll('.tutor-search-input:not(:disabled)');
            
            checkboxes.forEach(checkbox => {
                checkbox.checked = true;
            });
            
            tutorSearchInputs.forEach(input => {
                input.required = true;
            });
        }
        
        // Deselect all courses
        function deselectAllCourses() {
            const checkboxes = document.querySelectorAll('.course-checkbox:not(:disabled)');
            const tutorSearchInputs = document.querySelectorAll('.tutor-search-input:not(:disabled)');
            const tutorHiddenInputs = document.querySelectorAll('.tutor-hidden-input');
            
            checkboxes.forEach(checkbox => {
                checkbox.checked = false;
            });
            
            tutorSearchInputs.forEach(input => {
                input.value = '';
                input.required = false;
            });
            
            tutorHiddenInputs.forEach(input => {
                input.value = '';
            });
        }

        // Save all course offerings
        async function saveAllCourseOfferings() {
            if (!selectedTrimester) {
                showError('Please select a trimester first');
                return;
            }

            const selectedCourses = [];
            const checkboxes = document.querySelectorAll('.course-checkbox:checked:not(:disabled)');
            
            checkboxes.forEach(checkbox => {
                const courseId = checkbox.value;
                const tutorHiddenInput = document.getElementById(`tutor_${courseId}`);
                
                if (tutorHiddenInput.value) {
                    selectedCourses.push({
                        courseId: courseId,
                        tutorId: tutorHiddenInput.value,
                        trimesterId: selectedTrimester.id,
                        isActive: true
                    });
                }
            });

            if (selectedCourses.length === 0) {
                showError('Please select at least one course and assign a tutor');
                return;
            }

            // Show confirmation
            showConfirm(
                `Are you sure you want to create ${selectedCourses.length} course offering(s) for ${selectedTrimester.academicYear} T${selectedTrimester.trimesterNumber}?`,
                async () => {
                    await performSaveAllCourseOfferings(selectedCourses);
                },
                null,
                'Confirm Save All'
            );
        }

        // Perform the actual save operation
        async function performSaveAllCourseOfferings(courseOfferings) {
            const saveBtn = document.getElementById('saveAllBtn');
            const originalText = saveBtn.innerHTML;
            
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<span class="loading-spinner me-2"></span>Saving...';

            try {
                const response = await fetch('/Admin/Course/CreateMultipleCourseOfferings', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(courseOfferings)
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess(`Successfully created ${courseOfferings.length} course offering(s)!`);
                    
                    // Redirect back to Course Offerings page after a short delay
                    setTimeout(() => {
                        window.location.href = '@Url.Action("CourseOffering", "Course", new { area = "Admin" })';
                    }, 2000);
                } else {
                    showError(result.message || 'Failed to create course offerings');
                }
            } catch (error) {
                console.error('Error saving course offerings:', error);
                showError('An error occurred while saving course offerings');
            } finally {
                saveBtn.disabled = false;
                saveBtn.innerHTML = originalText;
            }
        }
    </script>
}
