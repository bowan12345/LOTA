@*
    Course Offering Management - Set course information for each trimester
*@
@{
    ViewData["Title"] = "Course Offerings";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center">
            <h2 class="fw-bold text-dark mb-0">
                <i class="fas fa-chalkboard-teacher text-primary me-2"></i>
                Course Offerings
            </h2>
        </div>
        <div class="d-flex gap-2">
            <a href="@Url.Action("AddCourseOffering", "Course", new { area = "Admin" })" class="btn btn-success">
                <i class="fas fa-plus me-2"></i>
                Add Course Offering
            </a>
        </div>
    </div>

    <!-- Course Offerings Layout -->
    <div class="row">
        <!-- Left Sidebar - Course List -->
        <div class="col-lg-4">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-0 py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0 fw-bold">
                            <i class="fas fa-list text-primary me-2"></i>
                            Course List
                            <span class="badge bg-primary ms-2" id="courseOfferingListCount">0</span>
                        </h5>
                    </div>
                    <!-- Filter Controls -->
                    <div class="mt-3">
                        <div class="d-flex gap-2 align-items-center">
                            <div class="flex-grow-1">
                                <div id="trimesterFilter" class="trimester-display w-100">
                                    <div class="text-muted">Loading current trimester...</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush" id="courseOfferingList">
                        <div class="text-center py-4">
                            <div class="text-muted">
                                <i class="fas fa-spinner fa-spin fa-2x mb-3"></i>
                                <p class="mb-0">Loading course offerings...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Side - Course Details -->
        <div class="col-lg-8">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="fas fa-info-circle text-primary me-2"></i>
                        Course Offering Details
                    </h5>
                </div>
                <div class="card-body" id="courseOfferingDetails">
                    <div class="text-center py-5">
                        <div class="text-muted">
                            <i class="fas fa-chalkboard-teacher fa-3x mb-3"></i>
                            <h5>Select a Course</h5>
                            <p class="mb-0">Choose a course from the left sidebar to view and edit its details</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<!-- Edit Course Offering Modal -->
<div class="modal fade" id="editCourseOfferingModal" tabindex="-1" aria-labelledby="editCourseOfferingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="editCourseOfferingModalLabel">
                    <i class="fas fa-edit me-2"></i>
                    Edit Course Offering
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editCourseOfferingForm">
                    <input type="hidden" id="editCourseOfferingHiddenId" name="id">
                    <div class="row g-3">
                        <div class="col-12 col-md-6">
                            <label for="editTrimesterId" class="form-label">Current Trimester <span class="text-danger">*</span></label>
                            <div id="editTrimesterId" class="trimester-display">
                                <div class="text-muted">Loading current trimester...</div>
                            </div>
                            <input type="hidden" name="trimesterId" id="editTrimesterIdHidden" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editCourseId" class="form-label">Course <span class="text-danger">*</span></label>
                            <select class="form-select" id="editCourseId" name="courseId" required>
                                <option value="">Select Course</option>
                            </select>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editTutorId" class="form-label">Tutor</label>
                            <select class="form-select" id="editTutorId" name="tutorId">
                                <option value="">Select Tutor (Optional)</option>
                            </select>
                        </div>

                    </div>
                </form>
                <div class="row g-3">
                    <div class="col-12">
                        <div class="d-flex justify-content-end gap-2 mt-4">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" onclick="updateCourseOffering()">
                                <i class="fas fa-save me-2"></i>
                                Update
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Students to Course Modal -->
<div class="modal fade" id="addStudentToCourseModal" tabindex="-1" aria-labelledby="addStudentToCourseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addStudentToCourseModalLabel">
                    <i class="fas fa-user-plus text-success me-2"></i>
                    Add Students to Course
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addStudentsToCourseForm">
                <div class="modal-body">
                    <input type="hidden" id="modalCourseOfferingId" name="courseOfferingId">
                    <input type="hidden" id="modalCourseId" name="courseId">
                    <input type="hidden" id="modalTrimesterId" name="trimesterId">
                    
                     <!-- Trimester Info Display -->
                     <div class="row mb-3">
                         <div class="col-md-12">
                             <div class="alert alert-info">
                                 <i class="fas fa-info-circle me-2"></i>
                                 <strong>Selected Trimester:</strong> 
                                 <span id="modalTrimesterDisplay">Please select a trimester from the filter above first</span>
                             </div>
                         </div>
                     </div>
                    
                    <div class="mb-3">
                        <label for="studentSearch" class="form-label">Search Students</label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="studentSearch" placeholder="Search by name, email, or student ID..." oninput="searchStudents()">
                            <button type="button" class="btn btn-outline-secondary" onclick="searchStudents()">
                                <i class="fas fa-search"></i>
                            </button>
                            <button type="button" class="btn btn-outline-info" onclick="clearStudentSearch()">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Available Students</label>
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="text-muted small" id="selectedStudentsCount">0 student(s) selected</span>
                        </div>
                        <div id="availableStudentsList" class="border rounded p-3 student-search-results">
                            <div class="text-center py-4">
                                <i class="fas fa-search fa-2x text-muted mb-3"></i>
                                <p class="text-muted mb-0">Search for students to add to this course</p>
                                <small class="text-muted">Search by name, email, or student ID</small>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save me-2"></i>
                        Add Selected Students
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Upload Excel Modal -->
<div class="modal fade" id="uploadExcelModal" tabindex="-1" aria-labelledby="uploadExcelModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadExcelModalLabel">
                    <i class="fas fa-file-excel text-info me-2"></i>
                    Upload Students Excel
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="uploadExcelForm" enctype="multipart/form-data">
                <div class="modal-body">
                    <input type="hidden" id="excelCourseOfferingId" name="courseOfferingId">
                    <input type="hidden" id="excelCourseId" name="courseId">
                    <input type="hidden" id="excelTrimesterId" name="trimesterId">
                    
                     <!-- Trimester Info Display -->
                     <div class="row mb-3">
                         <div class="col-md-12">
                             <div class="alert alert-info">
                                 <i class="fas fa-info-circle me-2"></i>
                                 <strong>Selected Trimester:</strong> 
                                 <span id="excelTrimesterDisplay">Please select a trimester from the filter above first</span>
                             </div>
                         </div>
                     </div>
                    
                    <div class="mb-3">
                        <label for="excelFile" class="form-label">Excel File</label>
                        <input type="file" class="form-control" id="excelFile" accept=".xlsx,.xls,.csv" required>
                        <div class="form-text">
                            <strong>Required format:</strong> Excel file with columns: Student ID (A) and Email (B)
                        </div>
                    </div>
                    
                    <div class="alert alert-info">
                        <h6><i class="fas fa-info-circle me-2"></i>Instructions:</h6>
                        <ul class="mb-0">
                            <li>First column (A) should contain Student ID</li>
                            <li>Second column (B) should contain Email</li>
                            <li>Students will be verified by Student ID or Email</li>
                            <li>Only existing students can be added to the course</li>
                        </ul>
                    </div>
                    
                    <div class="mb-3">
                        <button type="button" class="btn btn-outline-primary" onclick="downloadStudentsTemplate()">
                            <i class="fas fa-download me-1"></i>
                            Download Template
                        </button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-info">
                        <i class="fas fa-upload me-2"></i>
                        Upload and Import
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .list-group-item.active {
        background-color: #e3f2fd;
        border-color: #2196f3;
        color: #1976d2;
    }
    
    .list-group-item:hover {
        background-color: #f5f5f5;
        cursor: pointer;
    }
    
    .list-group-item.active:hover {
        background-color: #e3f2fd;
    }
    
    .course-item-badge {
        font-size: 0.75rem;
    }
    
    .course-item-title {
        font-weight: 600;
        color: #333;
    }
    
    .course-item-code {
        color: #666;
        font-size: 0.875rem;
    }
    
    .student-card {
        transition: all 0.2s ease-in-out;
    }
    
    .student-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .form-check-input:checked + .form-check-label {
        background-color: #e7f3ff;
        border-color: #0d6efd;
    }
    
    .form-check-input:checked + .form-check-label .fw-semibold {
        color: #0d6efd !important;
    }
    
    .loading-spinner {
        animation: spin 1s linear infinite;
    }
    
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .modal-body {
        max-height: 70vh;
        overflow-y: auto;
    }
    
    .student-search-results {
        max-height: 400px;
        overflow-y: auto;
    }
    
    .enrolled-students-list {
         height: auto;
         min-height: 800px;
         overflow-y: visible;
     }
     
     /* Trimester Display Styling */
     .trimester-display {
         background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
         border: 2px solid #dee2e6;
         border-radius: 12px;
         transition: all 0.3s ease;
         min-height: 60px;
         max-height: 70px;
         display: flex;
         align-items: center;
         justify-content: center;
         padding: 0.75rem 1rem;
     }
     
     /* Smaller trimester display for modals */
     .modal .trimester-display {
         min-height: 38px;
         max-height: 38px;
         padding: 0.375rem 0.75rem;
         font-size: 0.875rem;
         border-radius: 8px;
     }
     
     .modal .trimester-display .text-primary {
         font-size: 0.9rem;
         margin-bottom: 0.1rem;
     }
     
     .modal .trimester-display .small {
         font-size: 0.7rem;
         opacity: 0.7;
     }
     
     .trimester-display:hover {
         border-color: #0d6efd;
         box-shadow: 0 4px 12px rgba(13, 110, 253, 0.15);
         transform: translateY(-1px);
     }
     
     .trimester-display .h5 {
         font-size: 1.1rem;
         font-weight: 700;
         margin-bottom: 0.15rem;
     }
     
     .trimester-display .text-primary {
         color: #0d6efd !important;
     }
     
     .trimester-display .small {
         font-size: 0.875rem;
         opacity: 0.8;
     }
     
     /* Enrolled Students Pagination Styles */
     .pagination {
         margin-bottom: 0;
     }
     
     .page-link {
         color: #0d6efd;
         border: 1px solid #dee2e6;
         padding: 0.375rem 0.75rem;
         font-size: 0.875rem;
         transition: all 0.15s ease-in-out;
     }
     
     .page-link:hover {
         color: #0a58ca;
         background-color: #e9ecef;
         border-color: #dee2e6;
     }
     
     .page-item.active .page-link {
         background-color: #0d6efd;
         border-color: #0d6efd;
         color: white;
     }
     
     .page-item.disabled .page-link {
         color: #6c757d;
         pointer-events: none;
         background-color: #fff;
         border-color: #dee2e6;
     }
     
     .pagination-sm .page-link {
         padding: 0.25rem 0.5rem;
         font-size: 0.875rem;
    }
</style>

@section Scripts {
    <script>
        // Pagination configuration
        const PAGE_SIZE = 10; // Number of course offerings per page
        let currentPage = 1;
        let totalPages = 1;
        let allCourseOfferings = []; // Store all course offerings for pagination
        
        // Enrolled Students pagination configuration
        const ENROLLED_STUDENTS_PAGE_SIZE = 10; // Number of enrolled students per page
        let enrolledStudentsCurrentPage = 1;
        let enrolledStudentsTotalPages = 1;
        let allEnrolledStudents = []; // Store all enrolled students for pagination
        
        // Initialize when document is ready
        document.addEventListener('DOMContentLoaded', function() {
            // Load trimester options first, then load course offerings with the selected trimester
            loadTrimesterOptions();
            loadCourseOptions();
            loadTutorOptions();
            // Note: loadCourseOfferings() is now called automatically by populateTrimesterDropdowns
        });

        // Load course offerings data
        function loadCourseOfferings() {
            // Get the current trimester filter to maintain the filtered view
            const trimesterFilter = document.getElementById('trimesterFilter');
            const currentTrimesterId = trimesterFilter ? trimesterFilter.getAttribute('data-trimester-id') : null;
            
            if (currentTrimesterId) {
                loadCourseOfferingsWithFilter(currentTrimesterId);
            } else {
                // If no current trimester, load the latest one
                loadTrimesterOptions();
            }
        }

        // Load course offerings with trimester filter
        function loadCourseOfferingsWithFilter(trimesterFilter) {
            const listContainer = document.getElementById('courseOfferingList');
            listContainer.innerHTML = `
                <div class="text-center py-4">
                    <div class="text-muted">
                        <i class="fas fa-spinner fa-spin fa-2x mb-3"></i>
                        <p class="mb-0">Loading course offerings...</p>
                    </div>
                </div>
            `;
            
            console.log('Loading course offerings with filter...');
            
            // Build API URL with filter parameters
            let apiUrl = '/Admin/Course/GetCourseOfferings';
            if (trimesterFilter) {
                apiUrl += `?trimesterId=${trimesterFilter}`;
            }
            
            // Call API endpoint
            fetch(apiUrl)
                .then(response => {
                    console.log('API Response status:', response.status);
                    return response.json();
                })
                .then(result => {
                    console.log('API Response data:', result);
                    if (result.success) {
                        console.log('Course offerings loaded successfully, count:', result.data.length);
                        displayCourseOfferings(result.data);
                        updateCourseOfferingCount(result.data.length);
                    } else {
                        console.error('API returned error:', result.message);
                        showError(result.message || 'Failed to load course offerings');
                        displayCourseOfferings([]);
                    }
                })
                .catch(error => {
                    console.error('Error loading course offerings:', error);
                    showError('Failed to load course offerings');
                    displayCourseOfferings([]);
                });
        }

        // Load trimester options
        function loadTrimesterOptions() {
            // Show loading state in the filter display
            const filterDisplay = document.getElementById('trimesterFilter');
            if (filterDisplay) {
                filterDisplay.innerHTML = '<div class="text-muted">Loading current trimester...</div>';
            }
            
            fetch('/Admin/Trimester/GetLatestTrimester')
                .then(response => response.json())
                .then(result => {
                    if (result.success && result.data) {
                        populateTrimesterDisplay(result.data);
                    } else {
                        showError('Failed to load current trimester');
                        // Reset display on error
                        if (filterDisplay) {
                            filterDisplay.innerHTML = '<div class="text-danger">Error loading trimester</div>';
                        }
                    }
                })
                .catch(error => {
                    showError('Failed to load current trimester');
                    // Reset display on error
                    if (filterDisplay) {
                        filterDisplay.innerHTML = '<div class="text-danger">Error loading trimester</div>';
                    }
                });
        }

        // Load course options
        function loadCourseOptions() {
            fetch('/Admin/Course/SearchCourses')
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        populateCourseDropdowns(result.data);
                    } else {
                        showError('Failed to load course options');
                    }
                })
                .catch(error => {
                    showError('Failed to load course options');
                });
        }

        // Load tutor options
        function loadTutorOptions() {
            fetch('/Admin/Tutor/GetTutors')
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        populateTutorDropdowns(result.data);
                    } else {
                        showError('Failed to load tutor options');
                    }
                })
                .catch(error => {
                    showError('Failed to load tutor options');
                });
        }

        // Populate trimester display
        function populateTrimesterDisplay(currentTrimester) {
            const editDropdown = document.getElementById('editTrimesterId');
            const filterDisplay = document.getElementById('trimesterFilter');
            
            // For Course List filter display, show the current trimester
            if (filterDisplay && currentTrimester) {
                filterDisplay.innerHTML = `
                    <div class="d-flex align-items-center justify-content-center">
                        <div class="text-center">
                            <div class="h5 mb-1 text-primary fw-bold">${currentTrimester.academicYear} - Trimester ${currentTrimester.trimesterNumber}</div>
                            <div class="text-muted small">Current Academic Period</div>
                        </div>
                    </div>
                `;
                
                console.log(`Course List filter: Showing current trimester: ${currentTrimester.academicYear} - Tri${currentTrimester.trimesterNumber}`);
                
                // Store current trimester ID for filtering
                filterDisplay.setAttribute('data-trimester-id', currentTrimester.id);
                
                // Apply the filter to load course offerings for the current trimester
                applyFilters();
            } else if (filterDisplay) {
                console.log('No current trimester available');
                filterDisplay.innerHTML = '<div class="text-warning text-center py-3">No Current Trimester Available</div>';
                // If no trimester, load all course offerings
                loadCourseOfferings();
            }
            
            // For Edit modal, show only the current trimester
            if (editDropdown && currentTrimester) {
                editDropdown.innerHTML = `
                    <div class="d-flex align-items-center justify-content-center">
                        <div class="text-center">
                            <div class="text-primary fw-bold">${currentTrimester.academicYear} - T${currentTrimester.trimesterNumber}</div>
                            <div class="text-muted small">Current Period</div>
                        </div>
                    </div>
                `;
                // Update hidden input for form submission
                const editHiddenInput = document.getElementById('editTrimesterIdHidden');
                if (editHiddenInput) {
                    editHiddenInput.value = currentTrimester.id;
                }
            }
        }



        // Populate course dropdowns
        function populateCourseDropdowns(courses) {
            const editDropdown = document.getElementById('editCourseId');
            
            const options = courses.map(course => 
                `<option value="${course.id}">${course.courseCode} - ${course.courseName}</option>`
            ).join('');
            
            if (editDropdown) editDropdown.innerHTML = '<option value="">Select Course</option>' + options;
        }

        // Populate tutor dropdowns
        function populateTutorDropdowns(tutors) {
            const editDropdown = document.getElementById('editTutorId');
            
            const options = tutors.map(tutor => 
                `<option value="${tutor.id}">${tutor.firstName} ${tutor.lastName} (${tutor.email})</option>`
            ).join('');
            
            if (editDropdown) editDropdown.innerHTML = '<option value="">Select Tutor (Optional)</option>' + options;
        }

        // Display course offerings in sidebar list with pagination
        function displayCourseOfferings(offerings) {
            const listContainer = document.getElementById('courseOfferingList');
            
            console.log('Displaying course offerings:', offerings);
            console.log('Offerings length:', offerings ? offerings.length : 'null');
            
            if (!offerings || offerings.length === 0) {
                console.log('No course offerings to display');
                listContainer.innerHTML = `
                    <div class="text-center py-4">
                        <div class="text-muted">
                            <i class="fas fa-chalkboard-teacher fa-2x mb-3"></i>
                            <p class="mb-0">No course offerings found</p>
                            <small>Use "Add Course Offering" button to create offerings</small>
                        </div>
                    </div>`;
                return;
            }
            
            // Store all offerings for pagination
            allCourseOfferings = offerings;
            totalPages = Math.ceil(offerings.length / PAGE_SIZE);
            currentPage = 1;
            
            console.log(`Total offerings: ${offerings.length}, Page size: ${PAGE_SIZE}, Total pages: ${totalPages}`);
            
            // Display first page
            displayCourseOfferingsPage();
        }
        
        // Display course offerings for current page
        function displayCourseOfferingsPage() {
            const listContainer = document.getElementById('courseOfferingList');
            
            const startIndex = (currentPage - 1) * PAGE_SIZE;
            const endIndex = startIndex + PAGE_SIZE;
            const pageOfferings = allCourseOfferings.slice(startIndex, endIndex);
            
            console.log(`Displaying page ${currentPage}: ${startIndex + 1} to ${endIndex} of ${allCourseOfferings.length}`);
            console.log('Page offerings:', pageOfferings);
            
            // Display course offerings for current page
            listContainer.innerHTML = pageOfferings.map(offering => `
                <div class="list-group-item list-group-item-action p-3" 
                     onclick="selectCourseOffering('${offering.id}')" 
                     id="course-item-${offering.id}">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <h6 class="mb-1 course-item-title">${offering.course?.courseName || 'N/A'}</h6>
                            <small class="course-code">${offering.course?.courseCode || 'N/A'}</small>
                            <div class="mt-1">
                                <span class="badge bg-info bg-opacity-75 course-item-badge">${offering.trimester?.academicYear || 'N/A'} - Tri${offering.trimester?.trimesterNumber || 'N/A'}</span>
                                <span class="badge bg-warning bg-opacity-75 ms-1 course-item-badge">
                                    <i class="fas fa-chalkboard-teacher me-1"></i>${offering.tutor ? `${offering.tutor.firstName} ${offering.tutor.lastName}` : 'No Tutor'}
                                </span>
                            </div>
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" 
                                    type="button" 
                                    data-bs-toggle="dropdown" 
                                    aria-expanded="false"
                                    onclick="event.stopPropagation()">
                                <i class="fas fa-ellipsis-v"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#" onclick="editCourseOffering('${offering.id}'); event.stopPropagation();">
                                    <i class="fas fa-edit me-2"></i>Edit
                                </a></li>
                                <li><a class="dropdown-item text-danger" href="#" onclick="deleteCourseOffering('${offering.id}'); event.stopPropagation();">
                                    <i class="fas fa-trash me-2"></i>Delete
                                </a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            `).join('');
            
            // Add pagination controls if needed
            if (totalPages > 1) {
                addCourseOfferingsPagination();
            }
        }
        
        // Add pagination controls for course offerings
        function addCourseOfferingsPagination() {
            const listContainer = document.getElementById('courseOfferingList');
            
            const paginationHtml = `
                <div class="d-flex justify-content-between align-items-center p-3 border-top">
                    <div class="text-muted small">
                        Showing ${(currentPage - 1) * PAGE_SIZE + 1} to ${Math.min(currentPage * PAGE_SIZE, allCourseOfferings.length)} of ${allCourseOfferings.length} results
                    </div>
                    <nav aria-label="Course offerings pagination">
                        <ul class="pagination pagination-sm mb-0">
                            <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                                <a class="page-link" href="#" onclick="changeCourseOfferingsPage(${currentPage - 1})" ${currentPage === 1 ? 'tabindex="-1"' : ''}>
                                    <i class="fas fa-chevron-left"></i>
                                </a>
                            </li>
                            ${generatePageNumbers(currentPage, totalPages, 'changeCourseOfferingsPage')}
                            <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                                <a class="page-link" href="#" onclick="changeCourseOfferingsPage(${currentPage + 1})" ${currentPage === totalPages ? 'tabindex="-1"' : ''}>
                                    <i class="fas fa-chevron-right"></i>
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            `;
            
            listContainer.insertAdjacentHTML('beforeend', paginationHtml);
        }
        
        // Change page for course offerings
        function changeCourseOfferingsPage(page) {
            if (page < 1 || page > totalPages) return;
            
            currentPage = page;
            displayCourseOfferingsPage();
        }
        
        // Generate page numbers for pagination
        function generatePageNumbers(currentPage, totalPages, changeFunction) {
            let pages = [];
            const maxVisiblePages = 5;
            
            if (totalPages <= maxVisiblePages) {
                // Show all page numbers if total pages is small
                for (let i = 1; i <= totalPages; i++) {
                    pages.push(i);
                }
            } else {
                // Show partial page numbers for large page counts
                if (currentPage <= 3) {
                    // Current page is in first few pages
                    for (let i = 1; i <= 4; i++) {
                        pages.push(i);
                    }
                    pages.push('...');
                    pages.push(totalPages);
                } else if (currentPage >= totalPages - 2) {
                    // Current page is in last few pages
                    pages.push(1);
                    pages.push('...');
                    for (let i = totalPages - 3; i <= totalPages; i++) {
                        pages.push(i);
                    }
                } else {
                    // Current page is in middle
                    pages.push(1);
                    pages.push('...');
                    for (let i = currentPage - 1; i <= currentPage + 1; i++) {
                        pages.push(i);
                    }
                    pages.push('...');
                    pages.push(totalPages);
                }
            }
            
            return pages.map(page => {
                if (page === '...') {
                    return '<li class="page-item disabled"><span class="page-link">...</span></li>';
                } else {
                    return `<li class="page-item ${page === currentPage ? 'active' : ''}">
                                <a class="page-link" href="#" onclick="${changeFunction}(${page})">${page}</a>
                            </li>`;
                }
            }).join('');
        }

        // Select course offering to show details
        function selectCourseOffering(offeringId) {
            // Remove active class from all items
            document.querySelectorAll('#courseOfferingList .list-group-item').forEach(item => {
                item.classList.remove('active');
            });
            
            // Add active class to selected item
            const selectedItem = document.getElementById(`course-item-${offeringId}`);
            if (selectedItem) {
                selectedItem.classList.add('active');
            }
            
            // Load and display course offering details
            loadCourseOfferingDetails(offeringId);
        }

        // Load course offering details
        function loadCourseOfferingDetails(offeringId) {
            const detailsContainer = document.getElementById('courseOfferingDetails');
            
            // Show loading state
            detailsContainer.innerHTML = `
                <div class="text-center py-4">
                    <div class="text-muted">
                        <i class="fas fa-spinner fa-spin fa-2x mb-3"></i>
                        <p class="mb-0">Loading course offering details...</p>
                    </div>
                </div>
            `;
            
            // Fetch course offering details
            fetch(`/Admin/Course/GetCourseOffering?id=${offeringId}`)
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        displayCourseOfferingDetails(result.data);
                    } else {
                        showError(result.message || 'Failed to load course offering details');
                        detailsContainer.innerHTML = `
                            <div class="text-center py-4">
                                <div class="text-danger">
                                    <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                                    <p class="mb-0">Failed to load details</p>
                                </div>
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    showError('Failed to load course offering details');
                    detailsContainer.innerHTML = `
                        <div class="text-center py-4">
                            <div class="text-danger">
                                <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                                <p class="mb-0">Error loading details</p>
                            </div>
                        </div>
                    `;
                });
        }

                 // Display course offering details
         function displayCourseOfferingDetails(offering) {
             const detailsContainer = document.getElementById('courseOfferingDetails');
             
             // Store current selected offering globally for other functions to access
             window.currentSelectedOffering = offering;
             
             detailsContainer.innerHTML = `
                 <div class="row">
                     <div class="col-12">
                         <div class="d-flex justify-content-between align-items-center mb-4">
                             <h4 class="mb-0">${offering.course?.courseName || 'N/A'}</h4>
                         </div>
                     </div>
                 </div>
                 
                  
                  <!-- Enrolled Students Section -->
                  <div class="row">
                      <div class="col-12">
                          <div class="card border-0 bg-light">
                              <div class="card-body">
                                  <div class="d-flex justify-content-between align-items-center mb-3">
                                      <h6 class="card-title fw-bold mb-0">
                                          <i class="fas fa-users text-primary me-2"></i>
                                          Enrolled Students
                                          <span class="badge bg-primary ms-2" id="enrolledStudentsCount">0</span>
                                      </h6>
                                       <div class="d-flex gap-2">
                                          <button class="btn btn-success btn-sm" id="addStudentsBtn" onclick="showAddStudentsModal('${offering.id}', '${offering.courseId}', '${offering.trimesterId}')">
                                              <i class="fas fa-user-plus me-1"></i>Add Students
                                          </button>
                                          <button class="btn btn-info btn-sm" id="uploadExcelBtn" onclick="showUploadExcelModal('${offering.id}', '${offering.courseId}', '${offering.trimesterId}')">
                                              <i class="fas fa-file-excel me-1"></i>Upload Excel
                                          </button>
                                       </div>
                                  </div>
                                  
                                                                     <!-- Filter Controls -->
                                   <div class="mb-3">
                                       <div class="row g-2">
                                           <div class="col-md-12">
                                               <label for="filterTrimester" class="form-label small text-muted">Current Trimester</label>
                                               <div id="filterTrimester" class="trimester-display w-100">
                                                   <div class="text-muted">Loading current trimester...</div>
                                               </div>
                                           </div>
                                       </div>
                                   </div>
                                  
                                  <div id="enrolledStudentsList" class="enrolled-students-list">
                                      <div class="text-center py-4">
                                          <i class="fas fa-users fa-2x text-muted mb-3"></i>
                                          <p class="text-muted mb-0">Loading enrolled students for current trimester...</p>
                                          <small class="text-muted">Showing students for the latest trimester</small>
                                      </div>
                                  </div>
                              </div>
                          </div>
                      </div>
                  </div>
              `;
             
             // Load trimesters data for the filter dropdowns immediately
             loadTrimestersForDetails();
               
               // Auto-apply the filter for the current trimester in the Details page
               setTimeout(() => {
                   const detailsFilterDisplay = document.getElementById('filterTrimester');
                   if (detailsFilterDisplay && window.availableTrimesters && window.availableTrimesters.length > 0) {
                       // Since we only show the current trimester now, automatically apply the filter
                       const currentTrimester = window.availableTrimesters[0];
                       
                       if (currentTrimester) {
                           console.log(`Details: Auto-applying filter for current trimester: ${currentTrimester.academicYear} - Trimester ${currentTrimester.trimesterNumber}`);
                           
                           // Automatically apply the filter to load enrolled students
                           filterEnrolledStudents();
                       }
                   }
               }, 100); // Small delay to ensure the display is populated
         }

        // Update course offering count
        function updateCourseOfferingCount(count) {
            document.getElementById('courseOfferingListCount').textContent = count;
        }



        // Edit course offering
        function editCourseOffering(offeringId) {
            // Show loading state
            const editModal = new bootstrap.Modal(document.getElementById('editCourseOfferingModal'));
            editModal.show();
            
            // Load offering data
            fetch(`/Admin/Course/GetCourseOffering?id=${offeringId}`)
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        const offering = result.data;
                        
                        // Populate form fields
                        document.getElementById('editCourseOfferingHiddenId').value = offering.id;
                        document.getElementById('editTrimesterIdHidden').value = offering.trimesterId;
                        document.getElementById('editCourseId').value = offering.courseId;
                        document.getElementById('editTutorId').value = offering.tutorId || '';
                    } else {
                        showError(result.message || 'Failed to load course offering data');
                        editModal.hide();
                    }
                })
                .catch(error => {
                    showError('Failed to load course offering data');
                    editModal.hide();
                });
        }

        // Update course offering
        async function updateCourseOffering() {
            const form = document.getElementById('editCourseOfferingForm');
            const formData = new FormData(form);
            
            // Validate required fields
            const trimesterId = formData.get('trimesterId');
            const courseId = formData.get('courseId');
            
            if (!trimesterId || !courseId) {
                showError('Please wait for trimester information to load and select a Course!');
                return;
            }
            
            // Show loading state
            const updateButton = document.querySelector('#editCourseOfferingModal .btn-success');
            const originalText = updateButton.innerHTML;
            updateButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Updating...';
            updateButton.disabled = true;
            
            try {
            // Prepare data for API call
            const offeringData = {
                id: formData.get('id'),
                trimesterId: formData.get('trimesterId'),
                courseId: courseId,
                tutorId: formData.get('tutorId') || null,
                    isActive: true
            };
            
            // Call API
                const response = await fetch('/Admin/Course/UpdateCourseOffering', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(offeringData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showSuccess(result.message || 'Course offering updated successfully!');
                    
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editCourseOfferingModal'));
                    modal.hide();
                    
                    // Reset form
                    form.reset();
                    
                    // Get current filter value to preserve it
                    const currentTrimesterFilter = document.getElementById('trimesterFilter');
                    const currentTrimesterId = currentTrimesterFilter ? currentTrimesterFilter.getAttribute('data-trimester-id') : null;
                    
                    // Reload offerings with current filter to maintain the filtered view
                    if (currentTrimesterId) {
                        loadCourseOfferingsWithFilter(currentTrimesterId);
                    } else {
                        loadCourseOfferings();
                    }
                } else {
                    showError(result.message || 'Failed to update course offering');
                }
            } catch (error) {
                console.error('Error updating course offering:', error);
                showError('Failed to update course offering');
            } finally {
                // Reset button state
                updateButton.innerHTML = originalText;
                updateButton.disabled = false;
            }
        }

        // Delete course offering
        function deleteCourseOffering(offeringId) {
            showConfirm(
                'Are you sure you want to delete this course offering?',
                () => {
                    // Show loading message
                    const loadingToast = showLoading('Deleting course offering...');
                    
                    // Call API
                    fetch(`/Admin/Course/DeleteCourseOffering?id=${offeringId}`, {
                        method: 'DELETE'
                    })
                    .then(response => response.json())
                    .then(result => {
                        // Clear loading toast
                        clearAllToasts();
                        
                        if (result.success) {
                            showSuccess(result.message || 'Course offering deleted successfully!');
                            // Reload offerings with current trimester filter to maintain the filtered view
                            const currentTrimesterFilter = document.getElementById('trimesterFilter');
                            const currentTrimesterId = currentTrimesterFilter ? currentTrimesterFilter.getAttribute('data-trimester-id') : null;
                            
                            if (currentTrimesterId) {
                                loadCourseOfferingsWithFilter(currentTrimesterId);
                            } else {
                                loadCourseOfferings();
                            }
                        } else {
                            showError(result.message || 'Failed to delete course offering');
                        }
                    })
                    .catch(error => {
                        clearAllToasts();
                        showError('Failed to delete course offering');
                    });
                },
                null,
                'Delete Course Offering'
            );
        }

        // Apply filters
        function applyFilters() {
            const trimesterFilter = document.getElementById('trimesterFilter');
            const trimesterId = trimesterFilter.getAttribute('data-trimester-id');
            
            // Reset pagination when applying filters
            currentPage = 1;
            
            // Reload offerings with trimester filter
            loadCourseOfferingsWithFilter(trimesterId);
        }

        // Clear filters - Not needed since we only show latest trimester
        function clearFilters() {
            // This function is no longer needed since we only show the latest trimester
            // But we'll keep it for compatibility and just reload the current trimester data
            const trimesterFilter = document.getElementById('trimesterFilter');
            const currentTrimesterId = trimesterFilter ? trimesterFilter.getAttribute('data-trimester-id') : null;
            
            if (currentTrimesterId) {
                loadCourseOfferingsWithFilter(currentTrimesterId);
            } else {
                loadCourseOfferings();
            }
        }

        // ===== ENROLLED STUDENTS FUNCTIONS =====
        
        // Flag to prevent duplicate loading of trimesters
        let trimestersLoaded = false;
        
        // Show Add Students Modal
        function showAddStudentsModal(courseOfferingId, courseId, trimesterId) {
              // Get the currently selected trimester from the filter display
              const filterTrimesterDisplay = document.getElementById('filterTrimester');
              const selectedTrimesterId = filterTrimesterDisplay.getAttribute('data-trimester-id');
              
              if (!selectedTrimesterId) {
                  showInfo('Please wait for the trimester information to load before adding students to this course.');
                  return;
              }
             
             // Get trimester display text
             const selectedTrimester = window.availableTrimesters?.find(t => String(t.id) === String(selectedTrimesterId));
             const trimesterDisplayText = selectedTrimester ? 
                 `${selectedTrimester.academicYear} - Trimester ${selectedTrimester.trimesterNumber}` : 
                 'Unknown Trimester';
             
            // Set modal values
            document.getElementById('modalCourseOfferingId').value = courseOfferingId;
            document.getElementById('modalCourseId').value = courseId;
             document.getElementById('modalTrimesterId').value = selectedTrimesterId;
             
             // Update trimester display in modal
             document.getElementById('modalTrimesterDisplay').textContent = trimesterDisplayText;
            
            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('addStudentToCourseModal'));
            modal.show();
        }
        
        // Show Upload Excel Modal
        function showUploadExcelModal(courseOfferingId, courseId, trimesterId) {
              // Get the currently selected trimester from the filter display
              const filterTrimesterDisplay = document.getElementById('filterTrimester');
              const selectedTrimesterId = filterTrimesterDisplay.getAttribute('data-trimester-id');
              
              if (!selectedTrimesterId) {
                  showInfo('Please wait for the trimester information to load before uploading the Excel file.');
                  return;
              }
             
             // Get trimester display text
             const selectedTrimester = window.availableTrimesters?.find(t => String(t.id) === String(selectedTrimesterId));
             const trimesterDisplayText = selectedTrimester ? 
                 `${selectedTrimester.academicYear} - Trimester ${selectedTrimester.trimesterNumber}` : 
                 'Unknown Trimester';
             
            // Set modal values
            document.getElementById('excelCourseOfferingId').value = courseOfferingId;
            document.getElementById('excelCourseId').value = courseId;
             document.getElementById('excelTrimesterId').value = selectedTrimesterId;
             
             // Update trimester display in modal
             document.getElementById('excelTrimesterDisplay').textContent = trimesterDisplayText;
            
            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('uploadExcelModal'));
            modal.show();
        }
        
                 // Load trimesters for Details page filter display
         async function loadTrimestersForDetails() {
             try {
                 const response = await fetch('/Admin/Trimester/GetLatestTrimester');
                 const data = await response.json();

                 if (data.success && data.data) {
                     const currentTrimester = data.data;
                     
                     // Populate filter display in Details page
                     const filterTrimesterDisplay = document.getElementById('filterTrimester');
                     
                     if (filterTrimesterDisplay) {
                         // For Details page filter display, show the current trimester
                                                  filterTrimesterDisplay.innerHTML = `
                             <div class="d-flex align-items-center justify-content-center">
                                 <div class="text-center">
                                     <div class="h5 mb-1 text-primary fw-bold">${currentTrimester.academicYear} - Trimester ${currentTrimester.trimesterNumber}</div>
                                     <div class="text-muted small">Current Academic Period</div>
                                 </div>
                             </div>
                         `;
                         
                         console.log(`Details filter: Showing current trimester: ${currentTrimester.academicYear} - Trimester ${currentTrimester.trimesterNumber}`);
                         
                         // Store current trimester ID for filtering
                         filterTrimesterDisplay.setAttribute('data-trimester-id', currentTrimester.id);
                         
                         // Store trimesters data globally for later use
                         window.availableTrimesters = [currentTrimester];
                         
                         console.log(`Details: Loaded current trimester: ${currentTrimester.academicYear} - Trimester ${currentTrimester.trimesterNumber}`);
                         console.log('Details: Trimester display populated successfully');
                     }
                 } else {
                     console.error('Error loading current trimester for details:', data.message);
                     const filterTrimesterDisplay = document.getElementById('filterTrimester');
                     if (filterTrimesterDisplay) {
                         filterTrimesterDisplay.innerHTML = '<div class="text-warning">No Current Trimester Available</div>';
                     }
                 }
             } catch (error) {
                 console.error('Error loading current trimester for details:', error);
                 const filterTrimesterDisplay = document.getElementById('filterTrimester');
                 if (filterTrimesterDisplay) {
                     filterTrimesterDisplay.innerHTML = '<div class="text-danger">Error loading trimester</div>';
                 }
             }
         }
         
                  // Load trimesters for modal dropdowns (no longer needed as we removed trimester selection dropdowns)
         async function loadTrimesters() {
            try {
                const response = await fetch('/Admin/Trimester/GetActiveTrimesters');
                const data = await response.json();

                if (data.success) {
                    const trimesters = data.data;
                    
                    // Store trimesters data globally for later use
                    window.availableTrimesters = trimesters;
                    
                    // Set flag to prevent duplicate loading
                    trimestersLoaded = true;
                    
                } else {
                    console.error('Error loading trimesters:', data.message);
                }
            } catch (error) {
                console.error('Error loading trimesters:', error);
            }
        }
        
                 // Setup form event listeners (no longer needed as we removed trimester selection dropdowns)
        function setupFormEventListeners() {
             // Event listeners setup is no longer needed since we removed trimester selection dropdowns
        }
        
         // Setup event listeners for Details page dropdowns (no longer needed as we removed trimester selection dropdowns)
        function setupDetailsPageEventListeners() {
             // Event listeners setup is no longer needed since we removed trimester selection dropdowns
        }
        
        // Get trimester data by ID from stored trimesters
        function getTrimesterById(trimesterId) {
            return window.availableTrimesters?.find(t => String(t.id) === String(trimesterId));
        }
        
        // Filter enrolled students based on current trimester
        function filterEnrolledStudents() {
            const filterTrimesterDisplay = document.getElementById('filterTrimester');
            const trimesterId = filterTrimesterDisplay.getAttribute('data-trimester-id');
            const addStudentsBtn = document.getElementById('addStudentsBtn');
            const uploadExcelBtn = document.getElementById('uploadExcelBtn');
            
            // Reset pagination when filtering
            enrolledStudentsCurrentPage = 1;
            
            // Remove disabled attribute to allow clicking and showing prompts
            if (addStudentsBtn) addStudentsBtn.removeAttribute('disabled');
            if (uploadExcelBtn) uploadExcelBtn.removeAttribute('disabled');
            
            if (trimesterId) {
                // Get trimester data from stored trimesters
                const selectedTrimester = window.availableTrimesters?.find(t => String(t.id) === String(trimesterId));
                
                if (selectedTrimester) {
                    loadEnrolledStudents(selectedTrimester.academicYear, selectedTrimester.trimesterNumber);
                } else {
                    showInvalidSelectionMessage();
                }
            } else {
                // Show message that trimester selection is required
                showNoSelectionMessage();
            }
        }
        
        // Show message when no trimester is selected
        function showNoSelectionMessage() {
            const container = document.getElementById('enrolledStudentsList');
            const countElement = document.getElementById('enrolledStudentsCount');
            
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-spinner fa-spin fa-2x text-muted mb-3"></i>
                    <p class="text-muted mb-0">Loading trimester information...</p>
                    <small class="text-muted">Please wait while we load the current trimester</small>
                </div>
            `;
            countElement.textContent = '0';
        }
        
        // Show message when invalid selection is made
        function showInvalidSelectionMessage() {
            const container = document.getElementById('enrolledStudentsList');
            const countElement = document.getElementById('enrolledStudentsCount');
            
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-exclamation-triangle fa-2x text-warning mb-3"></i>
                    <p class="text-muted mb-0">Trimester information not available</p>
                    <small class="text-muted">Please refresh the page to reload trimester data</small>
                </div>
            `;
            countElement.textContent = '0';
        }
        
        // Clear enrolled students filters - Not needed since we only show current trimester
        function clearEnrolledStudentsFilters() {
            // This function is no longer needed since we only show the current trimester
            // But we'll keep it for compatibility and just reload the current trimester data
            const filterTrimesterDisplay = document.getElementById('filterTrimester');
            const filterTrimesterId = filterTrimesterDisplay.getAttribute('data-trimester-id');
            if (filterTrimesterId) {
                const selectedTrimester = window.availableTrimesters?.find(t => String(t.id) === String(filterTrimesterId));
                if (selectedTrimester) {
                    loadEnrolledStudents(selectedTrimester.academicYear, selectedTrimester.trimesterNumber);
                }
            }
        }
        
        // Load enrolled students for this course
        async function loadEnrolledStudents(academicYear = null, trimesterNumber = null) {
            const container = document.getElementById('enrolledStudentsList');
            const countElement = document.getElementById('enrolledStudentsCount');
            
            // Show loading state
            container.innerHTML = `
                <div class="text-center py-4">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted mb-0">Loading enrolled students...</p>
                </div>
            `;
            
                         try {
                 // Get course offering ID from the selected offering
                 const courseOfferingId = window.currentSelectedOffering?.id;
                 
                 // Use trimesterId from filter dropdown if academicYear and trimesterNumber are provided
                 let trimesterId;
                 if (academicYear && trimesterNumber) {
                     // Find trimesterId based on academicYear and trimesterNumber
                     const selectedTrimester = window.availableTrimesters?.find(t => 
                         t.academicYear === academicYear && t.trimesterNumber === trimesterNumber
                     );
                     trimesterId = selectedTrimester?.id;
                 } else {
                     // Fallback to currentSelectedOffering trimesterId
                     trimesterId = window.currentSelectedOffering?.trimesterId;
                 }
                 
                 if (!courseOfferingId) {
                     throw new Error('Course Offering ID not found');
                 }
                 
                 let url = `/Admin/Student/GetEnrolledStudents`;
                 const params = new URLSearchParams();
                 
                 // Always append courseOfferingId
                 params.append('courseOfferingId', courseOfferingId);
                 
                 // Always append trimesterId if available
                 if (trimesterId) {
                     params.append('trimesterId', trimesterId);
                 }
                 
                 if (params.toString()) {
                     url += '?' + params.toString();
                 }
                
                const response = await fetch(url);
                const data = await response.json();
                
                if (data.success) {
                    const students = data.data;
                    
                    if (students && students.length > 0) {
                        // Store all enrolled students for pagination
                        allEnrolledStudents = students;
                        enrolledStudentsCurrentPage = 1; // Reset to first page
                        
                        // Display enrolled students with pagination
                        displayEnrolledStudentsPage(students);
                        countElement.textContent = students.length;
                    } else {
                        allEnrolledStudents = [];
                        enrolledStudentsCurrentPage = 1;
                        enrolledStudentsTotalPages = 1;
                        container.innerHTML = `
                            <div class="text-center py-4">
                                <i class="fas fa-users fa-2x text-muted mb-3"></i>
                                <p class="text-muted mb-0">No students enrolled for the selected criteria</p>
                                <small class="text-muted">Try changing the filters or adding students to this course</small>
                            </div>
                        `;
                        countElement.textContent = '0';
                    }
                } else {
                    console.error('Error loading enrolled students:', data.message);
                    container.innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-exclamation-triangle fa-2x text-warning mb-3"></i>
                            <p class="text-muted mb-0">Error loading enrolled students</p>
                            <small class="text-danger">${data.message}</small>
                        </div>
                    `;
                    countElement.textContent = '0';
                }
            } catch (error) {
                console.error('Error loading enrolled students:', error);
                container.innerHTML = `
                     <div class="text-center py-4">
                         <i class="fas fa-exclamation-triangle fa-2x text-warning mb-3"></i>
                         <p class="text-muted mb-0">Error loading enrolled students</p>
                         <small class="text-danger">${error.message}</small>
                     </div>
                 `;
                 countElement.textContent = '0';
             }
         }
         
         // Display enrolled students in the list with pagination
         function displayEnrolledStudents(students) {
             // Store all students for pagination
             allEnrolledStudents = students;
             enrolledStudentsCurrentPage = 1;
             
             // Display first page
             displayEnrolledStudentsPage(students);
         }
         
         // Display enrolled students for a specific page
         function displayEnrolledStudentsPage(students) {
             const container = document.getElementById('enrolledStudentsList');
             const countElement = document.getElementById('enrolledStudentsCount');

             if (students && students.length > 0) {
                 countElement.textContent = students.length;
                 
                 // Calculate pagination
                 enrolledStudentsTotalPages = Math.ceil(students.length / ENROLLED_STUDENTS_PAGE_SIZE);
                 const startIndex = (enrolledStudentsCurrentPage - 1) * ENROLLED_STUDENTS_PAGE_SIZE;
                 const endIndex = Math.min(startIndex + ENROLLED_STUDENTS_PAGE_SIZE, students.length);
                 const pageStudents = students.slice(startIndex, endIndex);
                 
                 container.innerHTML = `
                     <div class="mb-3">
                         <div class="d-flex justify-content-between align-items-center">
                             <span class="text-muted small">Showing ${startIndex + 1} to ${endIndex} of ${students.length} enrolled students</span>
                         </div>
                     </div>
                     ${pageStudents.map(student => `
                         <div class="d-flex align-items-center mb-3 p-3 border rounded bg-light student-card">
                             <div class="flex-grow-1">
                                 <div class="d-flex align-items-center mb-1">
                                     <div class="fw-semibold text-dark me-2 fs-5">${student.firstName || ''} ${student.lastName || ''}</div>
                                     <span class="badge ${student.isActive ? 'bg-success' : 'bg-secondary'}">
                                         ${student.isActive ? 'Active' : 'Inactive'}
                                     </span>
                                 </div>
                                 <div class="text-muted fs-6">
                                     <i class="fas fa-id-card me-1"></i>${student.studentNo || 'N/A'}
                                 </div>
                                 <div class="text-muted fs-6">
                                     <i class="fas fa-envelope me-1"></i>${student.email || 'N/A'}
                                 </div>
                             </div>
                             <div class="ms-2">
                                 <button class="btn btn-outline-danger btn-sm" onclick="removeStudentFromCourse('${student.id}')" title="Remove from course">
                                     <i class="fas fa-times"></i>
                                 </button>
                             </div>
                         </div>
                     `).join('')}
                 `;
                 
                 // Add pagination controls if needed
                 if (enrolledStudentsTotalPages > 1) {
                     addEnrolledStudentsPagination();
                 }
             } else {
                 countElement.textContent = '0';
                 container.innerHTML = `
                     <div class="text-center py-4">
                         <i class="fas fa-users fa-2x text-muted mb-3"></i>
                         <p class="text-muted mb-0">No students enrolled yet</p>
                         <small class="text-muted">Use the "Add Students" button above to enroll students</small>
                     </div>
                 `;
             }
         }
         
         // Search timeout for debouncing
         let searchTimeout;
         
         // Search for available students
         async function searchStudents() {
             const searchTerm = document.getElementById('studentSearch').value.trim();
             const container = document.getElementById('availableStudentsList');

             if (!searchTerm) {
                 container.innerHTML = `
                     <div class="text-center py-4">
                         <i class="fas fa-search fa-2x text-muted mb-3"></i>
                         <p class="text-muted mb-0">Enter a search term to find students</p>
                     </div>
                 `;
                 return;
             }

             // Show typing indicator for better UX
             if (searchTerm.length < 3) {
                 container.innerHTML = `
                     <div class="text-center py-4">
                         <i class="fas fa-keyboard fa-2x text-muted mb-3"></i>
                         <p class="text-muted mb-0">Type at least 3 characters to search</p>
                     </div>
                 `;
                 return;
             }

             // Clear previous timeout
             if (searchTimeout) {
                 clearTimeout(searchTimeout);
             }

             // Set new timeout for debounced search
             searchTimeout = setTimeout(async () => {
                 await performStudentSearch(searchTerm, container);
             }, 300);
         }
         
         // Perform the actual student search
         async function performStudentSearch(searchTerm, container) {
             // Show loading state
             container.innerHTML = `
                 <div class="text-center py-4">
                     <div class="spinner-border text-primary mb-3" role="status">
                         <span class="visually-hidden">Loading...</span>
                     </div>
                     <p class="text-muted mb-0">Searching for students...</p>
                 </div>
             `;

             try {
                 const response = await fetch(`/Admin/Student/SearchStudents?searchTerm=${encodeURIComponent(searchTerm)}`);
                 const data = await response.json();

                 if (data.success) {
                     displayAvailableStudents(data.data);
                 } else {
                     container.innerHTML = `
                         <div class="text-center py-4">
                             <i class="fas fa-exclamation-triangle fa-2x text-warning mb-3"></i>
                             <p class="text-muted mb-0">Error: ${data.message}</p>
                         </div>
                     `;
                 }
             } catch (error) {
                 console.error('Error searching students:', error);
                 container.innerHTML = `
                     <div class="text-center py-4">
                         <i class="fas fa-exclamation-triangle fa-2x text-warning mb-3"></i>
                         <p class="text-muted mb-0">Error searching for students</p>
                     </div>
                 `;
             }
         }
         
         // Display available students in the modal
         function displayAvailableStudents(students) {
             const container = document.getElementById('availableStudentsList');

             if (students && students.length > 0) {
                 container.innerHTML = `
                     <div class="mb-3">
                         <div class="d-flex justify-content-between align-items-center mb-2">
                             <span class="text-muted small">Found ${students.length} student(s)</span>
                             <div>
                                 <button type="button" class="btn btn-outline-primary btn-sm" onclick="selectAllStudents()">
                                     <i class="fas fa-check-double me-1"></i>Select All
                                 </button>
                                 <button type="button" class="btn btn-outline-secondary btn-sm ms-1" onclick="deselectAllStudents()">
                                     <i class="fas fa-times me-1"></i>Deselect All
                                 </button>
                             </div>
                         </div>
                     </div>
                     ${students.map(student => `
                         <div class="form-check mb-3 p-3 border rounded student-card">
                             <input class="form-check-input" type="checkbox" value="${student.id}" id="student_${student.id}" onchange="updateSelectedStudentsCount()">
                             <label class="form-check-label w-100" for="student_${student.id}">
                                 <div class="d-flex justify-content-between align-items-start">
                                     <div class="flex-grow-1">
                                         <div class="fw-semibold text-dark fs-5">${student.firstName || ''} ${student.lastName || ''}</div>
                                         <div class="text-muted fs-6">
                                             <i class="fas fa-id-card me-1"></i>${student.studentNo || 'N/A'}
                                         </div>
                                         <div class="text-muted fs-6">
                                             <i class="fas fa-envelope me-1"></i>${student.email || 'N/A'}
                                         </div>
                                     </div>
                                     <div class="ms-2">
                                         <span class="badge ${student.isActive ? 'bg-success' : 'bg-secondary'}">
                                             ${student.isActive ? 'Active' : 'Inactive'}
                                         </span>
                                     </div>
                                 </div>
                             </label>
                         </div>
                     `).join('')}
                 `;
             } else {
                 container.innerHTML = `
                     <div class="text-center py-4">
                         <i class="fas fa-search fa-2x text-muted mb-3"></i>
                         <p class="text-muted mb-0">No students found</p>
                         <small class="text-muted">Try different search terms or check spelling</small>
                     </div>
                 `;
             }
         }
         
                          // Add students to course form submission
         const addStudentsForm = document.getElementById('addStudentsToCourseForm');
         
         if (addStudentsForm) {
             addStudentsForm.addEventListener('submit', function(e) {
                 e.preventDefault();
                 addStudentsToCourse();
             });
         }
         
                 // Add selected students to the course
                async function addStudentsToCourse() {
            const courseOfferingId = document.getElementById('modalCourseOfferingId').value;
             const trimesterId = document.getElementById('modalTrimesterId').value;
             const selectedStudents = Array.from(document.querySelectorAll('#availableStudentsList input[type="checkbox"]:checked'))
                 .map(checkbox => checkbox.value);



             if (!trimesterId) {
                  showInfo('Please wait for the trimester information to load before proceeding.');
                 return;
             }

             // Get trimester data from stored trimesters
             const selectedTrimester = window.availableTrimesters?.find(t => String(t.id) === String(trimesterId));
             
             if (!selectedTrimester) {
                  showInfo('Please wait for the trimester information to load before proceeding.');
                 return;
             }

             const { academicYear, trimesterNumber } = selectedTrimester;

             if (selectedStudents.length === 0) {
                 showError('Please select at least one student to add to the course.');
                 return;
             }

             // Show confirmation dialog for large number of students
             if (selectedStudents.length > 10) {
                                 showConfirm(
                    `Are you sure you want to add ${selectedStudents.length} students to this course?`,
                    () => performAddStudentsToCourse(courseOfferingId, selectedStudents, academicYear, trimesterNumber, trimesterId),
                    null,
                    'Confirm Bulk Add'
                );
                 return;
             }

             await performAddStudentsToCourse(courseOfferingId, selectedStudents, academicYear, trimesterNumber, trimesterId);
         }
         
                 // Perform the actual add students operation
        async function performAddStudentsToCourse(courseOfferingId, selectedStudents, academicYear, trimesterNumber, trimesterId) {

            // Show loading state
            const submitBtn = document.querySelector('#addStudentsToCourseForm button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Adding Students...';

            try {
                 const requestBody = {
                     courseOfferingId: courseOfferingId,
                     studentIds: selectedStudents,
                     academicYear: parseInt(academicYear) || 0,
                     trimesterNumber: parseInt(trimesterNumber) || 0,
                     trimesterId: trimesterId
                 };
                 

                 
                 const response = await fetch('/Admin/Course/AddStudentsToCourseOffering', {
                     method: 'POST',
                     headers: {
                         'Content-Type': 'application/json',
                     },
                     body: JSON.stringify(requestBody)
                 });

                 const data = await response.json();

                 if (data.success) {
                     showSuccess(`Successfully added ${selectedStudents.length} student(s) to the course!`);
                     
                     // Close modal
                     const modal = bootstrap.Modal.getInstance(document.getElementById('addStudentToCourseModal'));
                     modal.hide();
                     
                     // Reset form and search
                     document.getElementById('addStudentsToCourseForm').reset();
                     document.getElementById('studentSearch').value = '';
                     document.getElementById('availableStudentsList').innerHTML = `
                         <div class="text-center py-4">
                             <i class="fas fa-search fa-2x text-muted mb-3"></i>
                             <p class="text-muted mb-0">Search for students to add to this course</p>
                         </div>
                     `;
                     
                     // Reset pagination state for new data
                     enrolledStudentsCurrentPage = 1;
                     
                     // Reload enrolled students if filter is selected
                     const filterTrimesterDisplay = document.getElementById('filterTrimester');
                     const filterTrimesterId = filterTrimesterDisplay.getAttribute('data-trimester-id');
                     
                     if (filterTrimesterId) {
                         const selectedTrimester = window.availableTrimesters?.find(t => String(t.id) === String(filterTrimesterId));
                         if (selectedTrimester) {
                             loadEnrolledStudents(selectedTrimester.academicYear, selectedTrimester.trimesterNumber);
                         }
                     }
                 } else {
                     if (data.errors && Array.isArray(data.errors)) {
                         showValidationErrors(data.errors);
                     } else {
                         showError('Error: ' + data.message);
                     }
                 }
             } catch (error) {
                 console.error('Error adding students to course:', error);
                 showError('An error occurred while adding students to the course.');
             } finally {
                 // Reset button state
                 submitBtn.disabled = false;
                 submitBtn.innerHTML = originalText;
             }
         }
         
                  // Remove student from course
         async function removeStudentFromCourse(studentId) {
             // Get course offering ID from the current selected offering
             const courseOfferingId = window.currentSelectedOffering?.id;
             const currentTrimesterId = window.currentSelectedOffering?.trimesterId;
             
             if (!courseOfferingId) {
                 showError('Course Offering ID not found');
                 return;
             }
             
             // Get student name for better confirmation
             const studentElement = document.querySelector(`[onclick="removeStudentFromCourse('${studentId}')"]`).closest('.student-card');
             const studentName = studentElement ? studentElement.querySelector('.fw-semibold').textContent.trim() : 'this student';
 
             showConfirm(
                 `Are you sure you want to remove ${studentName} from the course?`,
                 async () => {
                     try {
                         const response = await fetch('/Admin/Course/RemoveStudentFromCourseOffering', {
                             method: 'POST',
                             headers: {
                                 'Content-Type': 'application/json',
                             },
                             body: JSON.stringify({
                                 courseOfferingId: courseOfferingId,
                                 studentId: studentId
                             })
                         });
 
                         const data = await response.json();
 
                         if (data.success) {
                             showSuccess('Student removed from course successfully!');
                             
                             // Update local data and pagination state
                             allEnrolledStudents = allEnrolledStudents.filter(s => s.id !== studentId);
                             
                             // Recalculate total pages
                             enrolledStudentsTotalPages = Math.ceil(allEnrolledStudents.length / ENROLLED_STUDENTS_PAGE_SIZE);
                             
                             // Adjust current page if necessary
                             if (enrolledStudentsCurrentPage > enrolledStudentsTotalPages && enrolledStudentsTotalPages > 0) {
                                 enrolledStudentsCurrentPage = enrolledStudentsTotalPages;
                             }
                             
                             // Reload enrolled students if filters are selected
                             const filterTrimesterDisplay = document.getElementById('filterTrimester');
                             const filterTrimesterId = filterTrimesterDisplay.getAttribute('data-trimester-id');
                             
                             if (filterTrimesterId) {
                                 const selectedTrimester = window.availableTrimesters?.find(t => String(t.id) === String(filterTrimesterId));
                                 if (selectedTrimester) {
                                     loadEnrolledStudents(selectedTrimester.academicYear, selectedTrimester.trimesterNumber);
                                 }
                             }
                         } else {
                             showError('Error: ' + data.message);
                         }
                     } catch (error) {
                         console.error('Error removing student from course:', error);
                         showError('An error occurred while removing the student from the course.');
                     }
                 },
                 null,
                 'Remove Student'
             );
         }
         
         // Excel upload form submission
         document.getElementById('uploadExcelForm').addEventListener('submit', function(e) {
             e.preventDefault();
             uploadStudentsExcel();
         });
         
                   // Upload students Excel file
          async function uploadStudentsExcel() {
              const courseOfferingId = document.getElementById('excelCourseOfferingId').value;
              const selectedTrimesterId = document.getElementById('excelTrimesterId').value;
              const fileInput = document.getElementById('excelFile');

              if (!selectedTrimesterId) {
                   showInfo('Please wait for the trimester information to load before proceeding.');
                  return;
              }

              // Get trimester data from stored trimesters
              const selectedTrimester = window.availableTrimesters?.find(t => String(t.id) === String(selectedTrimesterId));
              
              if (!selectedTrimester) {
                   showInfo('Please wait for the trimester information to load before proceeding.');
                  return;
              }

              const { academicYear, trimesterNumber } = selectedTrimester;

              if (!fileInput.files || fileInput.files.length === 0) {
                  showError('Please select a file to upload.');
                  return;
              }

              // Validate file type
              const file = fileInput.files[0];
              const allowedTypes = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel', 'text/csv'];
              if (!allowedTypes.includes(file.type)) {
                  showError('Please select a valid Excel or CSV file.');
                  return;
              }

              // Validate file size (max 5MB)
              if (file.size > 5 * 1024 * 1024) {
                  showError('File size must be less than 5MB.');
                  return;
              }

              // Show loading state
              const submitBtn = document.querySelector('#uploadExcelForm button[type="submit"]');
              const originalText = submitBtn.innerHTML;
              submitBtn.disabled = true;
              submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Uploading...';

              // Get trimesterId from current selected offering
              const currentTrimesterId = window.currentSelectedOffering?.trimesterId;

             const formData = new FormData();
             formData.append('file', fileInput.files[0]);
             formData.append('courseOfferingId', courseOfferingId);
             if (selectedTrimesterId) {
                 formData.append('trimesterId', selectedTrimesterId);
             }

             try {
                 const response = await fetch('/Admin/Course/UploadStudentsExcelToCourseOffering', {
                     method: 'POST',
                     body: formData
                 });

                 const data = await response.json();

                 if (data.success) {
                     const successMessage = data.message;
                     const resultData = data.data;
                     
                     if (resultData && resultData.errors && resultData.errors.length > 0) {
                         // Show success with warnings about errors
                         Swal.fire({
                             title: 'Import Completed with Warnings',
                             html: `
                                 <div class="text-start">
                                     <p class="text-success"><i class="fas fa-check-circle me-2"></i>${successMessage}</p>
                                     <div class="mt-3">
                                         <h6 class="text-warning"><i class="fas fa-exclamation-triangle me-2"></i>Errors Found:</h6>
                                         <div class="text-start" style="max-height: 200px; overflow-y: auto;">
                                             ${resultData.errors.map(error => `<div class="text-danger small mb-2"></i>${error}</div>`).join('')}
                                         </div>
                                     </div>
                                 </div>
                             `,
                             icon: 'warning',
                             confirmButtonColor: '#ffc107'
                         });
                     } else {
                         showSuccess(successMessage);
                     }
                     
                     // Close modal
                     const modal = bootstrap.Modal.getInstance(document.getElementById('uploadExcelModal'));
                     modal.hide();
                     
                     // Reset form and file input
                     document.getElementById('uploadExcelForm').reset();
                     document.getElementById('excelFile').value = '';
                     
                     // Reload enrolled students if filter is selected
                     const filterTrimesterDisplay = document.getElementById('filterTrimester');
                     const filterTrimesterId = filterTrimesterDisplay.getAttribute('data-trimester-id');
                     
                     if (filterTrimesterId) {
                         const selectedTrimester = window.availableTrimesters?.find(t => String(t.id) === String(filterTrimesterId));
                         if (selectedTrimester) {
                             loadEnrolledStudents(selectedTrimester.academicYear, selectedTrimester.trimesterNumber);
                         }
                     }
                 } else {
                     showError('Error: ' + data.message);
                 }
             } catch (error) {
                 console.error('Error uploading Excel file:', error);
                 showError('An error occurred while uploading the Excel file.');
             } finally {
                 // Reset button state
                 submitBtn.disabled = false;
                 submitBtn.innerHTML = originalText;
             }
         }
         
         // Clear student search
         function clearStudentSearch() {
             document.getElementById('studentSearch').value = '';
             document.getElementById('availableStudentsList').innerHTML = `
                 <div class="text-center py-4">
                     <i class="fas fa-search fa-2x text-muted mb-3"></i>
                     <p class="text-muted mb-0">Search for students to add to this course</p>
                 </div>
             `;
         }
         
         // Select all students
         function selectAllStudents() {
             const checkboxes = document.querySelectorAll('#availableStudentsList input[type="checkbox"]');
             checkboxes.forEach(checkbox => {
                 checkbox.checked = true;
             });
             updateSelectedStudentsCount();
         }
         
         // Deselect all students
         function deselectAllStudents() {
             const checkboxes = document.querySelectorAll('#availableStudentsList input[type="checkbox"]');
             checkboxes.forEach(checkbox => {
                 checkbox.checked = false;
             });
             updateSelectedStudentsCount();
         }
         
         // Update selected students count
         function updateSelectedStudentsCount() {
             const selectedCount = document.querySelectorAll('#availableStudentsList input[type="checkbox"]:checked').length;
             const countElement = document.getElementById('selectedStudentsCount');
             if (countElement) {
                 countElement.textContent = `${selectedCount} student(s) selected`;
             }
         }
         
         // Download students Excel template
         function downloadStudentsTemplate() {
             try {
                 // Create a temporary link element
                 const link = document.createElement('a');
                 link.href = '/Admin/Course/DownloadStudentsTemplate';
                 link.download = 'StudentsUploadTemplate.xlsx';
                 
                 // Append to body, click, and remove
                 document.body.appendChild(link);
                 link.click();
                 document.body.removeChild(link);
                 
             } catch (error) {
                 console.error('Error downloading template:', error);
                 showError('Failed to download template. Please try again.');
             }
         }
         
         // Add pagination controls for enrolled students
         function addEnrolledStudentsPagination() {
             const container = document.getElementById('enrolledStudentsList');
             const paginationHtml = `
                 <div class="d-flex justify-content-between align-items-center mt-3">
                     <div class="text-muted small">
                         Page ${enrolledStudentsCurrentPage} of ${enrolledStudentsTotalPages}
                     </div>
                     <nav aria-label="Enrolled Students pagination">
                         <ul class="pagination pagination-sm mb-0">
                             <li class="page-item ${enrolledStudentsCurrentPage === 1 ? 'disabled' : ''}">
                                 <a class="page-link" href="#" onclick="changeEnrolledStudentsPage(${enrolledStudentsCurrentPage - 1})" ${enrolledStudentsCurrentPage === 1 ? 'tabindex="-1" aria-disabled="true"' : ''}>
                                     Previous
                                 </a>
                             </li>
                             ${generateEnrolledStudentsPageNumbers()}
                             <li class="page-item ${enrolledStudentsCurrentPage === enrolledStudentsTotalPages ? 'disabled' : ''}">
                                 <a class="page-link" href="#" onclick="changeEnrolledStudentsPage(${enrolledStudentsCurrentPage + 1})" ${enrolledStudentsCurrentPage === enrolledStudentsTotalPages ? 'tabindex="-1" aria-disabled="true"' : ''}>
                                     Next
                                 </a>
                             </li>
                         </ul>
                     </nav>
                 </div>
             `;
             
             container.insertAdjacentHTML('beforeend', paginationHtml);
         }
         
         // Generate page numbers for enrolled students pagination
         function generateEnrolledStudentsPageNumbers() {
             let pageNumbers = '';
             const maxVisiblePages = 5;
             
             if (enrolledStudentsTotalPages <= maxVisiblePages) {
                 // Show all pages if total is small
                 for (let i = 1; i <= enrolledStudentsTotalPages; i++) {
                     pageNumbers += `
                         <li class="page-item ${i === enrolledStudentsCurrentPage ? 'active' : ''}">
                             <a class="page-link" href="#" onclick="changeEnrolledStudentsPage(${i})">${i}</a>
                         </li>
                     `;
                 }
             } else {
                 // Show pages with ellipsis for large totals
                 let startPage = Math.max(1, enrolledStudentsCurrentPage - Math.floor(maxVisiblePages / 2));
                 let endPage = Math.min(enrolledStudentsTotalPages, startPage + maxVisiblePages - 1);
                 
                 if (endPage - startPage + 1 < maxVisiblePages) {
                     startPage = Math.max(1, endPage - maxVisiblePages + 1);
                 }
                 
                 if (startPage > 1) {
                     pageNumbers += `
                         <li class="page-item">
                             <a class="page-link" href="#" onclick="changeEnrolledStudentsPage(1)">1</a>
                         </li>
                         <li class="page-item disabled">
                             <span class="page-link">...</span>
                         </li>
                     `;
                 }
                 
                 for (let i = startPage; i <= endPage; i++) {
                     pageNumbers += `
                         <li class="page-item ${i === enrolledStudentsCurrentPage ? 'active' : ''}">
                             <a class="page-link" href="#" onclick="changeEnrolledStudentsPage(${i})">${i}</a>
                         </li>
                     `;
                 }
                 
                 if (endPage < enrolledStudentsTotalPages) {
                     pageNumbers += `
                         <li class="page-item disabled">
                             <span class="page-link">...</span>
                         </li>
                         <li class="page-item">
                             <a class="page-link" href="#" onclick="changeEnrolledStudentsPage(${enrolledStudentsTotalPages})">${enrolledStudentsTotalPages}</a>
                         </li>
                     `;
                 }
             }
             
             return pageNumbers;
         }
         
         // Change page for enrolled students
         function changeEnrolledStudentsPage(page) {
             if (page < 1 || page > enrolledStudentsTotalPages) {
                 return;
             }
             
             enrolledStudentsCurrentPage = page;
             displayEnrolledStudentsPage(allEnrolledStudents);
         }
    </script>
}
